第章
　　　　　　　　微型计算机基础
． 计算机中的数制及相互转换
在日常生活中人们最熟悉的是十进制数，但在计算机中，采用二进制数“”和“”可以
很方便地表示机内的数据与信息。在编程时，为了便于阅读和书写，人们还常用八进制数
或十六进制数来表示二进制数。
．． 进位计数制
按进位原则进行计数的方法，称为进位计数制。十进制数有两个主要特点：
（）有 个不同的数字符号：、、、…、；
（）低位向高位进位的规律是“逢十进一”。
因此，同一个数字符号在不同的数位所代表的数值是不同的。如．中个分别
代表、、 和 ．，这个数可以写成
．＝×＋×＋×＋×－
式中的 称为十进制的基数，、、、－称为各数位的权。
任意一个十进制数 Ｎ 都可以表示成按权展开的多项式：
Ｎ＝ｄｎ－ ×ｎ－ ＋ｄｎ－ ×ｎ－ ＋ … ＋ｄ × ＋ｄ－ ×－ ＋ … ＋ｄ－ｍ ×－ｍ
＝ ∑
ｎ－
ｉ＝－ｍ
ｄｉ×ｉ
其中，ｄｉ 是～共 个数字中的任意一个，ｍ 是小数点右边的位数，ｎ是小数点左边的
位数，ｉ是数位的序数。例如，．可表示为
．＝×＋×＋×＋×－＋×－
一般而言，对于用 Ｒ 进制表示的数 Ｎ ，可以按权展开为
Ｎ＝ａｎ－ ×Ｒｎ－ ＋ａｎ－ ×Ｒｎ－ ＋ … ＋ａ ×Ｒ ＋ａ－ ×Ｒ－ ＋ … ＋ａ－ｍ ×Ｒ－ｍ
＝ ∑
ｎ－
ｉ＝－ｍ
ａｉ×Ｒｉ
式中，ａｉ是 、、…、Ｒ－中的任一个，ｍ、ｎ是正整数，Ｒ是基数。在 Ｒ 进制中，每个数
　　第 章 微型计算机基础　　
字所表示的值是该数字与它相应的权 Ｒｉ 的乘积，计数原则是“逢 Ｒ进一”。
．二进制数
当 Ｒ＝ 时，称为二进位计数制，简称二进制。在二进制数中，只有两个不同数码：
和，进位规律为“逢二进一”。任何一个数 Ｎ，可用二进制表示为
Ｎ＝ａｎ－ ×ｎ－
＋ａｎ－ ×ｎ－
＋ … ＋ａ ×
＋ａ－ ×－
＋ … ＋ａ－ｍ ×－ｍ
＝ ∑
ｎ－
ｉ＝－ｍ
ａｉ×ｉ
　　例如，二进制数 ．可表示为
（．）＝×＋×＋×＋×＋×－＋×－
．八进制数
当 Ｒ＝ 时，称为八进制。在八进制中，有 、、、…、 共 个不同的数码，采用
“逢八进一”的原则进行计数。如（） 可表示为
（）＝×＋×＋×
．十六进制
当 Ｒ＝时，称为十六进制。在十六进制中，有、、、…、、Ａ、Ｂ、Ｃ、Ｄ、Ｅ、Ｆ共
个不同的数码，进位方法是“逢十六进一”。
例如，（Ａ．Ｄ）可表示为
（Ａ．Ｄ）＝×＋×＋×＋×－＋ ×－
表．列出了二、八、十、十六进制数之间的对应关系。
表． 各种进位制的对应关系
十进制 二进制 八进制 十六进制 十进制 二进制 八进制 十六进制
Ａ
Ｂ
Ｃ
Ｄ
Ｅ
Ｆ
．． 不同进制间的相互转换
．二、八、十六进制转换成十进制
根据各进制的定义表示方式，按权展开相加，即可将二进制数、八进制数、十六进制
数转换成十进制数。
　　单片机原理及接口技术　　
　　【例 】 将（．），（．），（Ｄ．Ａ）转换为十进制数。
　　　　（．）＝×＋×＋×－＋×－＋×－＝．
　　　　（．）＝×＋×＋×－＋×－＝．
　　　　（Ｄ．Ａ）＝×＋×＋×－＋×－＝．
．十进制数转换成二、八、十六进制数
任意十进制数 Ｎ 转换成 Ｒ 进制数，需将整数部分和小数部分分开，采用不同方法分
别进行转换，然后用小数点将这两部分连接起来。
（）整数部分：除基取余法。
分别用基数 Ｒ 不断地去除 Ｎ 的整数，直到商为零为止，每次所得的余数依次排列即
为相应进制的数码。最初得到的为最低有效数字，最后得到的为最高有效数字。
【例 】 将（）转换成二、八、十六进制数。
　　　　 　　　余数　　　　　　　　　　　　　　　　　　　　
　　　　　 … ↑最低位
　　　　　 …
　　　　　 …
　　　　　 … 余数
　　　　　 … … 余数
　　　　　 … … …
　　　　　 … 　　 … 　　 … Ａ
　　　　　 　 … 最高位
　　　　　（）＝（）　　　　（）＝（）　　　（）＝（Ａ）
（）小数部分：乘基取整法。
分别用基数 Ｒ（Ｒ＝，或）不断地去乘 Ｎ 的小数，直到积的小数部分为零（或直到
所要求的位数）为止，每次乘得的整数依次排列即为相应进制的数码。最初得到的为最高
有效数字，最后得到的为最低有效数字。
【例 】 将（．）转换成二、八、十六进制数（用小数点后五位表示）。
　　　　整数　　．　　　　　整数　　．　　　　　整数　　 ．
　　　　 ×　　 ×　　 ×　　
　　　　 … ． … ． Ａ … ．
　　　　 　． ． ．
　　　　 × × ×
　　　　 … ． … ． … ．
　　　　 　． ． ．
　　　　 × × ×
　　　　 … ． … ． … ．
　　　　 　． ． ．
　　　　 × × ×
　　　　 … ． … ． Ｅ … ．
　　　　 × ． ．
　　　　 × ×
　　　　 … ．
　　　　 … ． Ｂ … ．
　　第 章 微型计算机基础　　
故：（．）＝（．）＝（．）＝（．ＡＥＢ）
【例 】 将（．）转换成二、八、十六进制数。
根据例、例 可得
（．）＝ （．）＝ （．）＝（Ａ．ＡＥＢ）
．二进制与八进制之间的相互转换
由于＝ ，故可采用“合三为一”的原则，即从小数点开始分别向左、右两边各以
位为一组进行二—八换算：若不足 位的以 补足，便可将二进制数转换为八进制数。反
之，采用“一分为三”的原则，每位八进制数用三位二进制数表示，就可将八进制数转换为
二进制数。
【例 】 将（．） 转换为八进制数。
　　　　　 ．
↓ ↓ ↓ ↓ ↓
．
即　　　　　　（．）＝ （．）
【例 】 将（．） 转换成二进制数。
　　　　　　　　　 ． 　　
↓ ↓ ↓ ↓ ↓ ↓
　　　　 ．
即　　　　　　（．）＝（．）
．二进制数与十六进制数之间的转换
由于＝，故可采用“合四为一”的原则，从小数点开始分别向左、右两边各以 位
为一组进行二—十六换算；若不足 位以 补足，即可将二进制数转换为十六进制数。反
之，采用“一分为四”的原则，每位十六进制数用 位二进制数表示，便可将十六进制数转
换为二进制数。
【例 】 将（．） 转换为十六进制数。
　　　　　 ．
↓ ↓ ↓ 　↓
．
即　　　　　　（．）＝（．）
【例 】 将（ＡＢ．Ｃ）转换为二进制数。
　　　　　 　　 Ａ　　 　　 Ｂ　　．　　 　　 Ｃ
↓ ↓ ↓ ↓ ↓ ↓ ↓
．
即　　　　　　（ＡＢ．Ｃ）＝（．）
在程序设计中，为了区分不同进制的数，通常在数的后面加字母作为标注。其中，字母
Ｂ（Ｂｉｎａｒｙ）表示二进制数；字母 Ｑ（Ｏｃｔａｌ，用字母 Ｑ 而不用 Ｏ 主要是为区别数字）表示八
进制数；字母 Ｄ（Ｄｅｃｉｍａｌ）或不加字母表示十进制数；字母 Ｈ（Ｈｅｘａｄｅｃｉｍａｌ）表示十六进制
数。如Ｂ、Ｑ、Ｄ、ＡＨ 等。
　　单片机原理及接口技术　　
． 二进制数的运算
．． 二进制数的算术运算
二进制数只有 和 两个数字，其算术运算较为简单，加、减法遵循“逢二进一”、“借
一当二”的原则。
．加法运算
规则：＋＝；＋＝；＋＝；＋＝（有进位）
【例 】 求Ｂ＋Ｂ。
　　　　　被加数
加数＋
进位
　　和
即　　　　　　Ｂ＋Ｂ＝Ｂ
．减法运算
规则：－＝；－＝；－＝；－＝（有借位）
【例 】 求Ｂ－Ｂ。
　　　　　被减数
减数－
借位
　　差
即　　　　　　Ｂ－Ｂ＝Ｂ
．乘法运算
规则：×＝；×＝×＝；×＝
【例 】 求Ｂ×Ｂ。
　　　　　被乘数　　　
　　　　　　乘数　　×
　　　　　　　　　　＋
　　　　　　　积　　　
即　　　　　　Ｂ×Ｂ＝Ｂ
．除法运算
规则：／＝；／＝
　　第 章 微型计算机基础　　
【例 】 求Ｂ／Ｂ。
即　　　　　　Ｂ／Ｂ＝Ｂ
．． 二进制数的逻辑运算
．“与”运算
“与”运算是实现“必须都有，否则就没有”这种逻辑关系的一种运算。运算符为“· ”，
其运算规则如下：
·＝，·＝·＝，·＝
【例 】 若 Ｘ＝Ｂ，Ｙ＝Ｂ，求 Ｘ·Ｙ。
·
即　　　　　　Ｘ·Ｙ＝Ｂ
．“或”运算
“或”运算是 实 现“只 要 其 中 之 一 有，就 有”这 种 逻 辑 关 系 的 一 种 运 算，其 运 算 符 为
“＋”。“或”运算规则如下：
＋＝，＋＝＋＝，＋＝
【例 】 若 Ｘ＝Ｂ，Ｙ＝Ｂ，求 Ｘ＋Ｙ。
＋
即　　　　　　Ｘ＋Ｙ＝Ｂ
．“非”运算
“非”运算是实现“求反”这种逻辑的一种运算，如变量 Ａ 的“非”运算记作 珡Ａ。其运算规
则如下：
＝，＝
　　单片机原理及接口技术　　
【例 】 若 Ａ＝Ｂ，求 珡Ａ。
　　　　　珡Ａ＝Ｂ＝Ｂ
．“异或”运算
“异或”运算是实现“必须不同，否则就没有”这种逻辑的一种运算，运算符为“”。其
运算规则是：
＝，＝，＝，＝
【例 】 若 Ｘ＝Ｂ，Ｙ＝Ｂ，求 ＸＹ。
　
即　　　　　　ＸＹ＝Ｂ
． 带符号数的表示
．． 机器数及真值
计算机在数的运算中，不可避免地会遇到正数和负数，那么正负符号如何表示呢？由于
计算机只能识别和，因此，我们将一个二进制数的最高位用作符号位来表示这个数的正
负。规定符号位用“”表示正，用 “”表 示 负。例 如，Ｘ＝ －Ｂ，Ｙ＝ ＋Ｂ，
则 Ｘ表示为：Ｂ，Ｙ 表示为Ｂ。
可见，一个二进制数连同符号位在内作为一个数，称为机器数，如Ｂ。而一般
书写形式的数，称为该机器数的真值，如－Ｂ。计算机中机器数的表示方法有三种，
即原码、反码和补码。
．． 数的码制
．原码
当正数的符号位用表示，负数的符号位用表示，数值部分用真值的绝对值来表示
的二进制机器数称为原码，用［Ｘ］原 表示，设 Ｘ为整数。
若 Ｘ＝＋Ｘｎ－Ｘｎ－…ＸＸ，则［Ｘ］原 ＝Ｘｎ－Ｘｎ－…ＸＸ＝Ｘ；
若 Ｘ＝－Ｘｎ－Ｘｎ－…ＸＸ，则［Ｘ］原 ＝Ｘｎ－Ｘｎ－…ＸＸ＝ｎ－－Ｘ。
其中，Ｘ为ｎ－位二进制数，Ｘｎ－、Ｘｎ－、…、Ｘ、Ｘ 为二进制数或。例如＋
和－在计算机中（设机器数的位数是）其原码可分别表示为
［＋］原 ＝ Ｂ；［－］原 ＝ Ｂ
可见，真值 Ｘ与原码［Ｘ］原 的关系为
［Ｘ］原 ＝ Ｘ，
ｎ－－Ｘ ｛ ，
≤Ｘ＜ｎ
－ｎ－＜Ｘ≤
值得注意的是，由于［＋］原 ＝Ｂ，而［－］原 ＝Ｂ，所以数的原码不
唯一。
　　第 章 微型计算机基础　　
位二进制原码能表示的范围是：－～＋。
．反码
一个正数的反码，等于该数的原码；一个负数的反码，由它的正数的原码按位取反形
成。反码用［Ｘ］反 表示。
若Ｘ＝－Ｘｎ－Ｘｎ－…ＸＸ，则［Ｘ］反 ＝Ｘｎ－Ｘｎ－…ＸＸ。例如：Ｘ＝＋，则［Ｘ］反 ＝
［Ｘ］原 ＝Ｂ；Ｘ＝－，［Ｘ］原 ＝Ｂ，则［Ｘ］反 ＝Ｂ。
可见，
［Ｘ］反 ＝ Ｘ；
（ｎ－－）＋Ｘ ｛ ；
≤Ｘ＜ｎ－
－ｎ－＜Ｘ≤
注意：
（）位二进制反码能表示数的范围为：－～＋。
（）在反码中，＋与－的表示方法不同。
．补码
在讨论补码之前，先介绍模（ｍｏｄ）的概念。
“模”是指一个计量系统的计数量程。如，时钟的模为。任何有模的计量器，均可化
减法为加法运算。仍以时钟为例，设当前时钟指向点，而准确时间为点，调整时间的
方法有两种，一种是时钟倒拨小时，即－＝；另一种是时钟正拨小时，即＋＝
＋＝。由此可见，在以为模的系统中，加和减的效果是一样的，即
－＝＋（ｍｏｄ）
下面引进补码表示法。对于ｎ位计算机来说，数 Ｘ的补码定义为
［Ｘ］补 ＝ Ｘ，
ｎ＋Ｘ ｛ ，
≤Ｘ＜ｎ－；（ｍｏｄｎ）
－ｎ－≤Ｘ≤
即正数的补码就是它本身，负数的补码是真值与模数相加而得。
例如，ｎ＝时，
　　　　　［＋］补 ＝Ｂ
　　　　　［－］补 ＝Ｂ－ Ｂ＝Ｂ
　　　　　［］补 ＝［＋］补 ＝［－］补 ＝Ｂ
可见，数的补码表示是唯一的。在用补码定义求负数补码的过程中，由于做减法不
方便，一般该法不用。负数补码的求法：用原码求反码，再在数值末位加，即：［Ｘ］补 ＝
［Ｘ］反 ＋。例如：［－］补 ＝ ［－］反 ＋ ＝［＋］原 ＋＝＋＝Ｂ。位
二进制补码能表示的范围为：－ ～＋，若超过此范围，则为溢出。
． 定点数和浮点数
计算机中的数，既有整数也有小数，但在计算机中小数并不以单独的信息存放。为了
确定小数点的位置，通常采用两种方法表示：定点法和浮点法。
．定点法
定点法中约定所有数据的小数点隐含在某个固定位置。对于纯小数，小数点固定在数
　　单片机原理及接口技术　　
符与数值之间；对于整数，则把小数点固定在数值部分的最后面，其格式为
纯小数表示：数符．尾数　　 数符 尾数
　　　　．小数点
整数表示：数符尾数．　　 数符 尾数 ．小数点
其中，数符用来表示数的正负，正数为，负数为；尾数是指某数本身的数值部分。
定点法所能表示的数值范 围 很 有 限，当计算机采用定点法处理较大数值范围的运算
时，很容易产生溢出。因此，为了扩大数的表示范围和精度，时常采用浮点表示。
．浮点法
浮点法中，数据的小数点位置不是固定不变的，而是可浮动的。因此，可将任意一个
二进制数 Ｎ 表示成
Ｎ＝±Ｍ·±Ｅ
其中，Ｍ 为尾数，为纯二进制小数，Ｅ称为阶码。可见，一个浮点数有阶码和尾数两部分，
且都带有表示正负的阶符与数符，其格式为
阶符 阶码 Ｅ 数符 尾数 Ｍ
　　设阶码 Ｅ的位数为 ｍ 位，尾数 Ｍ 的位数为ｎ位，则浮点数 Ｎ 的取值范围为
－ｎ－ｍ＋≤｜Ｎ｜≤（－－ｎ）ｍ－
为了提高精度，发挥尾数有效位的最大作用，还规定尾数数字部分原码的最高位为，
叫做规格化表示法。如．表示为：－×．
． ＢＣＤ码和 ＡＳＣＩＩ码
．． ＢＣＤ码
人们习惯使用十进制数，为使计算机能识别、存储十进制数，并能直接使用十进制数进
行运算，就需要对十进制数进行编码。将十进制数表示为二进制编码的形式，称为二—十
进制编码，即 ＢＣＤ（ＢｉｎａｒｙＣｏｄｅｄＤｅｃｉｍａｌ）码。
位十进制数有～共个不同数码，至少需要由位二进制数表示。位二进制数
有种组合，取其种组合分别代表 个十进制数码。最常用的方法是ＢＣＤ 码，
其中、、、分别为位二进制数的位权值。表．给出了十进制数和ＢＣＤ码的对
应关系。
表． ＢＣＤ编码表
十进制数 ＢＣＤ码 十进制数 ＢＣＤ码
　　第 章 微型计算机基础　　
　　【例 】 写出．的 ＢＣＤ码。
根据表 ．，可直接写出相应的 ＢＣＤ码：
． ＝（．）ＢＣＤ
．． ＡＳＣＩＩ码
目前国际上比较通用的是年美国标准学会 ＡＮＳＩ制定的美国国家信息交换标准
字符码（ＡｍｅｒｉｃａｎＳｔａｎｄａｒｄＣｏｄｅｆｏｒＩｎｆｏｒｍａｔｉｏｎＩｎｔｅｒｃｈａｎｇｅ），简称 ＡＳＣＩＩ码。它的编码
如表 ． 所 示，从 表 中 可 见，ＡＳＣＩＩ码 采 用位 二 进 制 编 码，它 包 括 个 大 写 英 文 字
母；个小写英文字母；个数字～；个通用控制符号；个专用符号，共个
字符。　　　　
表 ． ＡＳＣＩＩ码 表
列
行
Ａ
Ｂ
Ｃ
Ｄ
Ｅ
Ｆ
ＭＳＢ位
ＬＳＢ位
ＮＵＬ ＤＬＥ ＳＰ ＠ Ｐ 、 ｐ
ＳＯＨ ＤＣ ！ Ａ Ｑ ａ ｑ
ＳＴＸ ＤＣ ″ Ｂ Ｒ ｂ ｒ
ＥＴＸ ＤＣ ＃ Ｃ Ｓ ｃ ｓ
ＥＯＴ ＤＣ  Ｄ Ｔ ｄ ｔ
ＥＮＱ ＮＡＫ ％ Ｅ Ｕ ｅ ｕ
ＡＣＫ ＳＹＮ ＆ Ｆ Ｖ ｆ ｖ
ＢＥＬ ＥＴＢ ′ Ｇ Ｗ ｇ ｗ
ＢＳ ＣＡＮ （ Ｈ Ｘ ｈ ｘ
ＨＴ ＥＭ ） Ｉ Ｙ ｉ ｙ
ＬＦ ＳＵＢ  ： Ｊ Ｚ ｊ ｚ
ＶＴ ＥＳＣ ＋ ； Ｋ ［ ｋ ｛
ＦＦ ＦＳ ， ＜ Ｌ ＼ ｌ ｜
ＣＲ ＧＳ － ＝ Ｍ ］ ｍ ｝
ＳＯ ＲＳ · ＞ Ｎ ↑ ｎ ～
ＳＩ ＨＳ ／ ？ Ｏ ← ｏ ＤＥＬ
　　如果要确定一个数字、字母或符号的 ＡＳＣＩＩ码，可以先在表．中找到这个字符，然
后将字符所在行与列所对应的二进制数连接起来（列 对 应 的位 在 前，行 对 应 的位 在
后），所得到的位二进制代码即为该字符的 ＡＳＣＩＩ码。如，大 写 字 母 Ｗ 的 ＡＳＣＩＩ码 为
Ｂ（Ｈ）。
　　单片机原理及接口技术　　
　　在计算机中传输 ＡＳＣＩＩ码，通常采用位二进制数码，因此，最高有效位用做奇偶校
验位，用于检查代码在传输过程中是否发生差错。
如果字母 Ｗ 的 ＡＳＣＩＩ码 采 用 偶 校 验，则在最左边的奇偶校验位上加一个“”，即 为
Ｂ，使其变成偶数个“”。
如果 Ｗ 采用奇校验，则在最左边加一个“”，即为Ｂ，变成奇数个“”。
． 微型计算机的组成及工作过程
．． 基本组成
微型计算机是大规模集成电路技术和计算机技术相结合的产物，是目前最为广泛应用
的一种计算机。这里，通过对微型计算机的基本组成的介绍，使读者了解计算机的各主要
部件的功能。
微型计算机的基本组成如图 ． 所示，它由中央处理器（ＣＰＵ）、存储器（Ｍ）、输入输
出接口（Ｉ／Ｏ 接口）和系统总线（ＢＵＳ）构成。
图 ． 微型计算机的基本组成
．中央处理器 ＣＰＵ
ＣＰＵ（ＣｅｎｔｒａｌＰｒｏｃｅｓｓｉｎｇＵｎｉｔ）是计算机的核心部件，它由运算器和控制器组成，完成
计算机的运算和控制功能。
运算器又称算术逻辑部件（ＡＬＵ，ＡｉｔｈｍｃｔｉｅａｌＬｏｇｉｃＵｎｉｔ），主要完成对数据的算术运
算和逻辑运算。
控制器（Ｃｏｎｔｒｏｌｌｅｒ）是整个计算机的指挥中心，它负责从内部存储器中取出指令并对
指令进行分析、判断，并根据指令发出控制信号，使计算机的有关部件及设备有条不紊地
协调工作，保证计算机能自动、连续地运行。
ＣＰＵ 中还包括若干寄存器（Ｒｅｇｉｓｔｅｒ），它们的作用是存放运算过程中的各种数据、地
址或其它信息。寄存器种类很多，主要有：
通用寄存器：向 ＡＬＵ 提供运算数据，或保留运算中间或最终的结果。
累加器 Ａ：这是一个使用相对频繁的特殊的通用寄存器，有重复累加数据的功能。
程序计数器 ＰＣ：存放将要执行的指令地址。
指令存储器ＩＲ：存放根据 ＰＣ 的内容从存储器中取出的指令。
在微型计算 机 中，ＣＰＵ 一般集成在一块 被称为微处理器 （ＭＰＵ，ＭｉｃｒｏＰｒｏｃｅｓｓｉｎｇ
Ｕｎｉｔ）的芯片上。
　　第 章 微型计算机基础　　
．存储器 Ｍ
存储器（Ｍｅｍｏｒｙ）是具有记忆功能的部件，用来存储数据和程序。存储器根据其位置
不同可分为两类：内存储器和外存储器。内存储器（简称内存）和 ＣＰＵ 直接相连，存放当前
要运行的程序和数据，故也称主存储器（简称主存）。它的特点是存取速度快，基本上可与
ＣＰＵ 处理速度相匹配，但价格较贵，能存储的信息量较小。外存储器（简称外存）又称辅助
存储器，主要用于保存暂时不用但又需长期保留的程序和数据。存放在外存的程序必须调
入内存才能进行。外存的存取速度相对较慢，但价格较便宜，可保存的信息量大。
ＣＰＵ 和内存储器合起来称为计算机的主机。外存通过专门的输入输出接口与主机相
连。外存与其它的输入输出设备统称为外部设备。
半导体存储器，按其工作方式可分为随机存取存储器 ＲＡＭ（ＲａｎｄｏｍＡｃｃｅｓｓＭｅｍｏｒｙ）
和只 读 存 储 器 ＲＯＭ（Ｒｅａｄ Ｏｎｌｙ Ｍｅｍｏｒｙ）两 种。对 存 储 器 存 入 信 息 的 操 作 称 为 写 入
（Ｗｒｉｔｅ），从存储器取出信息的操作称为读出（Ｒｅａｄ）。所以 ＲＡＭ 中存放的信息可随机地写
入或读出，计算机掉 电 后，ＲＡＭ 中 的 内 容 随 之 消 失。ＲＯＭ 中的信息只能读出而不能写
入，计算机掉电后，ＲＯＭ 中的内容保持不变。
存储器中最小的存储单位称为一个存储位（ｂｉｔ），用来表示 位二进制信息。将存储器
的每个二进制位组合为一个存储单元，称为字节（ｂｙｔｅ）。每个存储单元都有一个编号，
称为地址（Ａｄｄｒｅｓｓ）。ＣＰＵ 对存储单元的选择都是通过地址来进行的。存储单元的地址以
二进制数表示，称为地址码。地址码的宽度（位数）表明了可以访问的存储单元的数目。
ＣＰＵ 对主存进行操作时，通常是将若干个二进位作为一个整体存入或取出的，这一组
二进位代码称为一个字（Ｗｏｒｄ），其包含的二进位个数称为字长，一般为字节的整数倍。
外存储器目前使用最多的是磁表面存储器和光存储器两种。磁表面存储器是将磁性材
料沉积在基体上形成记录介质，并以磁头与记录介质的相对运动来存取信息。光存储器主
要是光盘（ＯｐｔｉｃａｌＤｉｓｋ），现称 ＣＤ（ＣｏｍｐａｃｔＤｉｓｋ）。光盘用光学方式读写信息，存储的信
息量比磁存储器的信息量大得多，因此受到广大用户的青睐。
．输入／输出接口（Ｉ／Ｏ接口）
输入／输出（Ｉ／Ｏ）接口由大规模集成电路组成的Ｉ／Ｏ 器件构成，用来连接主机和相应的
Ｉ／Ｏ 设备（如：键盘、鼠标、显示器、打印机等），使得这些设备和主机之间传送的数据、信
息在形式上和速度上都能匹配。不同的Ｉ／Ｏ 设备必须配置与其相适应的Ｉ／Ｏ 接口。
．总线
总线（ＢＵＳ）是计算机各部件之间传送信息的公共通道。微机中有内部总线和外部总线
两类。内部总线是 ＣＰＵ 内部之间的连线。外部总线是指 ＣＰＵ 与其它部件之间的连线。外
部总 线 有 三 种：数 据 总 线 ＤＢ（ＤａｔａＢｕｓ），地 址 总 线 ＡＢ（ＡｄｄｒｅｓｓＢｕｓ）和 控 制 总 线 ＣＢ
（ＣｏｎｔｒｏｌＢｕｓ）。
数据总线用来传送数据，其位数一般与处理器字长相同。数据总线具有双向传送数据
的功能。
地址总线用来传送地址信息。它能把地址信息从 ＣＰＵ 传送到存储器或Ｉ／Ｏ 接口，指
出相应的存储单元或Ｉ／Ｏ 设备。
地址总线的数目决定了 ＣＰＵ 能直接寻址的最大存储空间。若地址总线由根并行线
　　单片机原理及接口技术　　
组成，则 ＣＰＵ 的寻址空间为，存储地址编址范围为Ｈ～ＦＦＦＦＨ。地址总线具有
单向传送地址的功能。
控制总线用来传输控制信号。这些控制信号控制计算机按一定的时序，有规律地自动
工作。
．． 基本工作过程
根据冯·诺依曼原理构成的现代计算机的工作原理可概括为：存储程序和程序控制。
存储程序是指人们必须事先把计算机的执行步骤序列（即程序）及运行中所需的数据，通过
一定的方式输入并存储在计算机的存储器中。程序控制是指计算机能自动地逐一取出程序
中的一条条指令，加以分析并执行规定的操作。
在计算机运行的过程中有两种信息在流动：一是数据流，这包括原始数据和指令，它
们在程序运行前已经预先送至主存中。在运行程序时数据送至运算器参与运算，指令被送
往控制器。二是控制流，它是由控制器根据指令的内容发出的，指挥计算机各部件执行指
令规定的各种操作或运算，并对执行流程进行控制。
为了进一步了解计算 机 如 何 运 行，下面我们以虚拟机为 例，来 看 Ｚ＝Ｘ＋Ｙ 的 执 行
过程。
假定我们有一个虚拟机ＳＡＭ，主存储器的容量为Ｋ×，ＣＰＵ 中有一个可被程序员
使用的位累加器 Ａ。
ＳＡＭ 指令格式为
操作码 地址码
　　ＳＡＭ 中有如下指令：
指令名称 机器语言格式 汇编语言格式 功　　能
加法 α ＡＤＤα Ａ←（Ａ）＋ （α）
取数 α ＬＯＡＤα Ａ← （α）
存数 α ＳＴＯＲＥα α←（Ａ）
其中，α是某个存储单元的地址，（α）是表示该地址中存放的内容。加法运算是二元运算，
对于单地址指令的ＳＡＭ 机器来说，隐含约定其中一个操作数在累加器中，加法运算结果
也存放在累加器中。
假设 Ｘ和 Ｙ 均已存放在存储单元中。注意，Ｘ是个变量名，可以是某个存储单元的地
址，该单元中存放的是 Ｘ的值。计算Ｚ＝Ｘ＋Ｙ 可以用ＳＡＭ 的指令表示为以下步骤：
（）从地址为 Ｘ的单元中取出 Ｘ的值送到累加器中。
（）把累加器中的 Ｘ与地址为 Ｙ 的单元的内容相加，结果存放在累加器中。
（）把累加器中的内容送到地址为Ｚ的单元中。
相应的ＳＡＭ 指令是：
　　ＬＯＡＤ Ｘ
　　ＡＤＤ Ｙ
　　ＳＴＯＲＥ Ｚ
　　第 章 微型计算机基础　　
这三条指令组成的程序若事先已输入计算机，并存放在Ｈ、Ｈ、Ｈ 三个存储
单元中，同时，Ｘ、Ｙ、Ｚ存放在 ＡＨ、ＡＨ、ＡＨ 单元中，如表 ． 所示。
表 ． 计算 Ｚ＝Ｘ＋Ｙ的程序
主存地址 机器指令 汇编指令 说　　明
Ｈ ＦＨ ＬＯＡＤ Ｘ 取 Ｘ
Ｈ ＦＨ ＡＤＤ Ｙ 加 Ｙ
Ｈ ＦＨ ＳＴＯＲＥ Ｚ 送 Ｚ
…
ＡＨ 存放 Ｘ
ＡＨ 存放 Ｙ
ＡＨ 存放 Ｚ
　　 程 序 执 行 前，程 序 计 数 器 ＰＣ（ＰｒｏｇｒａｍｅＣｏｕｎｔｅｒ）首 先 指 向 程 序 的 起 始 地 址 （如
Ｈ），当第一条指令被 ＣＰＵ 取走后，ＰＣ会自动加，指向下一条指令，从而保证程序的
连续执行。
指令被取出后送入指令寄存器 ＩＲ（ＩｎｓｔｒｃｔｉｏｎＲｅｇｉｓｔｅｒ），由控制器中的译码器对指令
进行分析，识别不同的指令类别及各种获得操作数的方法。以加法指令 ＡＤＤＹ 为例，译码
器分析后得到如下结果：
（）这是一个加法指令；
（）一个操作数存放在 Ｙ（地址为 ＡＨ）中，另一操作数隐含在累加器 Ａ 中。
接着，操作进入指令执行阶段。仍以 ＡＤＤＹ 为例，将 Ｙ 与 Ａ 中内容送入 ＡＬＵ，进行
加法运算，结果送入 Ａ。
可见，计算机的基本工作过程，就是取指令，分析指令，执行指令，再取下一条指令，
依次周而复始执行指令序列的过程。
习 题 与 思 考 题
．将下列二进制数转换成十进制数、十六进制数。
　　　　Ｂ，．Ｂ，．Ｂ
．将下列各进制数转换成十进制数。
　　　　．Ｂ，．Ｑ，Ａ．ＣＨ
．将下列十进制数转换成二、八、十六进制数。
　　　　，．，．
．已知 Ｘ＝Ｂ，Ｙ＝Ｂ，用算术运算规则求：
　　　　Ｘ＋Ｙ，Ｘ－Ｙ，Ｘ·Ｙ，Ｘ／Ｙ
．已知 Ｘ＝Ｂ，Ｙ＝Ｂ，用逻辑运算规律求：
　　　　Ｘ·Ｙ，Ｘ＋Ｙ，ＸＹ，珚Ｘ
．设机器字长为位，求下列数值的二、十六进制原码、反码和补码：
　　　　＋ 　　－　　＋　　－　　＋　　－
　　单片机原理及接口技术　　
．将下列ＢＣＤ 码分别转换成二、十、十六进制数。
　　　　　　　．
．将下列字符串用十进制的 ＡＳＣＩＩ码值表示：
　　　　Ｃｏｍｐｕｔｅｒ，Ｘ＞－ ．
．微型计算机有几个组成部分？每个部分的主要功能是什么？
．存储器单元内容和存储器单元地址有何不同？
．简述计算机的基本工作过程。
　　第 章 微型计算机基础　　
第章
　　　　　　单片机的硬件结构和原理
． 概　　述
单片微型计算机（ＳｉｎｇｌｅＣｈｉｐＭｉｃｒｏｃｏｍｐｕｔｅｒ）简称单片机，是指在一块芯片体上集成
了中央处理器 ＣＰＵ、随机存储器 ＲＡＭ、程 序 存 储 器 ＲＯＭ 或 ＥＰＲＯＭ、定 时 器／计 数 器、
中断控制器以及串行和并行Ｉ／Ｏ 接口等部件，构成一个完整的微型计算机。目前，新型单
片机内还有 Ａ／Ｄ 及 Ｄ／Ａ 转 换 器、高 速 输 入／输 出 部 件、ＤＭＡ 通 道、浮 点 运 算 等 特 殊
功能部件。由于它的结构和指令功能都是按工业控制要求设计的，特 别 适 用 于 工 业 控 制
及其数据处理场合，因此，确切的称谓应是微控制器（Ｍｉｃｒｏｃｏｎｔｒｏｌｌｅｒ），单片机只是其习惯
称呼。　　
．． 单片机的发展简史
自 年美国Ｉｎｔｅｌ公司制造出第一块 位微处理器以来，其发展十分迅猛，到目前
为止，大致可分为以下五个阶段。
．位单片机（～）
年月，Ｉｎｔｅｌ公 司 设 计 了 集 成 度 为 只 晶 体 管／片 的 位 微 处 理 器 Ｉｎｔｅｌ
，并配有 ＲＡＭ、ＲＯＭ 和移位寄存器，构成第一台 ＭＣＳ 微处理器。这种微处理器
虽仅用于简单控制，但价格便宜，至今仍不断有多功能的位机问世。
．低档位单片机（～）
这类单片机不带串行接口，寻址范围一般在 ＫＢ内。其功能可满足一般工业控制和
智能化仪器等的需要，如Ｉｎｔｅｌ公司的，Ｍｏｓｔｅｋ公司的等。
．高档位单片机（～）
这类单片机带有串行 接 口，寻 址 范 围 可 达ＫＢ，有 多 级 中 断 处 理 系 统、位 定 时
器／计数器。其功能较强，是目前应用的主要产品，如Ｉｎｔｅｌ公司的、Ｍｏｔｏｒｏｌａ公司的
Ｚ和 ＮＥＣ公司的 ＭＰＤ等产品。
　　单片机原理及接口技术　　
．位单片机（～）
Ｍｏｓｔｅｋ公司于年首先推出了位单片机，随后Ｉｎｔｅｌ公司于年推出
位单片机，其它公司也相继推出了同档次的产品。由于位单片机采用了最新的
制造工艺，其计算速度和控制功能大幅度提高，具有很强的实时处理能力。
．新一代单片机（年代以来）
这类单片机在结构上采用双 ＣＰＵ 或内部流水线，ＣＰＵ 位数有位、位、位，时
钟频率高达ＭＨｚ，片内带有 ＰＷＭ 输出、监视定时器 ＷＤＴ、可编程计数器阵列 ＰＣＡ、
ＤＭＡ 传输、调制解调器等。芯片向高集成化、低功耗方向的发展，使得单片机在大量数据
的实时处理、高级通信系统、数字信号处理、复杂工业过程控制、高级机器人以及局域网
等方面得到大量应用。这类单片机有 ＮＥＣ公司的 ＭＰＤ，Ｍｉｔｓｕｂｉｓｈｉ公司的 Ｍ，
Ｒｅｃｋｗｅｌｌ公司 Ｒ／、ＲＣ，Ｉｎｔｅｌ公司的、ＵＰＩ 等。
需要指出：
（）单片机的发展虽然经历了位、位、位各阶段，但位、位、位单片机仍
各有其应用领域，如位单片机在一些简单家用电器、高档玩具中仍有应用。
（）位单片机在中小规模应用场合仍占主流地位。
（）位单片机在比较复杂的控制系统中才有应用；位单片机因控制领域对它的
需求不大，目前在我国的应用并不太多。
．． 单片机的发展方向
世纪年代以来，单片机发展异常迅速，各大芯片厂商都十分重视新型单片机的
研制、生产和推广，单片机已成为一种“嵌入式”控制芯片，其技术发展主要表现在以下几
个方面。
．增加字长，提高数据精度和处理的速度
早期单片机的字长是位，以后产生了位、位和位的单片机。但是在多数应
用场合，位数据可以满足需要。因此，位单片机与位、位及位单片机一样，仍
在体系结构、多功能部件集成、流水线与并行处理技术、制造工艺、时钟频率等方面竞相
发展。
．改进制作工艺，提高单片机的整体性能
随着集成电路工艺的发展，单片机制作由 ＭＯＳ型发展成 ＣＭＯＳ、ＨＣＭＯＳ型，从而
提高了芯片的集成度和工作速度，降低了电压和功耗；内部采用大容量 Ｆｌａｓｈ存储器，实
现在系统中 烧 录 程 序 （ＩＳＰ）和 在 应 用 中 烧 录 程 序 （ＩＡＰ）等 技 术。比 如，Ｐｈｉｌｉｐｓ公 司 的
ＰＣＲＣ／ＰＣＲＤ具有ＫＢ／ＫＢ的 Ｆｌａｓｈ存储器，且集成有引导和擦除／烧录
程序；外部时钟频率提高到ＭＨｚ～ＭＨｚ，运算速度达到Ｍ／ｓ～Ｍ／ｓ。
．由复杂指令集 ＣＩＳＣ转向简单指令集 ＲＩＳＣ技术
早期的 ＭＣＳ 单片机采用的是 ＣＩＳＣ（ＣｏｍｐｌｅｘＩｎｓｔｒｕｃｔｉｏｎＳｅｔＣｏｍｐｕｔｅｒ）技术，随
着 ＲＩＳＣ（ＲｅｄｕｃｅｄＩｎｓｔｒｕｃｔｉｏｎＳｅｔＣｏｍｐｕｔｅｒ）技术的发展，单片机也采用了这一技术，简化
了体 系 结 构，提 高 了 ＣＰＵ 的 速 度，如 Ｍｉｃｒｏｃｈｉｐ 的 ＰＩＣＦ× × ×、ＰＩＣＦ× × ×、
ＰＩＣＦ×××、ＰＩＣＦ×××单片机等。
　　第 章 单片机的硬件结构和原理　　
．多功能模块集成技术，使一块“嵌入式”芯片具有多种功能
在新型 单 片 机 中，除 了 ＲＡＭ／ＲＯＭ、文 件 寄 存 器、定 时 器／计 数 器、并／串 行 接 口 电
路、Ｖ／Ｆ变换器、Ａ／Ｄ与 Ｄ／Ａ 电路之外，已有许多单片机采用双 ＣＰＵ 或者多 ＣＰＵ 结构，
增加锁相环路、ＵＳＢ、ＣＡＮ、ＩＳＳＣ、Ｉ
Ｃ等总线接口，提供 ＴＣＰ／ＩＰ协议的通信接口。一则
提高单片机数值计算、数据采集与处理的能力，二则提供外部数据传送和与通信网络连接
的能力。比如美国 Ｅｃｈｅｌｏｎ公司的 Ｎｅｕｒｏｎ，内置个 ＣＰＵ。其中一个用于介质访问，
一个用于数据处理器，另一个作为网络处理器。又如 Ｐｈｉｌｉｐｓ公 司 的 ＰＣ×，提 供Ｉ
Ｃ
总线传送方式。
．微处理器与 ＤＳＰ技术结合
新型单片机将微处理器与 ＤＳＰ（ＤｉｇｉｔａｌＳｉｇｎａｌＰｒｏｃｅｓｓｏｒ）技术结合，适时解决网络与
多媒体技术所需的高速实时处理能力。比如我国台湾凌阳科技公司推出的 μ′ｎｓｐ系列单片
机，其位机中增添了 ＤＳＰ 功 能，具 有 话 音 编 码 与 解 码 器，内 置 在 线 仿 真 电 路ＩＣＥ（Ｉｎ
ＣｉｒｃｕｉｔＥｍｕｌａｔｏｒ）。
．融入高级语言的编译程序
新型单片机内部融入了高级评议的编译程序，支持应用程序接口 ＡＰＩ的使用，支持 Ｃ
语言及硬件描述 ＶＨＤＬ等高级语言的使用，内置在线仿真电路ＩＣＥ，支持在线编程写入，
即ＩＳＰ和ＩＡＰ技术等。
．低电压、宽电压、低功耗
新型单片机追求低电压、宽电压、低功耗，它改进了制作工艺，降低了内部电压和功
耗，提供宽电压使用方式，以支持不同场合的需要。比如瑞典 Ｘｅｍｉｃ公司的 ＸＥ，使用
电压为．Ｖ～．Ｖ，当运算速度为 Ｍ／ｓ时，电流为μＡ；在待机状态下，电流仅
为μＡ。
．． 单片机的特点
单片机主要具有如下特点。
（）有优异的性能价格比。
（）集成度高、体积小、有很高的可靠性。单片机把各功能部件集成在一块芯片上，内
部采用总线结构，减少了各芯片之间的连线，大大提高了单片机的可靠性与抗干扰能力。
另外，其体积小，对于强磁场环境易于采取措施，适合于在恶劣环境下工 作；也 易 于 产
品化。
（）控制功能强。为了满足工业控制的要求，一般单片机的指令系统中均有极其丰富
的转移指令、Ｉ／Ｏ 口的逻辑操作及位处理指令。一般来说，单片机的逻辑控制功能及运行
速度均高于同一档次的微机。
（）单片机的系统扩展和系统配置都比较典型、规范，且非常容易构成各种规模的应
用系统。
正是由于具有上述显著的特点，单片机应用范围日益扩大。单片机的应用，打破了人
们的传统设计思想，原来很多用模拟电路、脉冲数字电路和逻辑部件来实现的功能，现在
均可以使用单片机，通过软件来完成。
　　单片机原理及接口技术　　
．． 单片机的应用
因单片机具有体积小、重量轻、价格便宜、功耗低、控制功能强及运算速度快等特点，
故在国民经济建设、军事及家用电器等领域均得到广泛的应用。按照单片机的特点，单片
机可分为单机应用和多机应用。
．单机应用
在一个应用系统中，只用一个单片机，这是目前应用最多的方式，主要应用领域有：
（）测控系统。用单片机可构成各种工业控制系统、自适应系统、数据采集系统等。例
如，温室人工气候控制、水闸自动控制、电镀生产线自动控制、汽轮机电液调节系统、车辆
检测系统等。
（）智能仪表。用单片机改造原有的测量、控制仪表，能促进仪表向数字化、智能化、
多功能化、综合化、柔性化发展。如温度、压力、流量、浓度等的测量、显示及仪表控制。
通过采用单片机软件编程技术，使测量仪表中长期存在的误差修正、线性化处理等难题迎
刃而解。
（）机电一体化产品。单片机与传统的机械产品结合，使传统机械产品结构简化，控
制智能化。这类产品如：简易数控机床，电脑绣花机，医疗器械等。
（）智能接口。在计算机控制系统 （特别是较大型的工业测控系统）中，普遍采用单片
机进行接口的控制与管理，因单片机与主机是并行工作，故大大提高了系统的运行速度。
例如：在大型数据采集系统中，用单片机对 ＡＤＣ接口进行控制不仅可提高采集速度，而且
还能对数据进行预处理，如数字滤波、线性化处理、误差修正等。
（）智能民用产品。在家用电器、玩具、游戏机、声像设备、电子秤、收银机、办公设备、
厨房设备等产品中引入单片机，不仅使产品的功能大大增强，而且获得了良好的使用效果。
．多机应用
单片机的多机应用系统可分为功能集散系统、并行多机处理及局部网络系统。
（）功能集散系统。多功能集散系统是为了满足工程系统多种外围功能的要求而设置
的多机系统。例如：一个加工中心的计算机系统除完成机床加工运行控制外，还要控制对
刀系统、坐标系统、刀库管理、状态监视、伺服驱动等机构。
（）并行多控制系统。并行多控制系统主要解决工程应用系统的快速问题，以便构成
大型实时工程应用系统。典型的有快速并行数据采集、处理系统、实时图像处理系统等。
（）局部网络系统。单片机网络系统的出现，使单片机应用进入了一个新的水平。目
前该网络系统主要是分布式测控系统，单片机主要用于系统中的通信控制，以及构成各种
测控子级系统。
典型的分布式测控系统有两种类型：树状网络系统与位总线网络系统。
． ＭＣＳ 单片机硬件结构
自从年单片机诞生以来，单片机已有多个系列，近个机种。国际知名公
司及其位单片机产品如表．所示。
　　第 章 单片机的硬件结构和原理　　
表． 位单片机的主要厂商及产品型号
公 司 产品型号 兼容性
Ｉｎｔｅｌ公司 ＭＣＳ 及其增强系列单片机
Ａｔｍｅｌ公司 ＡＴＸ系列 Ｆｌａｓｈ单片机
Ｐｈｉｌｉｐｓ公司 ＸＣ及ＣＸ系列高性能单片机
Ｗｉｎｂｏｎｄ公司 ＷＣ及 ＷＣ系列高速低价单片机
ＬＧ公司 ＧＭＳ／系列高速低压单片机
Ｃｙｇｎａｌ公司 ＣＦ系列高速ＳＯＣ单片机
与 ＭＣＳ 兼容
Ｍｏｔｏｒｏｌａ公司 和系列高性能单片机
Ｚｉｌｏｇ公司 Ｚ系列特殊应用设计单片机
Ｍｉｃｒｏｃｈｉｐ公司 ＰＩＣ系列 ＲＩＳＣ结构单片机
Ａｔｍｅｌ公司 ＡＶＲ系列 ＲＩＳＣ结构单片机
与 ＭＣＳ 不兼容
上述产品既有很多共性，又各具一定的特色，在市场上都占有一席之地。根据近年来
的有关统计，Ｉｎｔｅｌ公司的单片机市场占有率为％，其中 ＭＣＳ 系列产品又占％，
仍为主流系列。
．． ＭＣＳ 系列单片机的分类
ＭＣＳ 系列单片机已有多种产品，可分为两大系列：ＭＣＳ 子系列和 ＭＣＳ
子系列，如表 ． 所 示。各子系列按片内 有 无 ＲＯＭ 和 ＥＰＲＯＭ 标 以 不 同 的 型 号。如
ＭＣＳ 系列有、和。另外，芯片的制造工艺也有 ＨＭＯＳ与 ＣＨＭＯＳ 之
分。采用低功耗的 ＣＨＭＯＳ工艺的 ＭＣＳ 系列芯片命名为Ｃ、Ｃ和Ｃ等。
表 ． ＭＣＳ 系列单片机配置一览表
系
列
片内存储器／ＫＢ
无
ＲＯＭ
片内
ＲＯＭ
片内
ＥＰＲＯＭ
片内
ＲＡＭ
定时器／
计数器
并行
Ｉ／Ｏ
串行
Ｉ／Ｏ
中断源 制造工艺
ＭＣＳ
子系列
×位 × 位 ＨＭＯＳ
Ｃ
Ｃ
Ｃ
×位 ×位 ＣＨＭＯＳ
ＭＣＳ
子系列
×位 × 位 ＨＭＯＳ
Ｃ
Ｃ
Ｃ
×位 ×位 ＣＨＭＯＳ
　　／／三种型号，称为子系列。这三种芯片的结构和功能相同，它们
之间的区别在于片内程序存储器配置状态：片内含有ＫＢ的掩膜ＲＯＭ，其中的程序
是生产厂家制作芯片时，代为用户烧制的，出厂的都是具有特殊用途的单片机。
　　单片机原理及接口技术　　
应用在程序固定且批量大的单片机产品中。片内含有ＫＢ的 ＥＰＲＯＭ，用户可以把
编写好的程序用开发机或编程器写入其中，需要修改时，可以先用紫外线擦除器擦除，然
后再写入新的程序。片内没有 ＲＯＭ，使用时需在片外接 ＥＰＲＯＭ。
ＡＨ／ＡＨ／ＡＨ 是／／的增强型，称为子系列。其中片
内 ＲＯＭ 和 ＲＡＭ 的容量比子系列各增加一倍，另外，增加了一个定时器／计数器和
一个中断源。
Ｃ／Ｃ／Ｃ是 子 系 列 的 ＣＨＭＯＳ 工 艺 芯 片，Ｃ／Ｃ／Ｃ 是
子系列的 ＣＨＭＯＳ工艺芯片，两者芯片内的配置和功能兼容。
ＭＣＳ 系列单片机采用两种半导体工艺生产，一种是 ＨＭＯＳ工艺，即高密度短沟
道 ＭＯＳ工艺；另外一种是 ＣＨＭＯＳ工艺，即互补金属氧化物的 ＨＭＯＳ工艺。芯片型号中
带有“Ｃ”的，均为ＣＨＭＯＳ工艺芯片，其特点是功耗低。另外，Ｃ还带有两级程序存储
器保密系统，可防止非法复制程序。
．． 与 ＭＣＳ 系列兼容的单片机
从Ｉｎｔｅｌ公司推出 ＭＣＳ 系列高档位单片机至今已近年，系列单片机经久
不衰，并得到了极其广泛的应用。近年来，世界上很多半导体公司都生产以为内核的
单片机，如 Ａｔｍｅｌ公司的 ＡＴ／ＡＴ系列、Ｐｈｉｌｉｐｓ公司 的 Ｐ／Ｐ系 列、ＳＳＴ 公 司 的
ＳＴＣ／系列单片机。世界上各大公司生产的系列单片机均有多种型号的产品，各大
公司通常以ＸＣ来命名系列单片机，其中
Ｘ＝
掩膜 ＲＯＭ
ＥＰＲＯＭ／ＯＴＰＲＯＭ
烅
烄
烆 ＦｌａｓｈＲＯＭ
在众多的单片机系列中，ＡＴ系列单片机在我国也得到极其广泛的应用，越来越
受到人们的瞩目。ＡＴ系列单片机是美国 Ａｔｍｅｌ公司的位 Ｆｌａｓｈ单片机产品。它的最
大特点是在片内含有 Ｆｌａｓｈ存储器，在系统的开发过程中修改程序十分容易，使开发调试
更为方便。ＡＴ系列单片机以为内核，是与系列单片机兼容的系列，其型号可
分为标准型、低档型和高档型类。
．标准型单片机
标准型系列单片机是与 ＭＣＳ 系列单片机兼容的。在内部含有ＫＢ 或ＫＢ
可重复编程的 Ｆｌａｓｈ存储器，可进行次擦写操作。全静态工作为～ＭＨｚ，有级
程序存储器加密锁定，内部含有～字节的 ＲＡＭ、脚可编程Ｉ／Ｏ 口、～个
位定时器／计数器、～级中断，此外有通用串行接口、低电压空闲模式及掉电模式。
ＡＴ系列标准型单片机有 种，分 别 为 ＡＴＣ、ＡＴＬＶ、ＡＴＣ 和
ＡＴＬＶ，其中 ＡＴＣ、ＡＴＣ直接与系列兼容，相当于将、中的
ＫＢ、ＫＢＲＯＭ 换成相应数量的Ｆｌａｓｈ存储器；ＡＴＬＶ是 ＡＴＣ的低电压型号，
可以在．～Ｖ 的电压范围内工作。
．低档型单片机
低档型单片机有 ＡＴＣ和 ＡＴＣ两种型号。除并行Ｉ／Ｏ 口数量较少外，其
　　第 章 单片机的硬件结构和原理　　
他结构和 ＡＴＣ差不多，芯片引脚只有条。
．高档型单片机
高 档 型 单 片 机 有 ＡＴＳ、ＡＴＳ、ＡＴＳ 和 ＡＴＳ 等 型 号， 其 中
ＡＴＳ有ＫＢ可下载Ｆｌａｓｈ存储器，ＡＴＳ、ＡＴＳ有ＫＢ可下载Ｆｌａｓｈ存储
器，ＡＴＳ有ＫＢ可下载 Ｆｌａｓｈ存储器，下载功能由微机通过单片机的串行外围接口
ＳＰＩ实现。ＡＴＳ还含有ＫＢ的 ＥＥＰＲＯＭ，提高了存储容量。此外，高档型单片机
还增加了一些功能：个中断源、ＳＰＩ接口、Ｗａｔｃｈｄｏｇ定时器、双数据指针和从电源下降
的中断恢复等，ＡＴ系列单片机各型号的性能比较见表．。
表． ＡＴ系列单片机配置一览表
型号 ＡＴＣ ＡＴＣ ＡＴＣＡＴＣ ＡＴＳ ＡＴＳ ＡＴＳ ＡＴＳ
Ｆｌａｓｈ／ＫＢ
ＲＡＭ／Ｂ
Ｉ／Ｏ／条
定时器／个
中断源／个
串行口／个 无
ＥＥＰＲＯＭ／ＫＢ 无 无 无 无 无 无 无
ＳＰＩ 无 无 无 无 有 有 有 有
Ｗａｔｃｈｄｏｇ 无 无 无 无 有 有 有 有
Ｍ 加密／级
尽管很多公司生产的系列单片机差别各异，并有许多派生机种，但基本硬件组成和
指令系统仍与 ＭＣＳ 系列单片机兼容。
．． ＭＣＳ 单片机的内部结构
ＭＣＳ 单片机是在一块芯片中集成了 ＣＰＵ、ＲＡＭ、ＲＯＭ、定时器／计数器和多功
能Ｉ／Ｏ 口等一台计算机所需要的基本功能部件。其基本结构框图如图 ．所示，包括：
· 一个位 ＣＰＵ；
· ＫＢＲＯＭ 或 ＥＰＲＯＭ（无 ＲＯＭ）；
· 字节 ＲＡＭ 数据存储器；
· 个特殊功能寄存器ＳＦＲ；
·个位并行Ｉ／Ｏ 口，其中 Ｐ、Ｐ为地址／数据线，可寻址ＫＢＲＯＭ 和ＫＢ
ＲＡＭ；
· 一个可编程全双工串行口；
· 具有个中断源，两个优先级，嵌套中断结构。
· 两个位定时器／计数器；
· 一个片内振荡器及时钟电路。
　　单片机原理及接口技术　　
图 ． ＭＣＳ 单片机结构框图
． 中央处理器 ＣＰＵ
ＭＣＳ 单片机内含有一个功能很强的 ＣＰＵ，它由运算器和控制器构成。
．． 运算器
运算器包括算术逻辑运算单元 ＡＬＵ、累加器 ＡＣＣ、寄存器 Ｂ、暂存器 ＴＭＰ、程序状
态字寄存器 ＰＳＷ、十进制调整电路等。它能实现数据的算术逻辑运算、位变量处理和数据
传送操作。
．算术逻辑单元 ＡＬＵ
ＡＬＵ 在控制器根据指令发出的内部信号控制下，对 位二进制数据进行加、减、乘、
除运算和逻辑与、或、非、异或、清零等运算。它具有很强的判跳、转移、丰富的数据传送、
提供存放中间结果以及常用数据寄存器等功能。ＭＣＳ 中位处理器具有位处理功能，如
置位、清零、取反、测试转移及逻辑“与”、“或”等位操作，特别适用于实时逻辑控制，故位
处理器有布尔处理器之称。
．累加器 ＡＣＣ（Ａｃｃｕｍｕｌａｔｏｒ）
累加器 ＡＣＣ简称累加器 Ａ，为一个位寄存器，是 ＣＰＵ 中使用最频繁的寄存器，在
算术与逻辑操作中，Ａ 存放一个操作数或运算结果。在与外部存储器或Ｉ／Ｏ 口进行数据传
送时，都要经过 Ａ 来完成。Ａ 还能完成其它寄存器不能完成的操作，如移位、取反等操作。
．寄存器 Ｂ
寄存器Ｂ，通常与累加器 Ａ 配合使用，存放第二操作数。在乘、除运算中，运算结束后
存放乘法的乘积高位字节或除法的余数部分；若不作乘除运算时，可作通用寄存器使用。
　　第 章 单片机的硬件结构和原理　　
．程序状态字ＰＳＷ（ＰｒｏｇｒａｍｅＳｔａｔｅＷｏｒｄ）
程序状态字（ＰＳＷ）寄存当前指令执行后的操作结果的某些特征，为下条指令的执行提
供状态条件。其定义如下：
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
Ｃｙ ＡＣ Ｆ ＲＳ ＲＳ ＯＶ … Ｐ ＰＳＷ
　　Ｃｙ（ＰＳＷ．）：进位标志位。如果操作结果在最高位有进位输出（加法）或借位输入（减
法）时，Ｃｙ＝；否则 Ｃｙ＝。Ｃｙ既可作为条件转移指令中的条件，也可用于十进制调整。
ＡＣ（ＰＳＷ．）：辅助进位标志位。如果操作结果的低位有进位（加法）或借位（减法）
时，ＡＣ＝；否则 ＡＣ＝。在 ＢＣＤ码运算的十进制调整中要用到 ＡＣ。
Ｆ（ＰＳＷ．）：用户标 志 位。用 户 可 用 软 件 对 Ｆ 赋 以 一 定 的 含 义，决 定 程 序 的 执 行
方式。
ＲＳ（ＰＳＷ．）、ＲＳ（ＰＳＷ．）：工作寄存器组选择位。指示当前使用的工作寄存器组，
其定义见表 ．。
表 ． ＲＳ、ＲＳ与片内工作寄存器组的对应关系
ＲＳ ＲＳ 寄存器组 片内 ＲＡＭ 地址 通用寄存器名称
组 Ｈ～Ｈ Ｒ～Ｒ
组 Ｈ～ＦＨ Ｒ～Ｒ
组 Ｈ～Ｈ Ｒ～Ｒ
组 Ｈ～ＦＨ Ｒ～Ｒ
　　ＯＶ（ＰＳＷ．）：溢出标志位。它反映运算结果是否溢出，溢出时 ＯＶ＝；否则 ＯＶ＝。
ＯＶ 可作为条件转移指令中的条件。
ＰＳＷ．：未定义位。
Ｐ（ＰＳＷ．）：奇偶标志位。如果 ＡＣＣ中的个数为奇数，则Ｐ＝；否则Ｐ＝。Ｐ也可
作为条件转移指令中的条件。
．． 控制器
控制器包括定时控制逻辑（时钟电路、复位电路），指令寄存器，指令译码器，程序计
数器 ＰＣ，堆栈指针ＳＰ，数据指针寄存器 ＤＰＴＲ以及信息传送控制部件等。它是单片机的
“心脏”，由它定时产生一系列的微操作，用以控制单片机各部分的运行。
．时钟电路
ＭＣＳ 单片机芯片内部设有一个反向放大器所构成的振荡器，ＸＴＡＬ和 ＸＴＡＬ分
别为振荡电路的输入端和输出端，时钟可以由内部或外部产生。内部时钟电路如图．（ａ）
所示。在 ＸＴＡＬ和ＸＴＡＬ引脚上外接定时元件，内部振荡电路就产生自激振荡。定时元
件通常采用石英晶 体 和 电 容 组 成 的 并 联 谐 振 回 路。晶振频率可以在． ＭＨｚ到 ＭＨｚ
之间选择，通常选择为ＭＨｚ，Ｃ、Ｃ电容值取ｐＦ～ｐＦ，电容的大小可起频率微调
的作用。外部时钟电路如图 ．（ｂ）所示，ＸＴＡＬ接地，ＸＴＡＬ接外部振荡器，对外部振
荡器信号无特殊要求，只需保证脉冲宽度，一般频率为低于ＭＨｚ的方波信号。
　　单片机原理及接口技术　　
图 ． 单片机时钟电路
（ａ）内部时钟电路；（ｂ）外部振荡源
．复位电路
通过某种方式，使单片机内各寄存器的值变为初始状态的操作称为复位。复位电路如
图 ． 所示，在时钟电路工作后，在 ＲＥＳＥＴ（图中为 ＲＳＴ）端持续给出 个机器周期（
个振荡周期）的高电平就可完成复位操作。复位后各寄存器的状态见表 ．。复位方式有两
种：上电复位和开关复位。
图 ． 单片机复位电路
（ａ）上电复位电路；（ｂ）开关复位电路
表 ． 复位后内部寄存器状态
特殊功能寄存器 初始状态 特殊功能寄存器 初始状态
ＡＣＣ Ｈ ＴＭＯＤ Ｈ
ＰＣ Ｈ ＴＣＯＮ Ｈ
ＰＳＷ Ｈ ＴＬ Ｈ
ＳＰ Ｈ ＴＨ Ｈ
ＤＰＴＲ ＴＬ Ｈ
Ｐ～Ｐ ＦＦＨ ＴＨ Ｈ
ＩＰ ｘｘＢ ＳＣＯＮ Ｈ
ＩＥ ｘＢ ＳＢＵＦ 不定
ＰＣＯＮ ｘｘｘＢ
　　第 章 单片机的硬件结构和原理　　
　　图 ．（ａ）是上电复位电路。在通电瞬间，在 ＲＣ 电 路 充 电 过 程 中，ＲＳＴ 端 出 现 正 脉
冲，从而使单片 机 复 位。Ｃ 和 Ｒ 的值随时钟频率变化而 变 化，可 由 实 验 调 整，当 采 用
ＭＨｚ时钟时，Ｃ＝μＦ，Ｒ＝ｋΩ。图 ．（ｂ）为 开 关 复 位 电 路。当 采 用 ＭＨｚ时 钟，
Ｃ＝μＦ，Ｒ＝Ω，Ｒ＝ｋΩ。在实际的应用系统中，有些外围芯片也需复位，如果
复位电平与单片机的复位要求一致，则可与之相连。
．指令寄存器和指令译码器
指令寄存器中存放指令代码。ＣＰＵ 执行指令时，由程序存储器中读取的指令代码送入
指令存储器，经译码器译码后由定时与控制电路发出相应的控制信号，完成指令所指定的
操作。
．程序计数器ＰＣ（ＰｒｏｇｒａｍＣｏｕｎｔｅｒ）
ＰＣ用于存放 ＣＰＵ 下一条要执行的指令地址，是一个 位的专用寄存器，可寻址范
围是Ｈ～ＦＦＦＦＨ 共 ＫＢ。程序中的每条指令存放在 ＲＯＭ 区的某一单元，并都有
自己的存放地址。ＣＰＵ 要执行哪条指令时，就把该条指令所在的单元的地址送上地址总
线。在顺序执行程序中，当 ＰＣ的内容被送到地址总线后，会自动加 ，即 ＰＣ← （ＰＣ）＋，
又指向 ＣＰＵ 下一条要执行的指令地址。
．堆栈指针ＳＰ（ＳｔａｃｋＰｏｉｎｔｅｒ）
堆栈操作是在内存 ＲＡＭ 区专门开辟出来的按照“先进后出”原则进行数据存取的一种
工作方式，主要用于子程序调用及返回和中断处理断点的保护及返回，它在完成子程序嵌
套和多重中断处理中是必不可少的。为保证逐级正确返回，进入栈区的“断点”数据应遵循
“先进后出”的原则。ＳＰ用来指示堆栈所处的位置，在进行操作之前，先用指令给ＳＰ赋值，
以规定栈区在 ＲＡＭ 区的起始地址（栈底层）。当数据推入栈区后，ＳＰ 的值也自动随之变
化。ＭＣＳ 系统复位后，ＳＰ初始化为Ｈ。
．数据指针寄存器 ＤＰＴＲ
数据指针 ＤＰＴＲ是一个位的专用寄存器，其高位字节寄存器用 ＤＰＨ 表示，低位字
节寄存器用 ＤＰＬ表示。既可作为一个 位寄存器 ＤＰＴＲ来处理，也可作为两个独立的
位寄存器 ＤＰＨ 和 ＤＰＬ来处理。
ＤＰＴＲ 主要用来存放 位地址，当对 ＫＢ外部数据存储器空间寻址时，作为间址
寄存器用。在访问程序存储器时，用作基址寄存器。
． 存储器的结构
单片机的存储器有程序存储器 ＲＯＭ 和数据存储器 ＲＡＭ 之分。ＲＯＭ 用来存放指令
的机器码（目标程序）、表格、常数等；ＲＡＭ 则用来存放运算的中间结果、采集的数据和经
常需要更换的代码等。ＭＣＳ 单片机的ＲＯＭ、ＲＡＭ 都有片内和片外之分；从寻址空间
来看有程序存储器、内部数据存储器、外部数据存储器三大部分；从功能上来看有：程序
存储器、内部数据存储器、特殊功能寄存器（ＳＦＲ）、位地址空间和外部数据存储器等 个
部分。ＭＣＳ 单片机的存储器结构如图 ． 所示。
　　单片机原理及接口技术　　
图 ． ＭＣＳ 单片机的存储器结构
（ａ）程序存储器；（ｂ）内部数据存储器；（ｃ）外部数据存储器
．程序存储器
对于 来说，程序存储器（ＲＯＭ）的内部地址为 Ｈ～ＦＦＦＨ，共 ＫＢ；外部
地址为 Ｈ～ＦＦＦＦＨ，共ＫＢ，如图．（ａ）所示。当程序计数器由内部ＦＦＦＨ 执行
到外部Ｈ 时，会自动跳转。对于来说，内部有ＫＢ的 ＥＰＲＯＭ，将它作为内部
程序存储器； 内部无程序存储器，必须外接程序存储器。
最多可外扩 ＫＢ程序存储器，其中 个单元地址具有特殊用途，是保留给系
统使用的。Ｈ 是系统的启 动 地 址，一般在该单元中存放一条绝对跳转指令。Ｈ、
ＢＨ、Ｈ、ＢＨ 和 Ｈ 对应 种中断源的中断服务入口地址。
．内部数据存储器
ＭＣＳ 单片机片内ＲＡＭ 的配置如图．（ｂ）所示。片内ＲＡＭ 为字节，地址范
围为Ｈ～ＦＦＨ，分为两大部分：低 字节（Ｈ～ＦＨ）为真正的 ＲＡＭ 区；高 字
节（Ｈ～ＦＦＨ）为特殊功能寄存器区ＳＦＲ。
在低 字节 ＲＡＭ 中，Ｈ～ＦＨ 共 单元是 个通用工作寄存器区。每一个区
有 个通用寄存器 Ｒ～Ｒ。寄存器和 ＲＡＭ 地址对应关系如表 ．。
表 ． 寄存器与 ＲＡＭ 地址对照表
寄存器
地　　　址
区 区 区 区
Ｒ Ｈ Ｈ Ｈ Ｈ
Ｒ Ｈ Ｈ Ｈ Ｈ
Ｒ Ｈ ＡＨ Ｈ ＡＨ
Ｒ Ｈ ＢＨ Ｈ ＢＨ
Ｒ Ｈ ＣＨ Ｈ ＣＨ
Ｒ Ｈ ＤＨ Ｈ ＤＨ
Ｒ Ｈ ＥＨ Ｈ ＥＨ
Ｒ Ｈ ＦＨ Ｈ ＦＨ
　　第 章 单片机的硬件结构和原理　　
　　片内 ＲＡＭ 的 Ｈ～ＦＨ 为位寻址区域（见表 ．），这 个单元的每一位都有一个
位地址，位地址范围为 Ｈ～ＦＨ。位寻址区的每一位都可视作软件触发器，由程序直接
进行位处理。
表 ． ＲＡＭ 中的位寻址区地址表
ＲＡＭ 地址 Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
Ｈ
Ｈ Ｆ Ｅ Ｄ Ｃ Ｂ Ａ
Ｈ
Ｈ Ｆ Ｅ Ｄ Ｃ Ｂ Ａ
Ｈ
Ｈ Ｆ Ｅ Ｄ Ｃ Ｂ Ａ
Ｈ
Ｈ Ｆ Ｅ Ｄ Ｃ Ｂ Ａ
Ｈ
Ｈ Ｆ Ｅ Ｄ Ｃ Ｂ Ａ
ＡＨ
ＢＨ Ｆ Ｅ Ｄ Ｃ Ｂ Ａ
ＣＨ
ＤＨ Ｆ Ｅ Ｄ Ｃ Ｂ Ａ
ＥＨ
ＦＨ Ｆ Ｅ Ｄ Ｃ Ｂ Ａ
　　片内 ＲＡＭ 的 Ｈ～ＦＨ 为数据缓冲区，一般可用来开辟堆栈区。
特殊功能寄存器的 ＳＦＲ地址范围为～ＦＦＨ。ＭＣＳ 系列有个ＳＦＲ，占个
字节；ＭＣＳ 子系列有 个 ＳＦＲ，占 个字节，详见表 ．。
表 ． ＳＦＲ特殊功能寄存器地址表
专用寄存器名称 符号 地址
位地址与位名称
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
Ｐ口 Ｐ Ｈ
堆栈指针 ＳＰ Ｈ
数据指针低字节
数据指针高字节
ＤＰＬ
ＤＰＴＲ
ＤＰＨ
Ｈ
Ｈ
定时器／计数器控制 ＴＣＯＮ Ｈ ＴＦ
Ｆ
ＴＲ
Ｅ
ＴＦ
Ｄ
ＴＲ
Ｃ
ＩＥ
Ｂ
ＩＴ
Ａ
ＩＥ
ＩＴ
定时器／计数器方式控制 ＴＭＯＤ Ｈ ＧＡＴＥ Ｃ／珚Ｔ Ｍ Ｍ ＧＡＴＥ Ｃ／珚Ｔ Ｍ Ｍ
定时器／计数器低字节 ＴＬ ＡＨ
定时器／计数器低字节 ＴＬ ＢＨ
　　单片机原理及接口技术　　
续表
专用寄存器名称 符号 地址
位地址与位名称
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
定时器／计数器 高字节 ＴＨ ＣＨ
定时器／计数器 高字节 ＴＨ ＤＨ
Ｐ口 Ｐ Ｈ
电源控制 ＰＣＯＮ Ｈ ＳＭＯＤ － － － ＧＦ ＧＦ ＰＤ ＩＤＬ
串行控制 ＳＣＯＮ Ｈ
ＳＭＯ
Ｆ
ＳＭ
Ｅ
ＳＭ
Ｄ
ＲＥＮ
Ｃ
ＴＢ
Ｂ
ＲＢ
Ａ
ＴＩ
ＲＩ
串行数据缓冲器 ＳＢＵＦ Ｈ
Ｐ 口 Ｐ ＡＨ Ａ Ａ Ａ Ａ Ａ Ａ Ａ Ａ
中断允许控制 ＩＥ ＡＨ
ＥＡ
ＡＦ
－
－
ＥＴ
ＡＤ
ＥＳ
ＡＣ
ＥＴ
ＡＢ
ＥＸ
ＡＡ
ＥＴ
Ａ
ＥＸ
Ａ
Ｐ 口 Ｐ ＢＨ Ｂ Ｂ Ｂ Ｂ Ｂ Ｂ Ｂ Ｂ
中断优先级控制 ＩＰ ＢＨ －
－
－
－
ＰＴ
ＢＤ
ＰＳ
ＢＣ
ＰＴ
ＢＢ
ＰＸ
ＢＡ
ＰＴ
Ｂ
ＰＸ
Ｂ
定时器／计数器控制 ＴＣＯＮ ＣＨ
ＴＥ
ＣＦ
ＥＸＦ
ＣＥ
ＲＣＬＫ
ＣＤ
ＴＣＬＫ
ＣＣ
ＥＸＥＮ
ＣＢ
ＴＲ
ＣＡ
Ｃ／Ｔ
Ｃ
ＣＰ／
ＰＬ
Ｃ
定时器／计数 器 自 动 重
装载低字节
ＲＬＤＬ ＣＡＨ
定时器／计数 器 自 动 重
装载高字节
ＲＬＤＨ ＣＢＨ
定时器／计数器 低字节 ＴＬ ＣＣＨ
定时器／计数器 高字节 ＴＨ ＣＤＨ
程序状态字 ＰＳＷ ＤＨ
Ｃｙ
Ｄ
ＡＣ
Ｄ
Ｆ
Ｄ
ＲＳ
Ｄ
ＲＳ
Ｄ
ＯＶ
Ｄ
－
Ｄ
Ｐ
Ｄ
累加器 Ａ ＥＨ Ｅ Ｅ Ｅ Ｅ Ｅ Ｅ Ｅ Ｅ
Ｂ寄存器 Ｂ ＦＨ Ｆ Ｆ Ｆ Ｆ Ｆ Ｆ Ｆ Ｆ
注：表中带的寄存器与定时器／计数器 有关，只在 ＭＣＳ 子系列芯片中存在。ＲＬＤＨ、ＲＬＤＬ也
可写作 ＲＣＡＰＨ、ＲＣＡＰＬ，分别称为定时器／计数器 捕捉高字节、低字节寄存器。
．外部数据存储器
外部数据存储器一般由静态 ＲＡＭ 构成，其容量大小由用户根据需要而定，最大可扩展
到ＫＢＲＡＭ，地址是Ｈ～ＦＦＦＦＨ，如图．（ｃ）所示。ＣＰＵ 通过 ＭＯＶＸ指令访问外
部数据存储器，用间接寻址方式，Ｒ、Ｒ和 ＤＰＴＲ都可作间接寄存器。注意，外部 ＲＡＭ 和
扩展的Ｉ／Ｏ接口是统一编址的，所有的外扩Ｉ／Ｏ 口都要占用ＫＢ中的地址单元。
　　第 章 单片机的硬件结构和原理　　
． 并行输入／输出接口
ＭＣＳ 单片机有 个 位双向Ｉ／Ｏ 接口 Ｐ～Ｐ，共 根输入／输出线，每一条
Ｉ／Ｏ 口线都能独立使用。每个端口包含一个 位数据锁存器和一个输入缓冲器。输出时，
数据可以锁存；输入时，数据可以缓冲。作为一般Ｉ／Ｏ 使用时，在指令控制下，可以有三种
基本操作方式：输入、输出和读－修改－写。
．Ｐ口
Ｐ～Ｐ 的内部结构大同小异，基本上由数据锁存器、输入缓冲器和输出驱动电路等
组成，其中 Ｐ 口最有代表性。下面以 Ｐ 口的一位结构来说明它的工作原理。
图．是Ｐ口某位结构图。它由一个输出数据锁存器、两个三态输入缓冲器、输出驱
动电路和输出控制电路组成，使用功能有两种。
图 ． Ｐ 口内部一位结构图
（）通用接口功能。当 ＣＰＵ 使控制端 Ｃ＝ 时，转换开关 ＭＵＸ 下合，使输出驱动器
Ｔ与锁存器 珡Ｑ 端接通，这时 Ｐ 作为一般Ｉ／Ｏ 口使用。Ｃ＝ 使与门输出为 ，使 Ｔ 截
止，因此使输出驱动级工作在漏极开路的工作方式。
Ｐ 作为输出口时，锁存器 ＣＰ端加一写入脉冲，与内部总线相连的 Ｄ端数据取反后出
现在 珡Ｑ 端，又经 Ｔ 反相，在 Ｐ 引脚上出现的数据正好是内部总线上的数据。
Ｐ 口用做输入时：三态缓冲门 Ｚ打开，端口引脚上的数据读到内部总线。在端口进行
读入引脚状态前，先向端口锁存器写入一个“”，使 珡Ｑ ＝，此时 Ｔ和 Ｔ完全截止，端口
引脚处于高阻状态。可见，Ｐ 作为通用接口时是一准双向口。
（）地址／数据分时复用功能。ＭＣＳ 单片机设有专门的地址、数据线，这个功能由
Ｐ、Ｐ口承担。当 Ｐ口作为地址／数据分时复用总线时，有两种情况：一种是从 Ｐ口输
出地址或数据；另一种是从 Ｐ口输入数据。
在访问片外存储器时，控制端 Ｃ＝，转换开关 ＭＵＸ 上合，接通反向器输出端（锁存
器 珡Ｑ 端断开）。这时地址／数据信号经反向器和与门，作用于 Ｔ、Ｔ场效应管，使输出引
脚和地址／数据信号相同。
　　单片机原理及接口技术　　
当从 Ｐ 口输入数据时，执行一条取指操作或输入数据的指令，读引脚脉冲打开三态
缓冲门Ｚ使引脚上数据送至内部总线。
．Ｐ、Ｐ和Ｐ口
Ｐ、Ｐ 和 Ｐ 口为准双向口，在内部差别不大，但使用功能有所不同。
Ｐ口是用户专用 位准双向Ｉ／Ｏ 口，具有通用输入／输出功能，每一位都能独立地设
定为输入或输出。当由输出方式变为输入方式时，该位的锁存器必须写入“”，然后才能进
入输入操作。
Ｐ口是 位准双向Ｉ／Ｏ 口。外接Ｉ／Ｏ 设备时，可作为扩展系统的地址总线，输出高
位地址，与 Ｐ 口一起组成 位地址总线。对于 而言，Ｐ 口一般只作为地址总线使
用，而不作为Ｉ／Ｏ 线直接与外部设备相连。
Ｐ口为双功能口。当Ｐ作为通用Ｉ／Ｏ 口使用时，是准双向口，作为第二功能使用时，
每一位功能定义如表 ． 所示。
表 ． Ｐ口的第二功能
Ｐ 口引脚线号 第二功能标记 第二功能注释
Ｐ． ＲＸＤ 串行口数据接收输入端
Ｐ． ＴＸＤ 串行口数据发送输出端
Ｐ． ＩＮＴ 外部中断 请求输入端
Ｐ． ＩＮＴ 外部中断 请求输入端
Ｐ． Ｔ 定时／计数器 外部输入端
Ｐ． Ｔ 定时／计数器 外部输入端
Ｐ． ＷＲ 片外数据存储器写选通端
Ｐ． ＲＤ 片外数据存储器读选通端
　　Ｐ的输出级具有驱动个 ＬＳＴＴＬ负载的能力，即输出电流不小于μＡ；Ｐ、Ｐ、
Ｐ口的输出缓冲器可驱动个 ＬＳＴＴＬ 门电路，并且不需外加上拉电阻就能驱动 ＣＭＯＳ
电路。
． 单片机的引脚及其功能
ＭＣＳ 系列单片机中 ＨＭＯＳ工艺制造的芯片采用双列直插（ＤＩＰ）方式封装，有
个引脚，其引脚及功能分类如图 ． 所示。ＣＭＯＳ工艺制造的低功耗芯片也有采用方型封
装的，但为 个引脚，其中 个引脚是不用的。
ＭＣＳ 单片机 条引脚说明如下：
（）电源引脚。ＶＣＣ正常运行和编程校验（／）时为 Ｖ 电源，ＶＳＳ为接地端。
（）Ｉ／Ｏ 总 线。Ｐ．～Ｐ．（Ｐ 口），Ｐ．～Ｐ．（Ｐ 口），Ｐ．～Ｐ． （Ｐ 口）、
Ｐ．～Ｐ．（Ｐ口）为输入／输出引线，参见 ． 节介绍。
（）时钟。
ＸＴＡＬ：片内振荡器反相放大器的输入端。
ＸＴＡＬ：片内振荡器反相器的输出端，也是内部时钟发生器的输入端。
　　第 章 单片机的硬件结构和原理　　
图 ． ＭＣＳ 单片机引脚及总线结构
（ａ）管脚图；（ｂ） 引脚功能分类
（）控制总线。
ＡＬＥ／ＰＲＯＧ：地址锁存允许／编程信号线。当 ＣＰＵ 访问外 部 存 储 器 时，ＡＬＥ 用 来 锁
存Ｐ 输出的地址信号的低 位。它的频率为振荡器频率的 ／。在对 编程时，此引
脚输入编程脉冲信号。
ＰＳＥＮ：外接程序存储器读选通信号。
ＥＡ／ＶＰＰ：访问内部程序存储器的控制信号。当 ＥＡ＝时，ＣＰＵ 从片内 ＲＯＭ 读取指
令；ＥＡ＝时，ＣＰＵ 从片外 ＲＯＭ 读取指令。此外，当对内部ＥＰＲＯＭ 编程时，Ｖ
编程电源由此端输入。
ＲＳＴ／ＶＰＤ：复位输入信号。当该引脚上出现个机器周期以上的高电平时，可实现复
位操作。此引脚为掉电保护后备电源之输入引脚。
． 单片机工作的基本时序
时序就是 ＣＰＵ 总线信号在时间上的顺序关系。ＣＰＵ 的控制器实质上是一个复杂的同
步时序电路，所有工作都是在时钟信号控制下进行的。每执行一条指令，ＣＰＵ 的控制器都
要发出一系列特定的控制信号，这些控制信号在时间上的相互关系就是 ＣＰＵ 的时序。
ＣＰＵ 发出的时序控制信号有两大类。一类是用于单片机内部协调控制的，但对用户来
说，并不直接接触这些信号，可不必了解太多。另一类时序信号是通过单片机控制总线送
到片外，形成对片外的各种Ｉ／Ｏ 接口、ＲＡＭ 和 ＥＰＲＯＭ 等芯片工作的协调控制，对于这
部分时序信号用户应该关心。
　　单片机原理及接口技术　　
．机器周期和指令周期
下面先介绍几个时序概念：
（）振荡周期：也称时钟周期，是指为单片机提供时钟脉冲信号的振荡源的周期。
（）状态周期：每个状态周期为时钟周期的 倍，是振荡周期经二分频后得到的。
（）机器周期：一个机器周期包含 个状态周期 Ｓ～Ｓ，也就是 个时钟周期。在
一个机器周期内，ＣＰＵ 可以完成一个独立的操作。
（）指令周期：它是指ＣＰＵ 完成一条操作所需的全部时间。每条指令执行时间都是由一
个或几个机器周期组成的。ＭＣＳ 系统中，有单周期指令、双周期指令和四周期指令。
图 ． ＭＣＳ 单片机取指／执行时序
．ＭＣＳ 指令的取指／执行时序
ＭＣＳ 单片机取指／执行时序如图．所示，每条指令的执行都包括取指和执行两
个阶段。在取指阶段，ＣＰＵ 从内部或外部 ＲＯＭ 中取出指令操作码及操作数，然后再执行
这条指令。通常，在每个机器周期内 ＡＬＥ信号出现两次，时刻为ＳＰ和ＳＰ，信号的有
　　第 章 单片机的硬件结构和原理　　
效宽度为一个Ｓ状态。每出现一次 ＡＬＥ信号，ＣＰＵ 就依次进行取指操作，但并不是每条
指令在 ＡＬＥ生效时都能有效地读取指令。如果是单个指令，在 Ｓ 期间仍有读操作，但读
出 的字节被丢弃，且读后的ＰＣ值不加。如果是双周期指令，则在ＳＰ期间读第二字节，
在ＳＰ 时结束指令。
图 ．（ａ）、（ｂ）分别为单字节单周期指令和双字节单周期指令的时序。
图 ．（ｃ）为单字节双周期指令的时序，它在两个机器周期内发生次读操作，后次
读操作是无效的。
图 ．（ｄ）为指令 ＭＯＶＸ 操作时序，它是一条单字节双周期 指 令。第 一 机 器 周 期 Ｓ
开始时，送出外部数据存储器的地址，随后读或写数据。读写期间在 ＡＬＥ 端不输出有效信
号，在第二机器周期，即外部数据存储器已被寻址和选通后，也不产生取指操作。
当 ＣＰＵ 对外部数据存储器 ＲＡＭ 读写时，ＡＬＥ不是周期信号。
．访问外部 ＲＯＭ 和 ＲＡＭ 的时序
如果指令是从外部 ＲＯＭ 中 读 取，除 了 ＡＬＥ 信 号 之 外，控 制 信 号 还 有ＰＳＥＮ。此 外，
还要用到 Ｐ 和 Ｐ 口，Ｐ 口分时用做低 位地址和数据总线，Ｐ 口用做高 位地址总
线。相应的时序图如图 ． 所示。
图 ． 读外部程序 ＲＯＭ 时序
其过程如下：
（）在ＳＰ 时 ＡＬＥ信号有效；
（）在 Ｐ 口送出 ＲＯＭ 地址低 位，在 Ｐ 口送出 ＲＯＭ 地址高位。低 位地址信
号只持续到Ｓ 结束，故在外部要用锁存器加以锁存，ＡＬＥ为地址锁存信号。高 位地址
在整个读指令过程中都有效，不必再接锁存器，到ＳＰ 前 ＡＬＥ失效。
（）在ＳＰ 时刻 ＰＳＥＮ开始有效，用它来选通外部 ＲＯＭ 的使用端，所选中 ＲＯＭ 单
元的内容，从 Ｐ 口读入到 ＣＰＵ，随后 ＰＳＥＮ 信号失效。
（）在ＳＰ 后开始第二次读入，过程和第一次相同。
　　单片机原理及接口技术　　
访问外部数据 ＲＡＭ 时，使用的控制信号有 ＡＬＥ和ＲＤ（读）或ＷＲ（写），Ｐ和Ｐ口仍
然要用，作为传送 ＲＡＭ 地址线和读写数据线。读外部数据 ＲＡＭ 的时序如图 ． 所示，
其过程如下：
（）第一次 ＡＬＥ有效到第二次 ＡＬＥ出现前的过程和读外部 ＲＯＭ 相同。
（）第二次 ＡＬＥ有效后，Ｐ 口、Ｐ 口分别送出 ＲＡＭ 单元的低 位和高 位地址。
（）在第二个机器周期第一个 ＡＬＥ不再出现，此时ＰＳＥＮ为高电平，第二个机器周期
的ＳＰ 时ＲＤ开始有效，选通 ＲＡＭ 芯片，从 Ｐ 口读出 ＲＡＭ 单元数据。
（）第二个机器周期 的 第 二 个 ＡＬＥ 出 现 时，也 对 外 部 ＲＯＭ 进 行 读 操 作，但 为 无 效
操作。
图 ． 读外部数据 ＲＡＭ 时序
若对外部 ＲＡＭ 进行写操作，则用ＷＲ信号来选通 ＲＡＭ，其余过程与读操作相似，写
外部数据 ＲＡＭ 的时序如图 ． 所示。
图 ． 写外部数据 ＲＡＭ 的时序
　　第 章 单片机的硬件结构和原理　　
习 题 与 思 考 题
．Ｃ、Ｃ、Ｃ和Ｃ单片机的主要区别在哪里？
．ＭＣＳ 单片机引脚有多少Ｉ／Ｏ 线？它们和单片机对外的地址总线和数据总线有
何关系？
．简述 片内 ＲＡＭ 区地址空间的分配特点。
．ＭＣＳ 单片机由哪几部分组成。
．ＭＣＳ 单片机的ＥＡ、ＡＬＥ、ＰＥＳＮ信号各自的功能是什么？
．ＭＣＳ 单片机如何实现工作寄存器组 Ｒ～Ｒ 的选择？
．什么是时钟周期、机器周期、指令周期？当单片机时钟频率为 ＭＨｚ时，一个机
器周期是多少？ＡＬＥ引脚的输出频率是多少？
　　单片机原理及接口技术　　
第章
　　　　ＭＣＳ 单片机指令系统
　　计算机的指令系统是表征计算机性能的重要指标，每种类型计算机都有自己的指令系
统。ＭＣＳ 单片机的指令系统是一个具有种代码的集合，绝大多数指令包含两个基
本部分：操作码和操作数。操作码表明指令要执行的操作性质；操作数说明参与操作的数
据或数据所存放的地址。
ＭＣＳ 指令系统中所有指令若以机器语言形式表示，可分为单字节、双字节、三字
节 种格式。
．单字节指令
单字节指令格式由位二进制编码表示，例如：
　　ＣＬＲ Ａ→ＥＨ
．双字节指令
双字节指令格式由两个字节组成，操作码和操作数，例如：
　　ＭＯＶ Ａ，＃Ｈ→ＨＨ
．三字节指令
三字节指令格式中，第一个字节为操作码，后两个字节为操作数，例如：
　　ＭＯＶ Ｈ，＃Ｈ→ＨＨＨ
用二进制编码表示的机器语言指令由于阅读困难，写起来费力，且难以记忆，因此在
微机控制系统中采用汇编语言指令来编写程序。本章介绍 ＭＣＳ 指令系统就是以汇编
语言形式来描述的。
一条汇编语言指令中最多包含 个区段，如下所示：
　　［标号：］ 操作码 ［操作数］ ［；注释］
个区段之间要用分隔符分开：标号与操作码之间用“：”隔开，操作码与操作数之间
用空格隔开，操作数与注释之间用“；”隔开，如果操作数有两个以上，则在操作数之间要用
“，”隔开（乘法指令和除法指令除外）。
标号是由用户定义的符号组成，必须用英文大写字母开始。标号可有可无，若一条指
令中有标号，标号代表该指令所存放的第一个字节存储单元的地址，故标号又称为符号地
　　第 章 ＭＣＳ 单片机指令系统　　
址，在汇编时，把该地址赋值给标号。
操作码是指令的功能部分，不能缺省。ＭＣＳ 指令系统中共有种助记符，代表
了 种不同的功能。例如 ＭＯＶ 是数据传送的助记符。
操作数是指令要操作的数据信息。根据指令的不同功能，操作数的个数有 、、 或
没有操作数。例如 ＭＯＶＡ，＃Ｈ，包含了两个操作数 Ａ 和＃Ｈ，它们之间用“，”隔开。
注释可有可无，加入注释主要为了便于阅读，程序设计者对指令或程序段作简要的功
能说明，在阅读程序及调试程序时将会带来很多方便。
． 寻 址 方 式
所谓寻址方式，就是寻找操作数地址的方式，在用汇编语言编程时，数据的存放、传
送、运算都要通过指令来完成。编程者必须自始至终都要十分清楚操作数的位置，以及如
何将它们传送到适当的寄存器去参与运算。每一种计算机都具有多种寻址方式。寻址方式
的多少是反映指令系统优劣的主要指标之一。寻址方式是汇编语言程序设计最基本的内容
之一，必须要十分熟悉。
在 ＭＣＳ 单片机指令系统中，有以下 种寻址方式：
（）立即寻址；
（）直接寻址；
（）寄存器寻址；
（）寄存器间接寻址；
（）基址寄存器加变址寄存器间接寻址；
（）相对寻址；
（）位寻址。
以下逐一介绍各种寻址方式。
．立即寻址
立即寻址方式是指操作数包含在指令字节中。跟在指令操作码后面的数就是参加运算
的数，该操作数称为立即数。立即数有字节和字节两种可能，例如指令：
　　ＭＯＶ Ａ，＃ ＡＨ
　　ＭＯＶ ＤＰＴＲ，＃ ＤＦＦＦＨ
上述两条指令均为立 即 寻 址 方 式，第一条指令的功能是将立即数 ＡＨ 送 累 加 器 Ａ
中，第二条指令的功能是将立即数 ＤＦＦＦＨ 送数据指针 ＤＰＴＲ 中（ＤＦＨ→ＤＰＨ，ＦＦＨ
→ＤＰＬ）。
．直接寻址
在指令中直接给出 操 作 数 的 地 址，这种寻址方式就属于直接寻址方式。在 这 种 方 式
中，指令的操作数部分直接是操作数的地址。
在 ＭＣＳ 单片机指令系统中，直接寻址方式中可以访问两种存储器空间：
（）内部数据存储器的低 个字节单元（Ｈ～ＦＨ）。
　　单片机原理及接口技术　　
（）特殊功能寄存器。特殊功能寄存器只能用直接寻址方式进行访问。例如：
　　ＭＯＶ Ａ，ＡＨ
．寄存器寻址
在该寻址方式中，参加操作的数存放在寄存器里。寄存器包括个工作寄存器 Ｒ～Ｒ、
累加器 Ａ、寄存器 Ｂ、数据指针 ＤＰＴＲ和布尔处理器的位累加器 Ｃ。例如：
　　ＩＮＣＲ
．寄存器间接寻址
在这种寻址方式中，寄存器的内容为操作数的地址。寄存器间接寻址只能使用寄存器
Ｒ、Ｒ 作为地址指针，寻址内部 ＲＡＭ 区的数据；当访问外部 ＲＡＭ 时，可使用 Ｒ、Ｒ
及 ＤＰＴＲ作为地址指针。寄存器间接寻址符号为“＠”，例如：
　　ＭＯＶ Ａ，＠Ｒ
．基址寄存器加变址寄存器间接寻址
这种寻址方式用于访问程序存储器中的数据表格，它以基址寄存器 ＤＰＴＲ 或 ＰＣ的内
容为基本地址，加上变址寄存器 Ａ 的内容作为操作数的地址，例如：
　　ＭＯＶＣ Ａ，＠Ａ＋ＤＰＴＲ
　　ＪＭＰ ＠Ａ＋ＤＰＴＲ
　　ＭＯＶＣ Ａ，＠Ａ＋ＰＣ
．相对寻址
在 ＭＣＳ 指令系统中设有转移指令，分为直接转移和相对转移指令，在相对转移
指令中采用相对寻址方式。这种寻址方式是以 ＰＣ 的内容为基本地址，加上指令中给定的
偏移量作为转移地址。指令中给出的偏移量是一个 位带符号的常数，可正可负，其范围
为－～＋。例如：
　　ＪＣＨ
．位寻址
该种寻址方式中，操作数是内部 ＲＡＭ 单元中某一位的信息。例如：
　　ＣＬＲＣ
　　ＭＯＶＣ，Ｈ
　　第 章 ＭＣＳ 单片机指令系统　　
． 指 令 系 统
．． 指令分类
ＭＣＳ 单片机指令系统有种助记符，代表了种功能，有的功能（如数据传送）
可以有几种助记符（如 ＭＯＶ、ＭＯＶＣ、ＭＯＶＸ）。指令功能助记符与各种可能的寻址方式
相结合，共构成 条指令。在这些指令中，单字节指令有 条，双字节指令有 条，
三字节指令有 条；从指令执行的时间看，单机器周期指令有条，双机器周期指令有
条，只有乘法、除法两条指令的执行时间是 个机器周期。
按指令的功能，ＭＣＳ 指令系统可分为下列 类：
（）数据传送；
（）算术运算；
（）逻辑运算；
（）位操作；
（）控制转移。
在分类介绍指令之前，先把描述指令的一些符号的意义作一简单介绍。
Ｒｎ———当前选定的寄存器区中的 个工作寄存器 Ｒ～Ｒ，即 ｎ＝～。
Ｒｉ———当前选定的寄存器区中的 个寄存器 Ｒ、Ｒ，ｉ＝，。
ｄｉｒｅｃｔ——— 位内部 ＲＡＭ 单元的地址，它可以是一个内部数据区 ＲＡＭ 单元（Ｈ～
ＦＨ）或特殊功能寄存器地址（Ｉ／Ｏ 端口、控制寄存器、状态寄存器 Ｈ～ＦＦＨ）。
＃ｄａｔａ———指令中的 位常数。
＃ｄａｔａ———指令中的 位常数。
ａｄｄｒ——— 位的目的地址，用于ＬＪＭＰ、ＬＣＡＬＬ指令，可指向ＫＢ程序存储器地
址空间。
ａｄｄｒ———位的目的地址，用于 ＡＪＭＰ，ＡＣＡＬＬ指令。目的地址必须与下一条指令
的第一个字节在同一个 ＫＢ程序存储器地址空间之内。
ｒｅｌ——— 位带符号的偏移量字节，用于ＳＪＭＰ和所有条件转移指令中。偏移量相对于
下一条指令的第一个字节计算，在－～＋ 范围内取值。
ｂｉｔ———内部数据 ＲＡＭ 或特殊功能寄存器中的可直接寻址位。
ＤＰＴＲ———数据指针，可用作 位的地址寄存器。
Ａ———累加器。
Ｂ———寄存器，用于 ＭＵＬ和 ＤＩＶ 指令中。
Ｃ———进位标志或进位位。
＠———间接寻址寄存器或基址寄存器的前缀，如＠Ｒｉ，＠ＤＰＴＲ。
／———位操作数的前缀，表示对该位取反。
（Ｘ）——— Ｘ中的内容。
（（Ｘ））———由 Ｘ寻址的单元中的内容。
←———箭头左边的内容被箭头右边的内容所代替。
　　单片机原理及接口技术　　
．． 数据传送类指令
数据传送类指令一般的操作是，把源操作数传送到指令所指定的目标地址。指令执行
后，源操作数保持不变，目的操作数为源操作数所代替。数据传送指令的源操作数和目的
操作数的寻址方式及传送路径如图 ． 所示。指令见表 ．。
数据传送指令共有 条，用到的助记符有：ＭＯＶ，ＭＯＶＸ，ＭＯＶＣ，ＸＣＨ，ＸＣＨＤ，
ＰＵＳＨ，ＰＯＰ，ＳＷＡＰ。源操作数可以采用立即、直接、寄存器、寄存器间接、基址加变址
种寻址方式；目的操作数可以采用寄存器、寄存器间接、直接种寻址方式。数据传送指
令最为丰富，也是编程时使用最频繁的一类指令，它可以把数据方便地传送到片内的数据
存储器单元和Ｉ／Ｏ 口。
数据传送指令一般不影响标志，只有一种堆栈操作可以直接修改程序状态字ＰＳＷ，这
样，可能使某些标志位发生变化。
数据传送指令比较简单，由图 ． 和表 ． 很容易理解各种指令的功能，故不作详细
叙述，下面仅作一些必要的说明。
图 ． ＭＣＳ 传送指令示意图
表 ． 数据传送类指令一览表
指 令 助 记 符 功 能 简 述 字节数 振荡周期
ＭＯＶ Ａ，Ｒｎ 寄存器内容送累加器
ＭＯＶ Ａ，ｄｉｒｅｃｔ 直接寻址字节送累加器
ＭＯＶ Ａ，＠Ｒｉ 内部 ＲＡＭ 单元内容送累加器
ＭＯＶ Ａ，＃ｄａｔａ 立即数送累加器
ＭＯＶ Ｒｎ，Ａ 累加器内容送寄存器
ＭＯＶ Ｒｎ，ｄｉｒｅｃｔ 直接寻址字节送寄存器
ＭＯＶ Ｒｎ，＃ｄａｔａ 立即数送寄存器
ＭＯＶ ｄｉｒｅｃｔ，Ａ 累加器内容送直接寻址字节单元
ＭＯＶ ｄｉｒｅｃｔ，Ｒｎ 寄存器内容送直接寻址字节
　　第 章 ＭＣＳ 单片机指令系统　　
续表
指 令 助 记 符 功 能 简 述 字节数 振荡周期
ＭＯＶ ｄｉｒｅｃｔ，ｄｉｒｅｃｔ 直接寻址字节之间传送
ＭＯＶ ｄｉｒｅｃｔ，＠Ｒｉ 内部 ＲＡＭ 单元内容送直接寻址字节单元
ＭＯＶ ｄｉｒｅｃｔ，＃ｄａｔａ 立即数送直接寻址字节单元
ＭＯＶ ＠Ｒｉ，Ａ 累加器内容送内部 ＲＡＭ 单元
ＭＯＶ ＠Ｒｉ，ｄｉｒｅｃｔ 直接寻址字节送内部 ＲＡＭ 单元
ＭＯＶ ＠Ｒｉ，＃ｄａｔａ 立即数送内部 ＲＡＭ 单元
ＭＯＶ ＤＰＴＲ，＃ｄａｔａ 位立即数送数据指针
ＭＯＶＣ Ａ，＠Ａ＋ＤＰＴＲ 程序存储器单元内容送累加器（相对数据指针）
ＭＯＶＣ Ａ，＠Ａ＋ＰＣ 程序存储器单元送累加器（相对程序计数器）
ＭＯＶＸ Ａ，＠Ｒｉ 外部 ＲＡＭ 单元内容送累加器（ 位地址）
ＭＯＶＸ Ａ，＠ＤＰＴＲ 外部 ＲＡＭ 单元内容送累加器（ 位地址）
ＭＯＶＸ ＠Ｒｉ，Ａ 累加器内容送外部 ＲＡＭ 单元（ 位地址）
ＭＯＶＸ ＠ＤＰＴＲ，Ａ 累加器内容送外部 ＲＡＭ 单元（ 位地址）
ＰＵＳＨ ｄｉｒｅｃｔ 栈顶弹至直接寻址字节
ＰＯＰｄｉｒｅｃｔ 直接寻址字节压入栈顶
ＸＣＨ Ａ，Ｒｎ 累加器内容与寄存器内容交换
ＸＣＨ Ａ，ｄｉｒｅｃｔ 累加器内容与直接寻址字节交换
ＸＣＨ Ａ，＠Ｒｉ 累加器内容与内部 ＲＡＭ 单元内容交换
ＸＣＨＤ Ａ，＠Ｒｉ 累加器低 位与内部 ＲＡＭ 单元低 位交换
ＳＷＡＰ Ａ 累加器高 位与低 位交换
．数据传送到累加器 Ａ的指令
　　ＭＯＶ Ａ，Ｒｎ　　　　　　　；Ａ←（Ｒｎ）
　　ＭＯＶ Ａ，ｄｉｒｅｃｔ ；Ａ←（ｄｉｒｅｃｔ）
　　ＭＯＶ Ａ，＠Ｒｉ ；Ａ←（（Ｒｉ））
　　ＭＯＶ Ａ，＃ｄａｔａ ；Ａ←ｄａｔａ
这组指令的功能是：把源操作数的内容送入累加器 Ａ。例如：ＭＯＶ Ａ，＃Ｈ，该指
令执行时将立即数 Ｈ 送入累加器 Ａ 中。
．数据传送到工作寄存器 Ｒｎ的指令
　　ＭＯＶ Ｒｎ，Ａ ；Ｒｎ←（Ａ）
　　ＭＯＶ Ｒｎ，ｄｉｒｅｃｔ ；Ｒｎ←（ｄｉｒｅｃｔ）
　　ＭＯＶ Ｒｎ，＃ｄａｔａ ；Ｒｎ←ｄａｔａ
这组指令的功能是：把源操作数的内容送入当前工作寄存器区的 Ｒ～Ｒ中的某一个
寄存器。指令中 Ｒｎ在内部数据存储器中的地址由当前的工作寄存器区选择位 ＲＳ、ＲＳ
确定，可以是 Ｈ～Ｈ、Ｈ～ＦＨ、Ｈ～Ｈ、Ｈ～ＦＨ。例如：ＭＯＶ Ｒ，Ａ，若
当前 ＲＳ、ＲＳ 设置为 （即工作寄存器 区），执行该指令时，将累加器 Ａ 中的数据传
送至工作寄存器 Ｒ（内部 ＲＡＭ Ｈ）单元中。
．数据传送到内部 ＲＡＭ 单元或特殊功能寄存器ＳＦＲ的指令
　　ＭＯＶ ｄｉｒｅｃｔ，Ａ ；ｄｉｒｅｃｔ←（Ａ）
　　单片机原理及接口技术　　
　　ＭＯＶ ｄｉｒｅｃｔ，Ｒｎ ；ｄｉｒｅｃｔ←（Ｒｎ）
　　ＭＯＶ ｄｉｒｅｃｔ，ｄｉｒｅｃｔ ；ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）
　　ＭＯＶ ｄｉｒｅｃｔ，＠Ｒｉ ；ｄｉｒｅｃｔ←（（Ｒｉ））
　　ＭＯＶ ｄｉｒｅｃｔ，＃ｄａｔａ ；ｄｉｒｅｃｔ←ｄａｔａ
　　ＭＯＶ ＠Ｒｉ，Ａ ；（Ｒｉ）←（Ａ）
　　ＭＯＶ ＠Ｒｉ，ｄｉｒｅｃｔ ；（Ｒｉ）←（ｄｉｒｅｃｔ）
　　ＭＯＶ ＠Ｒｉ，＃ｄａｔａ ；（Ｒｉ）←ｄａｔａ
　　ＭＯＶ ＤＰＴＲ，＃ｄａｔａ ；ＤＰＴＲ←ｄａｔａ
这组指令的功能是：把源操作数的内容送入内部 ＲＡＭ 单元或特殊功能寄存器。其中
第三条指令和最后一条指令都是三字节指令。第三条指令的功能很强，能实现内部 ＲＡＭ
之间、特殊功能寄存器之间或特殊功能寄存器与内部 ＲＡＭ 之间的直接数据传送。最后一
条指令是将位的立即数送入数据指针寄存器 ＤＰＴＲ。
．累加器 Ａ与外部数据存储器之间的传送指令
　　ＭＯＶＸ Ａ，＠ＤＰＴＲ ；Ａ←（（ＤＰＴＲ））
　　ＭＯＶＸ Ａ，＠Ｒｉ ；Ａ←（（Ｒｉ））
　　ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；（ＤＰＴＲ）←（Ａ）
　　ＭＯＶＸ ＠Ｒｉ，Ａ ；（Ｒｉ）←（Ａ）
这组指令是：在累加器 Ａ 与外部数据存储器 ＲＡＭ 单元或Ｉ／Ｏ 口之间进行数据传送，
前两条指令执行时，Ｐ． 引脚上输出ＲＤ有效信号，用作外部数据存储器的读选通信号；
后两条指令执行时，Ｐ． 引脚上输出 ＷＲ有效信号，用作外部数据存储器的写选通信号。
ＤＰＴＲ 所包含的位地址信息由 Ｐ（低位）和Ｐ（高位）输出，而数据信息由Ｐ口传
送，Ｐ 口作分时复用的总线。由 Ｒｉ作为间接寻址寄存器时，Ｐ口上分时输出 Ｒｉ指定的
位地址信息及传输 位数据。
．堆栈操作指令
　　ＰＵＳＨ ｄｉｒｅｃｔ ；ＳＰ←（ＳＰ）＋，（ＳＰ）←（ｄｉｒｅｃｔ）
　　ＰＯＰｄｉｒｅｃｔ ；ｄｉｒｅｃｔ←（（ＳＰ）），ＳＰ←（ＳＰ）－
在 ＭＣＳ 单片机的内部 ＲＡＭ 中，可以设定一个先进后出的区域，称其为堆栈。在
特殊功能寄存器中有一个堆栈指针ＳＰ，它指出栈顶的位置。进栈指令的功能是：首先将堆
栈指针ＳＰ的内容加，然后将直接地址所指出的内容送入 ＳＰ指出的内部 ＲＡＭ 单元；出
栈指令的功能是：将ＳＰ所指出的内部 ＲＡＭ 单元的内容送入由直接地址所指出的字节单
元，接着将堆栈指针ＳＰ的内容减 。
例如：进入中断服务子程序时，把程序状态寄存器 ＰＳＷ、累加器 Ａ、数据指针 ＤＰＴＲ
进栈保护。设当前ＳＰ为 Ｈ。则程序段
　　ＰＵＳＨ ＰＳＷ
　　ＰＵＳＨ ＡＣＣ
　　ＰＵＳＨ ＤＰＬ
　　ＰＵＳＨ ＤＰＨ
执行后，ＳＰ内容修改为 Ｈ，而Ｈ、Ｈ、Ｈ、Ｈ 单元中依次栈入 ＰＳＷ、Ａ、ＤＰＬ、
ＤＰＨ 的内容。当中断服务程序结束之前，如下程序段（ＳＰ保持 Ｈ 不变）
　　第 章 ＭＣＳ 单片机指令系统　　
　　ＰＯＰ ＤＰＨ
　　ＰＯＰ ＤＰＬ
　　ＰＯＰ ＡＣＣ
　　ＰＯＰ ＰＳＷ
执行之后，ＳＰ 内 容 修 改 为 Ｈ，而 Ｈ、Ｈ、Ｈ、Ｈ 单 元 中 的 内 容 依 次 弹 出 到
ＤＰＨ、ＤＰＬ、Ａ、ＰＳＷ 中。
ＭＣＳ 提供一个向上升的堆栈，因此ＳＰ设置初值时要充分考虑堆栈的深度，要留
出适当的单元空间，满足堆栈的使用。
．程序存储器内容送累加器
　　ＭＯＶＣ Ａ，＠Ａ＋ＰＣ ；Ａ←（（Ａ）＋（ＰＣ））
　　ＭＯＶＣ Ａ，＠Ａ＋ＤＰＴＲ ；Ａ←（（Ａ）＋（ＤＰＴＲ））
这是两条很有用的查表指令，可用来查找存放在外部程序存储器中的常数表格。第一
条指令是以 ＰＣ作为基址寄存器，Ａ 的内容作为无符号数和 ＰＣ的内容（下一条指令的起始
地址）相加后得到一个 位的地址，并将该地址指出的程序存储器单元的内容送到累加器
Ａ。这条指令的优点是不改变特殊功能寄存器和 ＰＣ 的状态，只要根据 Ａ 的内容就可以取
出表格中的常数。缺点是表格只能放在该条查表指令后面的 个单元之中，表格的大小
受到限制，而且表格只能被一段程序所利用。
第二条指令是以 ＤＰＴＲ作为基址寄存器，累加器 Ａ 的内容作为无符号数与 ＤＰＴＲ 内
容相加，得到一个 位的地址，并把该地址指出的程序存储器单元的内容送到累加器 Ａ。
这条指令的执行结果只与指针 ＤＰＴＲ及累加器 Ａ 的内容有关，与该指令存放的地址无关，
因此，表格的大小和位置可以在 ＫＢ程序存储器中任意安排，并且一个表格可以为各个
程序块所共用。
．字节交换指令
　　ＸＣＨ Ａ，Ｒｎ ；（Ａ）（Ｒｎ）
　　ＸＣＨ Ａ，＠Ｒｉ ；（Ａ）（（Ｒｉ））
　　ＸＣＨ Ａ，ｄｉｒｅｃｔ ；（Ａ）（ｄｉｒｅｃｔ）
　　ＸＣＨＤ Ａ，＠Ｒｉ ；（Ａ）～（（Ｒｉ））～
　　ＳＷＡＰ Ａ ；（Ａ）～（Ａ）～
前三条指令是将累加器 Ａ 的内容和源操作数内容相互交换；后两条指令是半字节交
换指令，最后一条指令是将累加器 Ａ 的高位与低位之间进行交换，而第四条指令是将
累加器 Ａ 的低 位内容和（Ｒｉ）所指出的内部 ＲＡＭ 单元的低 位内容相互交换。
．． 算术运算类指令
算术运算指令共有条，包括加、减、乘、除 种基本算术运算操作指令（表．）。
这 种指令能对位的无符号数进行直接的运算，借助溢出标志，可对带符号数进行的
补码运算；借助进位标志，可以实现多精度的加、减运算，同时还可对压缩的 ＢＣＤ 码进行
运算，其运算 功 能 较 强。算术运算指令用到的助记符共有 种：ＡＤＤ、ＡＤＤＣ、ＩＮＣ、
ＳＵＢＢ、ＤＥＣ、ＤＡ、ＭＵＬ、ＤＩＶ。
　　单片机原理及接口技术　　
表 ． 算术运算指令
指令助记符 功能简述 字节数 振荡器周期数
ＡＤＤ Ａ，Ｒｎ Ａ←（Ａ）＋（Ｒｎ）
ＡＤＤ Ａ，ｄｉｒｅｃｔ Ａ←（Ａ）＋（ｄｉｒｅｃｔ）
ＡＤＤ Ａ，＠Ｒｉ Ａ←（Ａ）＋（（Ｒｉ））
ＡＤＤ Ａ，＃ｄａｔａ Ａ←（Ａ）＋ｄａｔａ
ＡＤＤＣ Ａ，Ｒｎ Ａ←（Ａ）＋（Ｒｎ）＋（Ｃｙ）
ＡＤＤＣ Ａ，ｄｉｒｅｃｔ Ａ←（Ａ）＋（ｄｉｒｅｃｔ）＋（Ｃｙ）
ＡＤＤＣ Ａ，＠Ｒｉ Ａ←（Ａ）＋（（Ｒｉ））＋（Ｃｙ）
ＡＤＤＣ Ａ，＃ｄａｔａ Ａ←（Ａ）＋ｄａｔａ＋（Ｃｙ）
ＩＮＣ Ａ Ａ←（Ａ）＋
ＩＮＣ Ｒｎ Ｒｎ←（Ｒｎ）＋
ＩＮＣ ＠Ｒｉ （Ｒｉ）←（（Ｒｉ））＋
ＩＮＣｄｉｒｅｃｔ ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）＋
ＩＮＣ ＤＰＴＲ ＤＰＴＲ←（ＤＰＴＲ）＋
ＤＡ Ａ 对 Ａ 进行十进制调整
ＳＵＢＢ Ａ，Ｒｎ Ａ←（Ａ）－（Ｒｎ）－（Ｃｙ）
ＳＵＢＢ Ａ，＠Ｒｉ Ａ←（Ａ）－（（Ｒｉ））－（Ｃｙ）
ＳＵＢＢ Ａ，ｄｉｒｅｃｔ Ａ←（Ａ）－（ｄｉｒｅｃｔ）－（Ｃｙ）
ＳＵＢＢ Ａ，＃ｄａｔａ Ａ←（Ａ）－ｄａｔａ－（Ｃｙ）
ＤＥＣ Ａ Ａ←（Ａ）－
ＤＥＣ Ｒｎ Ｒｎ←（Ｒｎ）－
ＤＥＣｄｉｒｅｃｔ ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）－
ＤＥＣ ＠Ｒｉ （Ｒｉ）←（（Ｒｉ））－
ＭＵＬ ＡＢ ＡＢ←（Ａ）（Ｂ）
ＤＩＶ ＡＢ ＡＢ←（Ａ）／（Ｂ）
　　算术运算指令执行结果将影响进位 标 志 （Ｃｙ）、辅 助 进 位 标 志 （ＡＣ）、溢 出 标 志 位
（ＯＶ）。但是加 和减 指令不影响这些标志。对标志位有影响的所有指令列于表 ． 中，
其中包括了一些非算术运算的指令在内。
表 ． 影响标志位的指令
指 令 助 记 符
标　　志
　　　　Ｃｙ ＯＶ　　ＡＣ
　　　　ＡＤＤ Ａ，
＃ｄａｔａ
ｄｉｒｅｃｔ
Ｒｎ
＠
烅
烄
烆 Ｒｉ
　　　　ＡＤＤＣ Ａ，
＃ｄａｔａ
ｄｉｒｅｃｔ
Ｒｎ
＠
烅
烄
烆 Ｒｉ
×　　×　　×
×　　×　　×
　　第 章 ＭＣＳ 单片机指令系统　　
续表　　
指 令 助 记 符
标　　志
　　　　Ｃｙ ＯＶ　　ＡＣ
　　　　ＳＵＢＢ Ａ，
＃ｄａｔａ
ｄｉｒｅｃｔ
Ｒｎ
＠
烅
烄
烆 Ｒｉ
×　　×　　×
　　　　ＭＵＬ Ａ Ｂ 　　×
　　　　ＤＩＶ Ａ Ｂ 　　×
　　　　ＤＡ Ａ ×
　　　　ＲＲＣ Ａ ×
　　　　ＲＬＣ Ａ ×
　　　　ＳＥＴＢ Ｃ
　　　　ＣＬＲ Ｃ
　　　　ＣＰＬ Ｃ ×
　　　　ＡＮＬ Ｃ，ｂｉｔ ×
　　　　ＡＮＬ Ｃ，／ｂｉｔ ×
　　　　ＯＲＬ Ｃ，ｂｉｔ ×
　　　　ＯＲＬ Ｃ，／ｂｉｔ ×
　　　　ＭＯＶ Ｃ，ｂｉｔ ×
　　　　ＣＪＮＥ
ｄｉｒｅｃｔ
Ａ，＃ｄａｔａ，ｒｅｌ
＠
烅
烄
烆 Ｒｉ
×
　　　　ＣＪＮＥ Ｒｎ，＃ｄａｔａ，ｒｅｌ ×
　　　　　　注：×表示指令运行的结果使该标志位置位或复位。
一、加法指令
加法指令分为普通加法指令、带进位加法指令和加 指令。
．普通加法指令
　　ＡＤＤ Ａ，Ｒｎ ；Ａ←（Ａ）＋（Ｒｎ）
　　ＡＤＤ Ａ，ｄｉｒｅｃｔ ；Ａ←（Ａ）＋（ｄｉｒｅｃｔ）
　　ＡＤＤ Ａ，＠Ｒｉ ；Ａ←（Ａ）＋（（Ｒｉ））
　　ＡＤＤ Ａ，＃ｄａｔａ ；Ａ←（Ａ）＋ｄａｔａ
这组指令的功能是将累加器 Ａ 的内容与第二操作数相加，其结果放在累加器 Ａ 中。相
加过程中如果位 （Ｄ）有进位，则进位标志位 Ｃｙ置“”，否则清“”；如果位 （Ｄ）有进
位，则辅助进位标志 ＡＣ置“”，否则清“”；如果位 有进位而位 没有，或者位 有进
位而位 没有，则溢出标志 ＯＶ 置“”，否则清“”。
对于无符号数相加时，若 Ｃｙ置位（为“”），则说明和数溢出（大于）。对于带符号
数相加时，和数是否溢出（大于或小于－），则可通过溢出标志 ＯＶ 来判断，若 ＯＶ
置位（为“”），说明和数溢出。
例如： 和 之和为 ，显然大于 ，相加时
　　单片机原理及接口技术　　
＋ 　　
符号位（最高位）由 变 ，两个正数相加结果变负，实际上它是和数的最高位，符号位移
入了进位标志，此时位 有进位而位 无进位，置位溢出标志 ＯＶ，结果溢出。
同样，－和－ 相加，结果应为－，显然小于－，相加时
　　　　　　　　　　　　－
＋ 　　－
　　－
符号位由 变为 ，两个负数相加结果变为正数，这是因为符号位移入进位标志，位 无
进位而位 有进位，置位溢出标志 ＯＶ，由此可判断结果溢出。
．带进位加法指令
　　ＡＤＤＣ Ａ，Ｒｎ　　　；Ａ←（Ａ）＋（Ｒｎ）＋（Ｃｙ）
　　ＡＤＤＣ Ａ，ｄｉｒｅｃｔ ；Ａ←（Ａ）＋（ｄｉｒｅｃｔ）＋（Ｃｙ）
　　ＡＤＤＣ Ａ，＠Ｒｉ ；Ａ←（Ａ）＋（（Ｒｉ））＋（Ｃｙ）
　　ＡＤＤＣ Ａ，＃ｄａｔａ ；Ａ←（Ａ）＋ｄａｔａ＋（Ｃｙ）
这组指令的功能与普通加法指令类似，唯一的不同之处是，在执行加法时，还要将上
一次进位标志 Ｃｙ的内容也一起加进去，对于标志位的影响也与普通加法指令相同。
．增量指令
　　ＩＮＣ Ａ ；Ａ←（Ａ）＋
　　ＩＮＣ Ｒｎ ；Ｒｎ←（Ｒｎ）＋
　　ＩＮＣ ｄｉｒｅｃｔ ；ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）＋
　　ＩＮＣ ＠Ｒｉ ；（Ｒｉ）←（（Ｒｉ））＋
　　ＩＮＣ ＤＰＴＲ ；ＤＰＴＲ←（ＤＰＴＲ）＋
这组指令的功能是：将指令中所指出操作数的内容加。若原来的内容为ＦＦＨ，则加
后将产生溢出，使操作数的内容变成Ｈ，但不影响任何标志。最后一条指令是对位
的数据指针寄存器 ＤＰＴＲ执行加 操作，指令执行时，先对低位指针 ＤＰＬ的内容加，
当产生溢出时就对高 位指针 ＤＰＨ 加 ，但不影响任何标志。
．十进制调整指令
　　ＤＡ Ａ
这条指令对累加器 Ａ 参与的 ＢＣＤ码加法运算所获得的 位结果进行十进制调整，使
累加器 Ａ 中的内容调整为二位压缩型 ＢＣＤ 码的数。使用时必须注意，它只能跟在加法指
令之后，不能对减法指令的结果进行调整，且其结果不影响溢出标志位。
执行该指令时，判断 Ａ 中的低 位是否大于 和辅助进位标志 ＡＣ是否为“”，若两
者有一个条件满足，则低位加操作；同样，Ａ 中的高位大于或进位标志 Ｃｙ为“”
两者有一个条件满足时，高位加操作。例如：有两个 ＢＣＤ数与相加，结果应为
ＢＣＤ码 ，程序如下：
　　第 章 ＭＣＳ 单片机指令系统　　
　　ＭＯＶ Ａ，＃Ｈ
　　ＡＤＤ Ａ，＃Ｈ
　　ＤＡ Ａ
这段程序中，第一条指令将立即数Ｈ（ＢＣＤ码）送入累加器 Ａ；第二条指令进行如
下加法：
＋ 　　
　　Ｂ
＋ 　　
得结果ＢＨ；第三条指令对累加器 Ａ 进行十进制调整，低位（为ＢＨ）大于，因此要加
，得调整的 ＢＣＤ码 。
二、减法指令
．带进位减法指令
　　ＳＵＢＢ Ａ，Ｒｎ ；Ａ←（Ａ）－（Ｒｎ）－（Ｃｙ）
　　ＳＵＢＢ Ａ，ｄｉｒｅｃｔ ；Ａ←（Ａ）－（ｄｉｒｅｃｔ）－（Ｃｙ）
　　ＳＵＢＢ Ａ，＠Ｒｉ ；Ａ←（Ａ）－（（Ｒｉ））－（Ｃｙ）
　　ＳＵＢＢ Ａ，＃ｄａｔａ ；Ａ←（Ａ）－ｄａｔａ－（Ｃｙ）
这组指令的功能是：将累加器 Ａ 的内容与第二操作数及进位标志相减，结果送回到累
加器 Ａ 中。在执行减法过程中，如果位（Ｄ）有借位，则进位标志 Ｃｙ置“”，否则清“”；
如果位 （Ｄ）有借位，则辅助进位标志 ＡＣ置“”，否则清“”；如位 有借位而位 没有
借位，或位 有借位而位 没有借位，则溢出标志 ＯＶ 置“”，否则清“”。若要进行不带
借位的减法操作，则必须先将 Ｃｙ清“”。
．减指令
　　ＤＥＣ Ａ ；Ａ←（Ａ）－
　　ＤＥＣ Ｒｎ ；Ｒｎ←（Ｒｎ）－
　　ＤＥＣ ｄｉｒｅｃｔ ；ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）－
　　ＤＥＣ ＠Ｒｉ ；（Ｒｉ）←（（Ｒｉ））－
这组指令的功能是：将指出的操作数内容减 。如果原来的操作数为 Ｈ，则减 后
将产生下溢出，使操作数变成 ＦＦＨ，但不影响任何标志。
三、乘法指令
乘法指令完成单字节的乘法，只有一条指令：
　　ＭＵＬ ＡＢ ；ＢＡ←（Ａ）×（Ｂ）
这条指令的功能是：将累加器 Ａ 的内容与寄存器Ｂ的内容相乘，乘积的低位存放在
累加器 Ａ 中，高位存放于寄存器Ｂ中。如果乘积超过ＦＦＨ，则溢出标志 ＯＶ 置“”，否
则清“”。进位标志 Ｃｙ总是被清“”。
四、除法指令
除法指令完成单字节的除法，只有一条指令：
　　单片机原理及接口技术　　
　　ＤＩＶ ＡＢ ；Ａ←（Ａ）／（Ｂ）之商，Ｂ←（Ａ）／（Ｂ）之余数
这条指令的功能是：将累加器 Ａ 中的内容除以寄存器 Ｂ中的 位无符号整数，所得
商的整数部分存放在累加器 Ａ 中，余数部分存放在寄存器 Ｂ中，清“”进位标志 Ｃｙ和溢
出标志 ＯＶ。若原来 Ｂ中的内容为 ，则执行该指令后 Ａ 与 Ｂ中的内容不定，并将溢出标
志 ＯＶ 置“”，在任何情况下，进位标志 Ｃｙ总是被清“”。
．． 逻辑运算类指令
逻辑运算类指令共有条（见表．），分为简单逻辑操作指令、逻辑与指令、逻辑或
指令和 逻 辑 异 或 指 令。逻 辑 运 算 指 令 用 到 的 助 记 符 有 ＣＬＲ、ＣＰＬ、ＡＮＬ、ＯＲＬ、ＸＲＬ、
ＲＬ、ＲＬＣ、ＲＲ、ＲＲＣ。
表 ． 逻辑运算指令
指令助记符 功 能 简 述 字节数 振荡器周期数
ＣＬＲ Ａ 累加器清零
ＣＰＬ Ａ 累加器取反
ＲＬ Ａ 累加器循环左移 位
ＲＬＣ Ａ 累加器带进位标志位循环左移 位
ＲＲ Ａ 累加器循环右移 位
ＲＲＣ Ａ 累加器带进位标志位循环右移 位
ＡＮＬ Ａ，Ｒｎ Ａ←（Ａ）∧（Ｒｎ）
ＡＮＬ Ａ，ｄｉｒｅｃｔ Ａ←（Ａ）∧（ｄｉｒｅｃｔ）
ＡＮＬ Ａ，＠Ｒｉ Ａ←（Ａ）∧（Ｒｉ）
ＡＮＬ Ａ，＃ｄａｔａ Ａ←（Ａ）∧ｄａｔａ
ＡＮＬｄｉｒｅｃｔ，Ａ ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）∧（Ａ）
ＡＮＬｄｉｒｅｃｔ，＃ｄａｔａ ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）∧ｄａｔａ
ＯＲＬ Ａ，Ｒｎ Ａ←（Ａ）∨（Ｒｎ）
ＯＲＬ Ａ，ｄｉｒｅｃｔ Ａ←（Ａ）∨（ｄｉｒｅｃｔ）
ＯＲＬ Ａ，＠Ｒｉ Ａ← （Ａ）∨（（Ｒｉ））
ＯＲＬ Ａ，＃ｄａｔａ Ａ← （Ａ）∨ｄａｔａ
ＯＲＬｄｉｒｅｃｔ，Ａ ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）∨（Ａ）
ＯＲＬｄｉｒｅｃｔ，＃ｄａｔａ ｄｉｒｅｃｔ← （ｄｉｒｅｃｔ）∨ｄａｔａ
ＸＲＬ Ａ，Ｒｎ Ａ←（Ａ）（Ｒｎ）
ＸＲＬ Ａ，ｄｉｒｅｃｔ Ａ←（Ａ）（ｄｉｒｅｃｔ）
ＸＲＬ Ａ，＠Ｒｉ Ａ←（Ａ）（（Ｒｉ））
ＸＲＬ Ａ，＃ｄａｔａ Ａ←（Ａ）ｄａｔａ
ＸＲＬｄｉｒｅｃｔ，Ａ ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）（Ａ）
ＸＲＬｄｉｒｅｃｔ，＃ｄａｔａ ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）ｄａｔａ
　　第 章 ＭＣＳ 单片机指令系统　　
．简单逻辑操作指令
　　ＣＬＲ Ａ 　　　；对累加器 Ａ 清“”，Ａ←
　　ＣＰＬ Ａ ；对累加器 Ａ 按位取反，Ａ←（珡Ａ）
　　ＲＬ Ａ ；累加器 Ａ 的内容向左环移 位
　　ＲＬＣ Ａ ；累加器 Ａ 的内容带进位标志位向左环移 位
　　ＲＲ Ａ ；累加器 Ａ 的内容向右环移 位
　　ＲＲＣ Ａ ；累加器 Ａ 的内容带进位标志位向右环移 位
这组指令的功能是：对累加器 Ａ 的内容进行简单的逻辑操作。除了带进位标志位的移
位指令外，其它都不影响 Ｃｙ、ＡＣ、ＯＶ 等标志。
．逻辑与指令
　　ＡＮＬ Ａ，Ｒｎ　　　　　　；Ａ←（Ａ）∧（Ｒｎ）
　　ＡＮＬ Ａ，ｄｉｒｅｃｔ ；Ａ←（Ａ）∧（ｄｉｒｅｃｔ）
　　ＡＮＬ Ａ，＠Ｒｉ ；Ａ←（Ａ）∧（（Ｒｉ））
　　ＡＮＬ Ａ，＃ｄａｔａ ；Ａ←（Ａ）∧ｄａｔａ
　　ＡＮＬ ｄｉｒｅｃｔ，Ａ ；ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）∧（Ａ）
　　ＡＮＬ ｄｉｒｅｃｔ，＃ｄａｔａ ；ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）∧ｄａｔａ
这组指令的功能是：将两个操作数的内容按位进行逻辑与操作，并将结果送回目的操
作数的单元中。
．逻辑或指令
　　ＯＲＬ Ａ，Ｒｎ ；Ａ←（Ａ）∨（Ｒｎ）
　　ＯＲＬ Ａ，ｄｉｒｅｃｔ ；Ａ←（Ａ）∨（ｄｉｒｅｃｔ）
　　ＯＲＬ Ａ，＠Ｒｉ ；Ａ←（Ａ）∨（（Ｒｉ））
　　ＯＲＬ Ａ，＃ｄａｔａ ；Ａ←（Ａ）∨ｄａｔａ
　　ＯＲＬ ｄｉｒｅｃｔ，Ａ ；ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）∨（Ａ）
　　ＯＲＬ ｄｉｒｅｃｔ，＃ｄａｔａ ；ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）∨ｄａｔａ
这组指令的功能是：将两个操作数的内容按位进行逻辑或操作，并将结果送回目的操
作数的单元中。
．逻辑异或指令
　　ＸＲＬ Ａ，Ｒｎ ；Ａ←（Ａ）（Ｒｎ）
　　ＸＲＬ Ａ，ｄｉｒｅｃｔ ；Ａ←（Ａ）（ｄｉｒｅｃｔ）
　　ＸＲＬ Ａ，＠Ｒｉ ；Ａ←（Ａ）（（Ｒｉ））
　　ＸＲＬ Ａ，＃ｄａｔａ ；Ａ←（Ａ）ｄａｔａ
　　ＸＲＬ ｄｉｒｅｃｔ，Ａ ；ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）（Ａ）
　　ＸＲＬ ｄｉｒｅｃｔ，＃ｄａｔａ ；ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）ｄａｔａ
这组指令的功能是：将两个操作数的内容按位进行逻辑异或操作，并将结果送回到目
的操作数的单元中。
　　单片机原理及接口技术　　
．． 控制转移类指令
控制转移指令共有 条，不包括按布尔变量控制程序转移指令（见表 ．）。其中有
ＫＢ范围内的长调用、长转移指令；有ＫＢ范围内的绝对调用和绝对转移指令；有全空
间的长相对转移及一页范围内的短相对转移指令；还有多种条件转移指令。由于 ＭＣＳ
提供了较丰富的控制转移指令，因此在编程上相当灵活方便。这类指令用到的助记符共有
种：ＡＪＭＰ、ＬＪＭＰ、ＳＪＭＰ、ＪＭＰ、ＡＣＡＬＬ、ＬＣＡＬＬ、ＪＺ、ＪＮＺ、ＣＪＮＥ、ＤＪＮＺ。
表 ． 控制转移指令
指令助记符 功 能 简 述 字节数 振荡器周期数
ＡＪＭＰａｄｄｒ ＫＢ内绝对转移
ＬＪＭＰａｄｄｒ ＫＢ内绝对转移
ＳＪＭＰｒｅｌ 相对短转移
ＪＭＰ ＠Ａ＋ＤＰＴＲ 相对长转移
ＪＺｒｅｌ 累加器为零转移
ＪＮＺｒｅｌ 累加器不为零转移
ＣＪＮＥ Ａ，ｄｉｒｅｃｔ，ｒｅｌ Ａ 的内容与直接寻址字节的内容不等转移
ＣＪＮＥ Ａ，＃ｄａｔａ，ｒｅｌ Ａ 的内容与立即数不等转移
ＣＪＮＥ Ｒｎ，＃ｄａｔａ，ｒｅｌ Ｒｎ的内容与立即数不等转移
ＣＪＮＥ ＠Ｒｎ，＃ｄａｔａ，ｒｅｌ 内部 ＲＡＭ 单元的内容与立即数不等转移
ＤＪＮＺ Ｒｎ，ｒｅｌ 寄存器内容减 不为零转移
ＤＪＮＺｄｉｒｅｃｔ，ｒｅｌ 直接寻址字节内容减不为零转移
ＡＣＡＬＬａｄｄｒ ＫＢ内绝对调用
ＬＣＡＬＬａｄｄｒ ＫＢ内绝对调用
ＲＥＴ 子程序返回
ＲＥＴＩ 中断返回
　　一、无条件转移指令
．绝对跳转指令
　　ＡＪＭＰａｄｄｒ ；ＰＣ←（ＰＣ）＋，ＰＣ～←ａｄｄｒ
这是 ＫＢ范围内的无条件跳转指令，执行该指令时，先将（ＰＣ）＋，然后将ａｄｄｒ送
入 ＰＣ～ＰＣ，而 ＰＣ～ＰＣ保持不变。这样得到跳转的目的地址。需要注意的是，目标
地址与 ＡＪＭＰ后面一条指令的第一个字节必须在同一个 ＫＢ区域的存储器区内。
　　第 章 ＭＣＳ 单片机指令系统　　
．短跳转指令
　　ＳＪＭＰｒｅｌ ；ＰＣ←（ＰＣ）＋，ＰＣ←（ＰＣ）＋ｒｅｌ
执行该指令时，先将（ＰＣ）＋，再把指令中带符号的偏移量加到 ＰＣ上，得到跳转的目
标地址送入 ＰＣ。
．长跳转指令
　　ＬＪＭＰａｄｄｒ ；ＰＣ←ａｄｄｒ
执行该指令时，将 位目标地址ａｄｄｒ装入 ＰＣ，程序无条件转向指定的目标地址。
转移的目标地址可以在 ＫＢ程序存储器地址空间的任何地方，不影响任何标志。
．散转指令
　　ＪＭＰ ＠Ａ＋ＤＰＴＲ ；ＰＣ←（Ａ）＋（ＤＰＴＲ）
执行该指令时，把累加器 Ａ 中的 位无符号数与数据指针中的 位数相加，结果作
为下条指令的地址送入 ＰＣ，不改变累加器 Ａ 和数据指针 ＤＰＴＲ 的内容，也不影响标志。
利用这条指令能实现程序的散转。
二、条件转移指令
　　ＪＺｒｅｌ　　　　 ；若（Ａ）＝ 转移，ＰＣ←（ＰＣ）＋＋ｒｅｌ
　　ＪＮＺｒｅｌ ；若（Ａ）≠ 转移，ＰＣ←（ＰＣ）＋＋ｒｅｌ
这类指令是依据累加器 Ａ 的内容是否为 的条件转移指令。条件满足时转移（相当于
一条相对转移指令），条件不满足时则顺序执行下面一条指令。转移的目标地址在以下一
条指令的起 始 地 址 为 中 心 的 个 字 节 范 围 之 内 （－～ ＋）。当 条 件 满 足 时，
ＰＣ←（ＰＣ）＋Ｎ＋ｒｅｌ，其中（ＰＣ）为该条件转移指令的第一个字节的地址，Ｎ 为该转移指令
的字节数（长度），本转移指令 Ｎ＝。
三、比较转移指令
在 ＭＣＳ 中没有专门的比较指令，但提供了下面 条比较不相等转移指令：
　　ＣＪＮＥ Ａ，ｄｉｒｅｃｔ，ｒｅｌ ；若（Ａ）≠（ｄｉｒｅｃｔ），则 ＰＣ←（ＰＣ）＋＋ｒｅｌ
　　ＣＪＮＥ Ａ，＃ｄａｔａ，ｒｅｌ ；若（Ａ）≠ｄａｔａ，则 ＰＣ←（ＰＣ）＋＋ｒｅｌ
　　ＣＪＮＥ Ｒｎ，＃ｄａｔａ，ｒｅｌ ；若（Ｒｎ）≠ｄａｔａ，则 ＰＣ←（ＰＣ）＋＋ｒｅｌ
　　ＣＪＮＥ ＠Ｒｉ，＃ｄａｔａ，ｒｅｌ ；若（（Ｒｉ））≠ｄａｔａ，则 ＰＣ←（ＰＣ）＋＋ｒｅｌ
这组指令的功能是：比较前面两个操作数的大小，如果它们的值不相等则转移。转移
地址的计算方法与上述两条指令相同。如果第一个操作 数（无 符 号 整 数）小于第二个操作
数，则进位标志 Ｃｙ置“”，否则清“”，但不影响任何操作数的内容。
四、减 不为 转移指令
　　ＤＪＮＺ Ｒｎ，ｒｅｌ ；Ｒｎ←（Ｒｎ）－
　　ＤＪＮＺｄｉｒｅｃｔ，ｒｅｌ ；ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）－
这两条指令把源操作数减，结果回送到源操作数中去，如果结果不为则转移（转移
地址的计算方法同前）。
五、调用及返回指令
在程序设计中，通常把具有一定功能的公用程序段编制成子程序，当主程序需要使用
子程序时用调用指令，而在子程序的最后安排一条子程序返回指令，以便执行完子程序后
　　单片机原理及接口技术　　
能返回主程序继续执行。
．绝对调用指令
　　ＡＣＡＬＬａｄｄｒ ；ＰＣ←（ＰＣ）＋
；ＳＰ←（ＳＰ）＋，（ＳＰ）←（ＰＣ）～
；ＳＰ←（ＳＰ）＋，（ＳＰ）←（ＰＣ）～
；ＰＣ～←ａｄｄｒ
这是一条 ＫＢ范围内的子程序调用指令。执行该指令时，先将 ＰＣ＋ 以获得下一条
指令的地址，然后 将 位 地 址 压 入 堆 栈（ＰＣＬ 内 容 先 进 栈，ＰＣＨ 内 容 后 进 栈），ＳＰ 内
容加 ，最 后 把 ＰＣ 的 高 位 ＰＣ ～ＰＣ 与 指 令 中 提 供 的 位 地 址 ａｄｄｒ 相 连 接
（ＰＣ～ＰＣ，Ａ～Ａ），形成子程序的入口地址送入 ＰＣ，使程序转向子程序执行。所用
的子程序的入口地址必须与 ＡＣＡＬＬ下面一条指令的第一个字节在同一个 ＫＢ区域的存
储器区内。
．长调用指令
　　ＬＣＡＬＬａｄｄｒ ；ＰＣ←（ＰＣ）＋
；ＳＰ←（ＳＰ）＋，（ＳＰ）←（ＰＣ）～
；ＳＰ←（ＳＰ）＋，（ＳＰ）←（ＰＣ）～
；ＰＣ←ａｄｄｒ
这条指令无条件调用位于 位地址ａｄｄｒ的子程序。执行该指令时，先将 ＰＣ＋ 以
获得下一条指令的首地址，并把它压入堆栈（先低字节后高字节），ＳＰ内容加，然后将
位地址放入 ＰＣ中，转去执行以该地址为入口的程序。ＬＣＡＬＬ指令可以调用 ＫＢ范围
内任何地方的子程序。指令执行后不影响任何标志。
．子程序返回指令
　　ＲＥＴ ；ＰＣ～←（（ＳＰ）），ＳＰ←（ＳＰ）－
；ＰＣ～←（（ＳＰ）），ＳＰ←（ＳＰ）－
这条指令的功能是：恢复断点，将调用子程序时压入堆栈的下一条指令的首地址取出
送入 ＰＣ，使程序返回主程序继续执行。
．中断返回指令
　　ＲＥＴＩ ；ＰＣ～←（（ＳＰ）），ＳＰ←（ＳＰ）－
；ＰＣ～←（（ＳＰ）），ＳＰ←（ＳＰ）－
这条指令的功能与 ＲＥＴ 指令相似，不同的是它还要清除 ＭＣＳ 单片机内部的中断
状态标志。
．． 位操作类指令
ＭＣＳ 单片机内部有一个布尔处理机，因而有一个专门对位地址空间进行操作的
指令，称为位操作指令或布尔变量操作指令（见表 ．）。位操作指令包括布尔变量的传送、
逻辑运算、控 制 转 移 等 指 令，它 共 有 条 指 令，所 用 的 助 记 符 有 ＭＯＶ、ＣＬＲ、ＣＰＬ、
ＳＥＴＢ、ＡＮＬ、ＯＲＬ、ＪＣ、ＪＮＣ、ＪＢ、ＪＮＢ、ＪＢＣ共 种。
　　第 章 ＭＣＳ 单片机指令系统　　
表 ． 位 操 作 指 令
指令助记符 功 能 简 述 字节数 振荡器周期数
ＭＯＶ Ｃ，ｂｉｔ Ｃｙ←（ｂｉｔ）
ＭＯＶ ｂｉｔ，Ｃ ｂｉｔ← Ｃｙ
ＣＬＲ Ｃ Ｃｙ←
ＣＬＲ ｂｉｔ ｂｉｔ←
ＣＰＬ Ｃ Ｃｙ←（Ｃｙ）
ＣＰＬ ｂｉｔ ｂｉｔ←（ｂｉｔ）
ＳＥＴＢ Ｃ Ｃｙ←
ＳＥＴＢｂｉｔ ｂｉｔ←
ＡＮＬ Ｃ，ｂｉｔ Ｃｙ←（Ｃｙ）∧（ｂｉｔ）
ＡＮＬ Ｃ，／ｂｉｔ Ｃｙ←（Ｃｙ）∧（ｂｉｔ）
ＯＲＬ Ｃ，ｂｉｔ Ｃｙ←（Ｃｙ）∨（ｂｉｔ）
ＯＲＬ Ｃ，／ｂｉｔ Ｃｙ←（Ｃｙ）∨（ｂｉｔ）
ＪＣｒｅｌ 若（Ｃｙ）＝，则转移，ＰＣ←（ＰＣ）＋＋ｒｅｌ
ＪＮＣｒｅｌ 若（Ｃｙ）＝，则转移，ＰＣ←（ＰＣ）＋＋ｒｅｌ
ＪＢｂｉｔ，ｒｅｌ 若（ｂｉｔ）＝，则转移，ＰＣ←（ＰＣ）＋＋ｒｅｌ
ＪＮＢｂｉｔ，ｒｅｌ 若（ｂｉｔ）＝，则转移，ＰＣ←（ＰＣ）＋＋ｒｅｌ
ＪＢＣ ｂｉｔ，ｒｅｌ 若（ｂｉｔ）＝，则转移，ＰＣ←（ＰＣ）＋＋ｒｅｌ，并ｂｉｔ←
　　在布尔处理机中，进位标志 Ｃｙ的作用相当于 ＣＰＵ 中的累加器 Ａ，通过 Ｃｙ完成位的
传送和逻辑运算。布尔 变 量 可 以 是 内 部 ＲＡＭ Ｈ～ＦＨ 单 元 中 连 续 的 位（位 地 址
Ｈ～ＦＨ）和特殊功能寄存器的可寻址位（位地址分布在 Ｈ～ＦＦＨ 范围内）。指令中
位地址的表达形式有以下几种：
（）直接地址方式，如 ＡＨ；
（）点操作符方式，如ＩＥ．；
（）位名称方式，如 ＥＸ；
（）用户定义名方式，如用伪指令 ＢＩＴ 定义：
　　ＷＢＺＤ ＢＩＴ ＥＸ
经定义后，允许指令中使用 ＷＢＺＤ 代替 ＥＸ。
以上 种方式都是指允许中断控制寄存器ＩＥ中的位（外部中断 允许位 ＥＸ），它
的位地址是 ＡＨ，而名称为 ＥＸ，用户定义名为 ＷＢＤＺ。
．位数据传送指令
　　ＭＯＶ Ｃ，ｂｉｔ　　　　　　；Ｃｙ←（ｂｉｔ）
　　ＭＯＶ ｂｉｔ，Ｃ ；ｂｉｔ←（Ｃｙ）
这组指令的功能是：把源操作数指出的布尔变量送到目的操作数指定的位地址单元
中。其中一个操作数必须为进位标志 Ｃｙ，另一个操作数可以是任何可直接寻址位。
．位变量修改指令
　　ＣＬＲ Ｃ ；Ｃｙ←
　　ＣＬＲ ｂｉｔ ；ｂｉｔ←
　　单片机原理及接口技术　　
　　ＣＰＬ Ｃ ；Ｃｙ←（Ｃｙ）
　　ＣＰＬ ｂｉｔ ；ｂｉｔ←（ｂｉｔ）
　　ＳＥＴＢ Ｃ ；Ｃｙ←
　　ＳＥＴＢ ｂｉｔ ；ｂｉｔ←
这组指令对操作数所指出的位进行清“”、取反、置“”的操作，不影响其它标志。
．位变量逻辑与指令
　　ＡＮＬ Ｃ，ｂｉｔ ；Ｃｙ←（Ｃｙ）∧（ｂｉｔ）
　　ＡＮＬ Ｃ，／ｂｉｔ ；Ｃｙ←（Ｃｙ）∧（ｂｉｔ）
这组指令的功能是：如果源位的布尔值是逻辑 ，则将进位标志清“”；否则，进位标
志保持不变，不影响其它标志。ｂｉｔ前的斜杠表示对（ｂｉｔ）取反，直接寻址位取反后用作源操
作数，但不改变直接寻址位原来的值。例如指令：ＡＮＬ Ｃ，／ＡＣＣ． 执行前 ＡＣＣ． 为 ，
Ｃ为 ，则指令执行后 Ｃ为 ，而 ＡＣＣ．仍为 。
．位变量逻辑或指令
　　ＯＲＬ Ｃ，ｂｉｔ ；Ｃｙ←（Ｃｙ）∨（ｂｉｔ）
　　ＯＲＬ Ｃ，／ｂｉｔ ；Ｃｙ←（Ｃｙ）∨（ｂｉｔ）
这组指令的功能是：如果源位的布尔值是逻辑 ，则将进位标志置“”；否则，进位标
志保持不变，不影响其它标志。
．位变量条件转移指令
　　ＪＣｒｅｌ　　　　；若（Ｃｙ）＝，则转移 ＰＣ←（ＰＣ）＋＋ｒｅｌ
ＪＮＣｒｅｌ ；若（Ｃｙ）＝，则转移 ＰＣ←（ＰＣ）＋＋ｒｅｌ
ＪＢ ｂｉｔ，ｒｅｌ ；若（ｂｉｔ）＝，则转移 ＰＣ←（ＰＣ）＋＋ｒｅｌ
ＪＮＢ ｂｉｔ，ｒｅｌ ；若（ｂｉｔ）＝，则转移 ＰＣ←（ＰＣ）＋＋ｒｅｌ
ＪＢＣ ｂｉｔ，ｒｅｌ ；若（ｂｉｔ）＝，则转移 ＰＣ←（ＰＣ）＋＋ｒｅｌ，并 ｂｉｔ←
这组指令的功能是：当某一特定条件满足时，执行转移操作指令（相当于一条相对转
移指令）；条件不满足时，顺序执行下面的一条指令。前面条指令在执行中不改变条件位
的布尔值，而最后一条指令，在转移时将 ｂｉｔ清“”。
以上介绍了 ＭＣＳ 指令系统，理解和掌握本章的内容，是应用 ＭＣＳ 单片机的
一个重要前提。
习 题 与 思 考 题
．ＭＣＳ 指令系统按功能可分为几类？具有几种寻址方式？它们的寻址范围如何？
．设内部 ＲＡＭ 中 Ｈ 单元的内容为 Ｈ，写出当执行下列程序段后寄存器 Ａ，Ｒ
和内部 ＲＡＭ 中 Ｈ、Ｈ 单元的内容为何值？
　　ＭＯＶ Ａ，Ｈ
ＭＯＶ Ｒ，Ａ
ＭＯＶ Ａ，＃
ＭＯＶ ＠Ｒ，Ａ
　　第 章 ＭＣＳ 单片机指令系统　　
ＭＯＶ Ａ，＃Ｈ
ＭＯＶ Ｈ，Ａ
ＭＯＶ Ｈ，＃Ｈ
．ＰＳＷ 中 Ｃｙ与 ＯＶ 有何不同？下列程序段执行后 Ｃｙ＝？ＯＶ＝？
　　ＭＯＶ Ａ，＃Ｈ
　　ＡＤＤ Ａ，＃Ｈ
．ＭＯＶＣ Ａ，＠Ａ＋ＤＰＴＲ与 ＭＯＶＸＡ，＠ＤＰＴＲ指令有何不同？
．ＡＪＭＰ、ＬＪＭＰ、ＳＪＭＰ指令功能上有何不同？
．设堆栈指针ＳＰ中 的 内 容 为 Ｈ，内 部 ＲＡＭ 中 Ｈ 和 Ｈ 单 元 的 内 容 分 别 为
Ｈ 和 Ｈ，执行下列程序段后，Ｈ，Ｈ，Ｈ，Ｈ，ＤＰＴＲ 及 ＳＰ中的内容将有何
变化？
　　ＰＵＳＨ Ｈ
ＰＵＳＨ Ｈ
ＰＯＰ ＤＰＬ
ＰＯＰ ＤＰＨ
ＭＯＶ Ｈ，＃Ｈ
ＭＯＶ Ｈ，＃ＦＦＨ
．试分析下列程序段，当程序执行后，位地址Ｈ 和Ｈ 中的内容将为何值？Ｐ口
的 条Ｉ／Ｏ 线为何状态？
　　　　　　　ＣＬＲ Ｃ
ＭＯＶ Ａ，＃Ｈ
ＪＣ ＬＯＯＰ
ＣＰＬ Ｃ
ＳＥＴＢ Ｈ
　　ＬＯＯＰ： ＯＲＬ Ｃ，ＡＣＣ．
ＪＢ ＡＣＣ．，ＬＯＯＰ
　　ＬＯＯＰ： ＭＯＶ Ｐ，Ａ

．要完成以下的数据传送，应如何用 ＭＣＳ 指令实现？
（）Ｒ 的内容传送到 Ｒ；
（）片外 ＲＡＭＨ 单元的内容送 Ｒ；
（）片外 ＲＡＭＨ 单元的内容送片内 ＲＡＭＨ 单元；
（）片外 ＲＡＭＨ 单元的内容送片内 ＲＡＭＨ 单元；
（）ＲＯＭＨ 单元的内容送 Ｒ；
（）ＲＯＭＨ 单元的内容送片内 ＲＡＭＨ 单元；
（）ＲＯＭＨ 单元的内容送片外 ＲＡＭＨ 单元。
．分析以下程序每一条指令执行的结果：
　　ＭＯＶ Ａ，＃Ｈ
ＭＯＶ Ｒ，＃Ｈ
　　单片机原理及接口技术　　
ＭＯＶ Ｈ，＃ＡＨ
ＭＯＶ Ｒ，Ｈ
ＡＤＤ Ａ，Ｒ
ＡＤＤＣ Ａ，＠Ｒ
ＡＤＤＣ Ａ，Ｈ
．设 Ａ＝Ｈ，Ｒ＝Ｈ，（Ｈ）＝Ｈ，执行下面程序段后，（Ａ）＝？
　　ＡＮＬ Ａ，＃Ｈ
ＯＲＬ Ｈ，Ａ
ＸＲＬ Ａ，＠Ｒ
ＣＰＬ Ａ
．两个 位 ＢＣＤ码数相加，被加数和加数分别存于 Ｈ、Ｈ 和 Ｈ、Ｈ 单元
中（次序为千位、百位在低地址中，十位、个位在高地址中），和数放在Ｈ、Ｈ、Ｈ 中
（Ｈ 用于存放最高位的进位），试编写加法程序。
．试编写一程序，查找内部 ＲＡＭ 单元的Ｈ～Ｈ 中是否有ＡＡＨ 这一数据，若
有，则将 Ｈ 单元置为 Ｈ，若没有，则使 Ｈ 单元置 。
　　第 章 ＭＣＳ 单片机指令系统　　
第章
　　　　　　汇编语言程序设计简介
　　上一章介绍的 ＭＣＳ 指令系统中每一条指令都是用意义明确的助记符来表示的，
这种由指令的助记符、符号地址、标号等书写的程序称为汇编语言程序。汇编语言程序设
计是开发计算机应用系统的基本功。本章将通过一些基本程序，介绍部分常用的程序设计
方法。
． 伪 指 令
我们知道，计算机只认识机器指令（二进制编码），因此应用系统中必须把汇编语言源
程序通过汇编程序翻译成机器语言程序（目标程序），计算机才能执行，这个翻译过程称为
汇编。汇编程序在汇编过程中，必须要提供一些专门的指令，这些指令在汇编时并不产生
目标代码，不影响程序的执行，所以称为伪指令。下面介绍几种常用的伪指令。
一、汇编起始指令 ＯＲＧ
指令格式为：
　　ＯＲＧ ｎｎ
该指令的作用是指明后面的程序或数据块的起始地址，它总是出现在每段源程序或数
据块的开始。式中，ｎｎ为位地址，汇编时ｎｎ确定了此语句后面第一条指令或第一个数
据的地址，此后的源程序或数据块就依次连续存放在以后的地址内，直到遇到另一个 ＯＲＧ
指令为止。例：
　　ＯＲＧ Ｈ
ＭＯＶ ＳＰ，＃Ｈ
ＭＯＶ Ｒ，＃ＦＨ
ＭＯＶ Ｒ，＃ＦＦＨ
　　
ＯＲＧ 伪指令说明其后面程序的目标代码在存储器中存放的起始地址是Ｈ，即
　　存储器地址　　　目标程序
　　Ｈ
　　Ｈ Ｆ
　　单片机原理及接口技术　　
　　Ｈ ＡＦＦ
　　　 
二、等值指令 ＥＱＵ
指令格式：
　　字符名称 ＥＱＵ 数字或汇编符号
功能：使指令中的字符名称等价于给定的数字或汇编符号。
使用等值指令可给程序的编制、调试、修改带来方便，如果在程序中要多次使用到某
一地址，由 ＥＱＵ 指令将其赋值给一个字符名称，一旦需要对其进行变动，只要改变 ＥＱＵ
命令后面的数字即可，而不需要对程序中涉及到该地址的所有指令逐句进行修改。但要注
意，由 ＥＱＵ 等值的字符名称必须先赋值后使用，且在同一个源程序中，同一个标号只能
赋值一次。例：
　　ＰＡ ＥＱＵ Ｈ
即给标号 ＰＡ赋值为Ｈ。
三、定义字节指令 ＤＢ
指令格式：
　　［标号：］ ＤＢ 位二进制数表
功能：把 位二进制数表依次存入从标号开始的连续的存储单元中。
格式中，标号区段可有可无，ＤＢ指令之后的 位二进制数表是字节常数或用逗号隔
开的字节串，也可以是用引号括起来的 ＡＳＣＩＩ码字符串（一个 ＡＳＣＩＩ字符相当于一个 字
节）。例：
　　ＯＲＧ　　Ｈ
ＢＵＦ： ＤＢＨ，ＦＨ，Ｈ
ＢＵＦ： ＤＢＨ，Ｈ
ＯＲＧ 伪指令指定了标号 ＢＵＦ的地址为Ｈ，而 ＤＢ 伪指令是将其后的二进制数
表Ｈ、ＦＨ、Ｈ 依次存放在Ｈ、Ｈ、Ｈ个连续单元之中，ＢＵＦ也是一
个标号，其地址与前一条伪指令连续，即Ｈ、Ｈ 地址单元中依次存放Ｈ、Ｈ。
四、定义字指令 ＤＷ
指令格式：
　　［标号：］ ＤＷ 位数据表
该指令的功能与 ＤＢ 相 似，区别仅在于从指定地址开始存放的是指令中的 位 数
据，而不是字节串。每个 位数据要占两个存储单元，高 位 先 存，低 位 后 存，这 和
ＭＣＳ 指令中的位数据存放顺序是一致的。
五、汇编结束指令 ＥＮＤ
指令格式：
　　［标号：］ ＥＮＤ 地址或标号
格式中标号以及 ＥＮＤ后面的地址或标号可有可无。
功能：提供汇编结束标志。汇编程序遇到 ＥＮＤ后就停止汇编，对 ＥＮＤ以后的语句不
予处理，故 ＥＮＤ应放在程序的结束处。
　　第 章 汇编语言程序设计简介　　
． 汇编语言程序设计
在单片机系统设计 中，程 序 设 计 是 重 要 的 一 环，它的质量直接影响到整个系统的功
能。用汇编语言进行程序设计的过程和用高级语言设计程序有相似之处，其设计过程大致
可以分为以下几个步骤。
（）明确课题对程序功能、运算精度、执行速度等方面的要求及硬件条件。
（）把复杂问题分解为若干个模块，确定各模块的处理方法，画出程序流程图（简单问
题可以不画）。对复杂问题可分别画出分模块流程图和总的流程图。
（）存储器资源分配，如各程序段的存放地址、数据区地址、工作单元分配等。
（）编制程序，根据程序流程图精心选择合适的指令和寻址方式来编制源程序。
（）对程序进行汇编、调试和修改。将编制好的源程序进行汇编，并执行目标程序，检
查修改程序中的错误，对程序运行结果进行分析，直至正确为止。
．． 简单程序设计
简单程序又称顺序程序，其特点是按逻辑操作的顺序，从某条指令开始逐条执行。一
般的应用程序远比顺序程序结构复杂，但顺序程序是组成各种复杂程序的基础和主干，下
面举例说明。
【例 】 两个无符号双字节数相加。设被加数存放于内部 ＲＡＭ 的 Ｈ（高位字节）、
Ｈ（低位字节），加数存放于Ｈ（高位字节）、Ｈ（低位字节），和数存入Ｈ 和Ｈ 单
元中。
程序如下：
　　ＳＴＡＲＴ：ＣＬＲ Ｃ　　　　　　；将 Ｃｙ清零
ＭＯＶ Ｒ，＃Ｈ ；将被加数地址送数据指针 Ｒ
ＭＯＶ Ｒ，＃Ｈ ；将加数地址送数据指针 Ｒ
　　ＡＤ： ＭＯＶ Ａ，＠Ｒ ；被加数低字节的内容送入 Ａ
ＡＤＤ Ａ，＠Ｒ ；两个低字节相加
ＭＯＶ ＠Ｒ，Ａ ；低字节的和存入被加数低字节中
ＤＥＣ Ｒ ；指向被加数高位字节
ＤＥＣ Ｒ ；指向加数高位字节
ＭＯＶ Ａ，＠Ｒ ；被加数高位字节送入 Ａ
ＡＤＤＣ Ａ，＠Ｒ ；两个高位字节带 Ｃｙ相加
ＭＯＶ ＠Ｒ，Ａ ；高位字节的和送被加数高位字节
ＲＥＴ
【例 】 将两个半字节数合并成一个一字节数。
设内部 ＲＡＭＨ、Ｈ 单元中分别存放着 位二进制数，要求取出两个单元中的低
半字节，合并成一个字节后，存入 Ｈ 单元中。
程序如下：
　　ＳＴＡＲＴ：ＭＯＶ Ｒ，＃Ｈ ；设置 Ｒ为数据指针
　　单片机原理及接口技术　　
ＭＯＶ Ａ，＠Ｒ ；取出第一个单元中的内容
ＡＮＬ Ａ，＃ＦＨ ；取第一个数的低半字节
ＳＷＡＰ Ａ ；移至高半字节
ＩＮＣ Ｒ ；修改数据指针
ＸＣＨ Ａ，＠Ｒ ；取第二个单元中的内容
ＡＮＬ Ａ，＃ＦＨ ；取第二个数的低半字节
ＯＲＬ Ａ，＠Ｒ ；拼字
ＭＯＶ Ｈ，Ａ ；存放结果
ＲＥＴ
上面的程序均设置了数据指针，操作数通过寄存器间接寻址方式获得，这样只要修改
指针就可以方便地取数、存数。
．． 分支程序设计
在处理实际问题时，只用简单程序设计的方法是不够的。例如，有多个子程序时，为
判断执行哪个子程序，就需要使用分支结构的程序。图 ． 为两种分支结构的形式，其中
（ａ）图为单分支流程的结构，（ｂ）图为多分支选择的结构，它们使计算机有了初级智能。
图 ． 分支结构框图
（ａ）单分支流程；（ｂ）多分支流程
单分支结构的指令有：ＪＺ、ＪＮＺ、ＪＣ、ＪＮＣ、ＣＪＮＺ等，下面举两个分支程序的例子。多
分支结构中常用ＪＭＰ ＠Ａ＋ＤＰＴＲ来实现多分支转移功能，这将在散转程序中介绍。
【例 】 ｘ、ｙ均为位二进制数，设 ｘ存入 Ｒ，ｙ存入 Ｒ，求解：
ｙ＝
＋　　ｘ＞
－　　ｘ＜
烅
烄
烆 ｘ＝
程序框图如图 ．。
程序如下：
　　ＳＴＡＲＴ：ＣＪＮＥ Ｒ，＃Ｈ，ＳＵＬ 　　；Ｒ中的数与比较不等转移
ＭＯＶ Ｒ，＃Ｈ ；相等，Ｒ←
ＳＪＭＰ ＳＵＬ
　　ＳＵＬ： ＪＣ ＮＥＧ ；两数不等，若（Ｒ）＜，转向 ＮＥＧ
ＭＯＶ Ｒ，＃Ｈ ；（Ｒ）＞，则 Ｒ←Ｈ
　　第 章 汇编语言程序设计简介　　
ＳＪＭＰ ＳＵＬ
　　ＮＥＧ： ＭＯＶ Ｒ，＃ＦＦＨ ；（Ｒ）＜，则 Ｒ←ＦＦＨ
　　ＳＵＬ： ＲＥＴ
图 ．
【例 】 比较两个无符号数的大小。
设外部 ＲＡＭ 的存储单元 ＳＴ和 ＳＴ中存放两个不带符号的二进制数，找出其中的
大数存入外部 ＲＡＭ 中的 ＳＴ单元中。
程序流程见图 ．所示。
图 ．
　　单片机原理及接口技术　　
程序如下：
　　　　　　　ＯＲＧ Ｈ　　　　　　
　　ＳＴ ＥＱＵ Ｈ
　　ＳＴ ＥＱＵ Ｈ
　　ＳＴ ＥＱＵ Ｈ
　　ＳＴＡＲＴ： ＣＬＲ Ｃ ；清零 Ｃｙ
ＭＯＶ ＤＰＴＲ，＃ＳＴ ；第一个数的指针
ＭＯＶＸ Ａ，＠ＤＰＴＲ ；取第一个数
ＭＯＶ Ｒ，Ａ ；保存
ＭＯＶ ＤＰＴＲ，＃ＳＴ ；第二个数的指针
ＭＯＶＸ Ａ，＠ＤＰＴＲ ；取第二个数
ＣＬＲ Ｃ
ＳＵＢＢ Ａ，Ｒ ；两数比较
ＪＮＣ ＢＩＧ ；若第二个数大，则转
ＸＣＨ Ａ，Ｒ ；第一个数大
　　ＢＩＧ： ＭＯＶ ＤＰＴＲ，＃ＳＴ
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；存大数
ＲＥＴ
　　ＢＩＧ： ＭＯＶＸ Ａ，＠ＤＰＴＲ ；第二个数大
ＳＪＭＰ ＢＩＧ
ＲＥＴ
例、例 的两段程序都是分支结构，使用了条件转移指令，第二段程序采用了减法
指令ＳＵＢＢ来比较两数的大小。由于这是一条带借位的减法指令，在执行该指令前，先把
进位位清零，用减法指令通过借位（Ｃｙ）的状态判别两数的大小，这是两个无符号数比较大
小时常用的方法。
．． 循环程序设计
一、循环程序
前面介绍的简单程序和分支程序，程序中的指令一般执行一次。而在一些实际应用系
统中，往往同一组操作要重复许多次，这种强制 ＣＰＵ 多次重复执行一串指令的基本程序
结构称为循环程序结构。这种结构的程序流程图如图 ． 所示。
循环程序一般由四个主要部分组成：
（）初始化部分：为 循 环 程 序 做 准 备，如 规 定 循 环 次 数、给 各 变 量 和 地 址 指 针 预 置
初值。
（）处理部分：为反复执行的程序段，是循环程序的实体，也是循环程序的主体。
（）循环控制部分：这部分的作用是修改循环变量和控制变量，并判断循环是否结束，
直到符合结束条件时，跳出循环为止。
（）结束部分：这部分主要是对循环程序的结果进行分析、处理和存放。
循环程序中，控制循环次数的方式有多种：循环次数已知的，常用 ＤＪＮＺ指令来控制
　　第 章 汇编语言程序设计简介　　
图 ．
循环；循环次数未知的，可以按条件控制循环，常用条件转移指令来控制。
【例 】 工作单元清零。
在应用系统程序设计时，有时经常需要将存储器中各部分地址单元作为工作单元，存
放程序执行的中间值或执行结果，工作单元清零工作常常放在程序的初始化部分中。
设有个工作单元，其首址为外部存储器Ｈ 单元，则其工作单元清零程序如下：
　　ＣＬＥＡＲ： ＣＬＲ Ａ　　　　　　　　
ＭＯＶ ＤＰＴＲ，＃Ｈ ；工作单元首址送指针
ＭＯＶ Ｒ，＃ ；置循环次数
　　ＣＬＥＡＲ：ＭＯＶＸ ＠ＤＰＴＲ，Ａ
ＩＮＣ ＤＰＴＲ ；修改指针
ＤＪＮＺ Ｒ，ＣＬＥＡＲ ；控制循环
ＲＥＴ
上例中，循环次数存放在 Ｒ寄存器中，每执行一次循环，Ｒ的内容减，直到 Ｒ＝，
循环结束，使 Ｈ 开始的连续 个工作单元清零。
【例】 设在内部 ＲＡＭ 的ＢＬＯＣＫ 单元开始处有长度为 ＬＥＮ 个的无符号数据块，试
编一个求和程序，并将和存入内部 ＲＡＭ 的 ＳＵＭ 单元（设和不超过 位）。
　　ＢＬＯＣＫ ＥＱＵ Ｈ　　　　　　　
　　ＬＥＮ ＥＱＵ Ｈ
　　ＳＵＭ ＥＱＵ Ｈ
ＳＴＡＲＴ： ＣＬＲ Ａ ；清累加器 Ａ
ＭＯＶ Ｒ，＃ＬＥＮ ；数据块长度送 Ｒ
　　单片机原理及接口技术　　
ＭＯＶ Ｒ，＃ＢＬＯＣＫ ；数据块首址送 Ｒ
ＬＯＯＰ： ＡＤＤ Ａ，＠Ｒ ；循环加法
ＩＮＣ Ｒ ；修改地址指针
ＤＪＮＺ Ｒ，ＬＯＯＰ ；修改计数器并判断
ＭＯＶ ＳＵＭ，Ａ ；存和
ＲＥＴ
上例程序中，利用 Ｒ 作间址寄存器，每作一次加法，Ｒ 加 ，数据指针指向下一个
数据地址，Ｒ 为循环次数计数器，用 ＤＪＮＺ指令修改计数器值，并控制循环的结束与否。
二、多重循环
前面介绍的两个例子中，程序只有一个循环，这种程序被称为单循环程序。而遇到复
杂问题时，采用单循环往往是不够的，还必须采用多重循环才能解决。所谓多重循环是指
在循环程序中还套有其它循环程序，现举例说明。
【例 】 秒延时程序。
延时程序与 ＭＣＳ 执行指令的时间有关，如果使用ＭＨｚ晶振，一个机器周期为
μｓ，计算出一条指令以至一个循环所需要的执行时间，给出相应的循环次数，便能达到
延时的目的。 秒延时程序如下：
　　ＤＥＬＡＹ：ＭＯＶ Ｒ，＃
　　ＤＥＬ： ＭＯＶ Ｒ，＃
　　ＤＥＬ： ＭＯＶ Ｒ，＃
　　ＤＥＬ： ＤＪＮＺ Ｒ，ＤＥＬ
ＤＪＮＺ Ｒ，ＤＥＬ
ＤＪＮＺ Ｒ，ＤＥＬ
ＲＥＴ
上例程序中采用了多重循环程序，即在一个循环体中又包含了其它的循环程序，这种
方式是实现延时程序的常用方法。使用多重循环时，必须注意：
（）循环嵌套，必须层次分明，不允许产生内外层循环交叉。
（）外循环可以一层层向内循环进入，结束时由里往外一层层退出。
（）内循环可以直接转入外循环，实现一个循环由多个条件控制的循环结构方式。
【例 】 在外部 ＲＡＭ 中，ＢＬＯＣＫ 开始的单元中有一无符号数据块，其个数为 ＬＥＮ
个字节。试将这些无符号数按递减次序重新排列，并存入原存储区。
处理这个问题要利用双重循环程序。在内循环中将相邻两单元的数进行比较，若符合
从大到小的次序则不动，否则两数交换，这样两两比较下去，比较ｎ－ 次，所有的数都比
较与交换完毕，最小数沉底。在下一个内循环中将减少一次比较与交换。此时若不再出现
交换，则说明这些数据已经是按递减次序排列了，程序可结束。否则将进 行 下 一 个 循 环，
如此反复比较与交换，每次内循环的最小数都沉底，而较大的数一个个冒上来，这种排序
方法称为“冒泡法”。
用Ｐ 口作数据地址指针的高字节地址；用 Ｒ、Ｒ 作相邻两单元的低字节地址；用
Ｒ、Ｒ 作外循环与内循环计数器；用程序状态字 ＰＳＷ 的 Ｆ作交换标志。图 ． 所示为
例的“冒泡法”程序流程图。
　　第 章 汇编语言程序设计简介　　
图 ．
程序如下：
　　　　 　　ＯＲＧ Ｈ　　　　　　
　　ＳＴＡＲＴ：ＭＯＶ ＤＰＴＲ，＃ＢＬＯＣＫ ；置地址指针
ＭＯＶ Ｐ，ＤＰＨ ；Ｐ作地址指针高字节
ＭＯＶ Ｒ，＃ＬＥＮ ；置外循环计数初值
ＤＥＣ Ｒ ；比较与交换 ｎ－次
　　ＬＯＯＰ： ＣＬＲ Ｆ ；交换标志清
ＭＯＶ Ｒ，ＤＰＬ；
ＭＯＶ Ｒ，ＤＰＬ ；置相邻两数地址指针低字节
ＩＮＣ Ｒ
ＭＯＶ Ｒ，Ｒ ；置内循环计数器初值
　　ＬＯＯＰ： ＭＯＶＸ Ａ，＠Ｒ ；取数
ＭＯＶ Ｂ，Ａ ；暂存
ＭＯＶＸ Ａ，＠Ｒ ；取下一个数
ＣＪＮＥ Ａ，Ｂ，ＮＥＸＴ ；相邻两数比较，不等转
ＳＪＭＰ ＮＯＣＨＡ ；相等不交换
　　ＮＥＸＴ： ＪＣ ＮＯＣＨＡ ；Ｃｙ＝，则前者大于后者，不必交换
　　单片机原理及接口技术　　
ＳＥＴＢ Ｆ ；否则，置交换标志
ＭＯＶＸ ＠Ｒ，Ａ ；
ＸＣＨ Ａ，Ｂ ；两数交换，大者在前，小者在后
ＭＯＶＸ ＠Ｒ，Ａ ；
　　ＮＯＣＨＡ：ＩＮＣ Ｒ
ＩＮＣ Ｒ ；修改指针
ＤＪＮＺ Ｒ，ＬＯＯＰ ；内循环未完，则继续
ＪＮＢ Ｆ，ＥＸＩＴ ；若从未交换，则结束
ＤＪＮＺ Ｒ，ＬＯＯＰ ；外循环未完，则继续
　　ＥＸＩＴ： ＲＥＴ
上述循环程序中，循环次数是已知的，下例中循环次数未知，此时必须采用条件来判
断是否循环。
【例】 设某系统的模数转换器是 ＡＤＣ，它的转换结束信号 ＥＯＣ连接到的
Ｐ． 端，当 ＥＯＣ的状态由低变高时，则结束循环等待，并读取转换值，其程序如下：
　　ＳＴＡＲＴ：ＭＯＶ ＤＰＴＲ，＃ａｄｄｒ　　　；端口地址送 ＤＰＴＲ
ＭＯＶ Ａ，＃Ｈ ；启动转换
ＭＯＶＸ ＠ＤＰＴＲ，Ａ
　　ＬＯＯＰ： ＪＮＢ Ｐ．，ＬＯＯＰ ；检测 Ｐ．状态，判是否转换结束
ＭＯＶＸＡ，＠ＤＰＴＲ ；读取转换结果

【例】 在内部 ＲＡＭ 中从 Ｈ 单元开始的连续单元依次存放了一串字符，该字符
串以回车符为结束标志，要求测试该字符串的长度。
要测试字符串长度，必须将该字符串中的每一个字符依次与回车符相比较，若 不 相
等，则统计字符串长度的计数器加 ；继续比较，直至相等，则表示该字符串结束，计数器
中的值就是字符串的长度。
程序如下：
　　ＳＴＡＲＴ：ＭＯＶ Ｒ，＃ＦＦＨ　　　　
ＭＯＶ Ｒ，＃ＦＨ ；数据指针 Ｒ置初值
　　ＬＯＯＰ： ＩＮＣ Ｒ
ＩＮＣ Ｒ
ＣＪＮＥ ＠Ｒ，＃ＤＨ，ＬＯＯＰ
ＲＥＴ
待测字符以 ＡＳＣＩＩ码形式存放在 ＲＡＭ 单元中，回车符的 ＡＳＣＩＩ码为 ＤＨ，程序中
用一条 ＣＪＮＥ ＠Ｒ，＃ＤＨ，ＬＯＯＰ 指令实现字符比较及控制循环的任务，当 循 环 结 束
时，Ｒ的内容为字符串的长度。
．． 散转程序设计
在程序中往往会碰到这样的问题，要求根据某个数实现不同的转移，当转移的分支比
较多时，使用比较转移指令和条件判断转移指令进行转移很不方便，会使程序较长和执行
　　第 章 汇编语言程序设计简介　　
速度慢，而根据这个数一次转移就能进入相应的分支程序，则程序效率就可以大大提高。
能够实现此种分支方式的程序称为散转程序。
散转程序是分支程序的一种，它可根据运算结果或输入数据将程序转入不同的分支。
ＭＣＳ 指令系统中有一条跳转指令ＪＭＰ ＠Ａ＋ＤＰＴＲ，用它可以很容易地实现散转功
能。该指令把累加器的 位无符号数与 位数据指针的内容相加，并把相加的结果装入
程序计数器 ＰＣ，控制程序转向目标地址去执行。此指令的特点在于，转移的目标地址不是
在编程或汇编时预先确定的，而是在程序运行过程中动态地确定的。目标地址是以数据指
针 ＤＰＴＲ的内容为起始的 字节范围内的指定地址，即由 ＤＰＴＲ 的内容决定分支转移
程序的首地址，由累加器 Ａ 的内容来动态选择其中的某一个分支转移程序。
下面介绍最基本的实现散转程序的方法。
【例 】 根据工作寄存器 Ｒ 内容的不同，使程序转入相应的分支。
　　（Ｒ）＝ 对应的分支程序标号为 ＰＲ；
　　（Ｒ）＝ 对应的分支程序标号为 ＰＲ；
　　　
　　（Ｒ）＝Ｎ 对应的分支程序标号为 ＰＲＮ。
程序如下：
　　ＬＰ： ＭＯＶ ＤＰＴＲ，＃ＴＡＢ ；取表头地址
ＭＯＶ Ａ，Ｒ
ＡＤＤ Ａ，Ｒ ；Ｒ内容乘以
ＪＮＣ ＬＰ ；无进位转移
ＩＮＣ ＤＰＨ ；加进位位
　　ＬＰ： ＪＭＰ ＠Ａ＋ＤＰＴＲ ；跳至散转表中相应位置

　　ＴＡＢ： ＡＪＭＰ ＰＲ
ＡＪＭＰ ＰＲ

ＡＪＭＰ ＰＲＮ
本例程序仅适用于散转表首地址 ＴＡＢ和处理程序入口地址 ＰＲ，ＰＲ，…，ＰＲＮ 在
同一个 ＫＢ范围的存储区内的情形。若超出 ＫＢ范围可在分支程序入口处安排一条长
跳转指令，可采用如下程序：
ＭＯＶ ＤＰＴＲ，＃ＴＡＢ
ＭＯＶ Ａ，Ｒ
ＭＯＶ Ｂ，＃Ｈ ；长跳转指令占 个字节
ＭＵＬ ＡＢ
ＸＣＨ Ａ，Ｂ
ＡＤＤ Ａ，ＤＰＨ
ＭＯＶ ＤＰＨ，Ａ
ＸＣＨ Ａ，Ｂ
ＪＭＰ ＠Ａ＋ＤＰＴＲ ；跳至散转表中相应的位置
　　单片机原理及接口技术　　

ＴＡＢ： ＬＪＭＰ ＰＲ ；跳至不同的分支
ＬＪＭＰ ＰＲ

ＬＪＭＰ ＰＲＮ
．． 子程序和参数传递
．子程序的概念
在编程过程中，常有相同问题多次出现的情况。例如，求三角函数和各种加减乘除运
算、代码转换以及延时等。如果编程中每次遇到这样的操作都编写一段程序，会使编程十
分繁琐，也会占用大量程序存储器空间。通常把这些基本操作功能编制为程序段作为独立
的子程序，以供不同程序或同一程序反复调用。在程序中需要执行这种操作的地方放置一
条调用指令，当程序执行到调用指令，就转到子程序中完成规定的操作，然后再返回到原
来的程序继续执行下去。
．子程序的调用
调用子程序的指令有“ＡＣＡＬＬ”和“ＬＣＡＬＬ”，执行调用指令时，先将程序地址指针 ＰＣ
改变（“ＡＣＡＬＬ”加 ，“ＬＣＡＬＬ”加 ），然后 ＰＣ值压入堆栈，用新的地址值代替。执行返
回指令时，再将 ＰＣ值弹出。
子程序调用中，主程序应先把有关的参数存入约定的位置，子程序在执行时，可以从
约定的位置取得参数，当子程序执行完，将得到的结果再存入约定的位置，返回主程序后，
主程序可以从这些约定的位置上取得需要的结果，这就是参数的传递。
ＭＣＳ 单片机在汇编语言中，有多种参数传递的方法，如用累加器或寄存器、堆栈
等进行参数的传递。下面举一个例子加以说明。
【例 】 把内部 ＲＡＭ 某一单元中一个字节的十六进制数转换成两位 ＡＳＣＩＩ码，结
果存放在内部 ＲＡＭ 的连续两个单元中。
假设一个字节的十六进制数在内部 ＲＡＭＨ 单元，而结果存入 Ｈ、Ｈ 单元，可
以用堆栈进行参数传递，程序如下：
　　ＭＡＩＮ： ＭＯＶ Ｒ，＃Ｈ 　　　；Ｒ 为存结果的指针
ＭＯＶ Ａ，Ｈ ；Ａ 为需转换的十六进制数
ＳＷＡＰ Ａ ；先转换高位半字节
ＰＵＳＨ ＡＣＣ ；压栈
ＬＣＡＬＬ ＨＥＡＳＣ ；调用将低半字节的内容转换
；成 ＡＳＣＩＩ码子程序 ＨＥＡＳＣ
ＰＯＰ ＡＣＣ
ＭＯＶ ＠Ｒ，Ａ ；存高半字节转换结果
ＩＮＣ Ｒ
ＰＵＳＨ Ｈ
ＬＣＡＬＬ ＨＥＡＳＣ
　　第 章 汇编语言程序设计简介　　
ＰＯＰ ＡＣＣ
ＭＯＶ ＠Ｒ，Ａ ；存低半字节转换结果
ＥＮＤ
　　ＨＥＡＳＣ：ＭＯＶ Ｒ，ＳＰ
ＤＥＣ Ｒ
ＤＥＣ Ｒ ；Ｒ 指向十六进制数参数地址
ＸＣＨ Ａ，＠Ｒ ；取被转换参数
ＡＮＬ Ａ，＃ＦＨ ；保留低半字节
ＡＤＤ Ａ，＃ ；修改 Ａ 值
ＭＯＶＣ Ａ，＠Ａ＋ＰＣ ；查表
ＸＣＨ Ａ，＠Ｒ ；结果送回堆栈
ＲＥＴ
　　ＴＡＢ： ＤＢ Ｈ，Ｈ，Ｈ，…
上例程序中，子程序 ＨＥＡＳＣ把位十六进制数转换成对应的 ＡＳＣＩＩ码。主程序中先
压入被转换的 位十六进制数，经调用子程序时，堆栈中压入了两个字节的返回地址，故
进入子程序后，不能直接从堆栈顶中取被转换的参数，而是借用工作寄存器 Ｒ，使其指向
原输入的参数。而返回主程序时，ＲＥＴ 指令将返回地址弹出，堆栈指针直接指向了转换的
结果，将其直接弹出即可。
．． 查表程序设计
查表程序是一种常用程序，它广泛使用于 ＬＥＤ 显示控制、打印机打 印 控 制、数 据 补
偿、数值计算、转换等功能程序中，这类程序具有简单、执行速度快等特点。
所谓查表法，就是预先将满足一定精度要求的表示变量与函数值之间关系的一张表求
出，然后把这张表存于单片机的程序存储器中，这时自变量值为单元地址，相应的函数值
为该地 址 单 元 中 的 内 容。查 表，就 是 根 据 变 量 Ｘ 在表格中查找对应的函数值 Ｙ，使
Ｙ＝ｆ（Ｘ）。
ＭＣＳ 指令系统中，有两条查表指令：
　　ＭＯＶＣ Ａ，＠Ａ＋ＰＣ
　　ＭＯＶＣ Ａ，＠Ａ＋ＤＰＴＲ
上面第一条指令中 ＰＣ为当前程序计数器指针，Ａ 为无符号的偏移量，因此表格必须
设置在查表指令之后，且长度不超过 字节，在例 中已使用了该查表指令。一般在
ＭＯＶＣ Ａ，＠ Ａ＋ＰＣ 指令之前要写上一条 ＡＤＤ Ａ，＃ｄａｔａ 指 令，ｄａｔａ 的 值 是 指
ＭＯＶＣ Ａ，＠Ａ＋ＰＣ指令执行后的 ＰＣ值至表格首地址之间的字节数。这种查表指令使用
时，表格必须靠近查表指令，且表格末尾离查表指令所在地址的字节数必须小于 ，即
它适用于“本地”较小的表格。
第二条指令中，ＤＰＴＲ可设置为任何单元处，因此表格可在 ＫＢ范围之内的任何地
方，使用非常方便。
【例 】 一个十六进制数存放在内部 ＲＡＭ 的 ＨＥＸ 单元的低 位中，将其转换成
ＡＳＣＩＩ码并送回 ＨＥＸ单元。
　　单片机原理及接口技术　　
十六进制～的 ＡＳＣＩＩ码为Ｈ～Ｈ，Ａ～Ｆ的 ＡＳＣＩＩ码为Ｈ～Ｈ，ＡＳＣＩＩ码
表格的首地址为 ＡＳＣＴＡＢ。编程如下：
　　　　　　　ＯＲＧ Ｈ　　　　　
　　ＨＥＸＡＳＣ：ＭＯＶ Ａ，ＨＥＸ
ＡＮＬ Ａ，＃ＦＨ
ＡＤＤ Ａ，＃ ；修改指针
ＭＯＶＣ Ａ，＠Ａ＋ＰＣ
ＭＯＶ ＨＥＸ，Ａ
ＲＥＴ
　　ＡＳＣＴＡＢ：ＤＢ Ｈ，Ｈ，Ｈ，Ｈ，Ｈ
ＤＢ Ｈ，Ｈ，Ｈ，Ｈ，Ｈ
ＤＢ Ｈ，Ｈ，Ｈ，Ｈ，Ｈ
ＤＢ Ｈ
在这个程序中，查表指令 ＭＯＶＣＡ，＠Ａ＋ＰＣ到表格首地址有两条指令，占用个字
节地址空间，故修改指针应加 。
【例 】 在一个温度检测系统中，温度模拟信号由 位 Ａ／Ｄ 输入。将 Ａ／Ｄ 结果转
换为对应温度值，可采用查表方法实现。先由实验测试出整个温度量程范围内的 Ａ／Ｄ 转
换结果，把 Ａ／Ｄ转换结果 Ｈ～ＦＦＨ 所对应的温度值组织为一个表存储在程序存储器
中，那么就可以根据检测到的模拟量的 Ａ／Ｄ转换值查找出相应的温度值。
设测得的 Ａ／Ｄ转换 结 果 已 存 入 Ｈ、Ｈ 单 元 中（高 位 字 节 在 Ｈ 中，低 位 字 节
在Ｈ 中），查表得到的温度值存放在Ｈ、Ｈ 单元（高位字节在 Ｈ 中，低位字节在
Ｈ 中）。
程序如下：
　　ＦＴＭＰ：ＭＯＶ ＤＰＴＲ，＃ＴＡＢ 　　　；ＤＰＴＲ←表首地址
ＭＯＶ Ａ，Ｈ ；（Ｈ）（Ｈ）×
ＣＬＲ Ｃ
ＲＬＣ Ａ
ＭＯＶ Ｈ，Ａ
ＭＯＶ Ａ，Ｈ
ＲＬＣ Ａ
ＭＯＶ Ｈ，Ａ
ＭＯＶ Ａ，Ｈ ；表首地址＋偏移量
ＡＤＤＣ Ａ，ＤＰＬ
ＭＯＶ ＤＰＬ，Ａ
ＭＯＶ Ａ，Ｈ
ＡＤＤＣ Ａ，ＤＰＨ
ＭＯＶ ＤＰＨ，Ａ
ＣＬＲ Ａ
ＭＯＶＣ Ａ，＠Ａ＋ＤＰＴＲ ；查表得温度值高位字节
　　第 章 汇编语言程序设计简介　　
ＭＯＶ Ｈ，Ａ
ＣＬＲ Ａ
ＩＮＣ ＤＰＴＲ
ＭＯＶＣ Ａ，＠Ａ＋ＤＰＴＲ ；查表得温度值低位字节
ＭＯＶ Ｈ，Ａ
ＲＥＴ
　　ＴＡＢ： ＤＷ …
本例程序中，表格字节长度超过个，且每一个温度值占两个字节存储单元。使用
ＭＯＶＣＡ，＠Ａ＋ＤＰＴＲ指令修改数据指针 ＤＰＴＲ可很方便地查得结果。
．． 数制转换
计算机能够直接识别和处理的只能是二进制数，但有些输入、输出设备，如键盘、扫
描器、液晶显示器等等，往往要求计算机以 ＡＳＣＩＩ码的形式与其交换信息，另外人们又习
惯于十进制数，希望能以十进制数进行输入和输出。因此，数制转换和代码转换在编程时
是不可缺少的部分。例、例中已经介绍了两种十六进制数转换为 ＡＳＣＩＩ码的方法，
下面再举例介绍几种常用的转换程序。
【例 】 将一个字节二进制数转换成 位非压缩型 ＢＣＤ码。
设一个字节二进制数在内部 ＲＡＭＨ 单元，转换结果放入内部 ＲＡＭ Ｈ、Ｈ、
Ｈ 单元中（高位在前），程序如下：
　　ＨＥＸＢＣＤ：ＭＯＶ Ａ，Ｈ
ＭＯＶ Ｂ，＃
ＤＩＶ ＡＢ
ＭＯＶ Ｈ，Ａ
ＭＯＶ Ａ，＃
ＸＣＨ Ａ，Ｂ
ＤＩＶ ＡＢ
ＭＯＶ Ｈ，Ａ
ＭＯＶ Ｈ，Ｂ
ＲＥＴ
【例】 设位ＢＣＤ码依次存放在内存 ＲＡＭ 中Ｈ～Ｈ 单元的低位，高位
都为 ，要求将其转换为二进制数，结果存入 ＲＲ 中。
一个十进制数可表示为：
　　　　　Ｄｎ×ｎ＋Ｄｎ－×ｎ－＋… ＋ Ｄ×
　　　　　　　＝（…（（Ｄｎ×＋Ｄｎ－）×＋Ｄｎ－）×＋…）＋Ｄ
当ｎ＝ 时，上式可表示为：
　　　　　（（Ｄ×＋Ｄ）×＋Ｄ）×＋Ｄ
由此，可编制程序如下：
　　ＢＣＤＨＥＸ：ＭＯＶ Ｒ，＃Ｈ　　　；Ｒ指向最高位地址
ＭＯＶ Ｒ，＃ ；计数值送 Ｒ
ＭＯＶ Ｒ，＃ ；存放结果的高位清零
　　单片机原理及接口技术　　
ＭＯＶ Ａ，＠Ｒ
ＭＯＶ Ｒ，Ａ
　　ＬＯＯＰ： ＭＯＶ Ａ，Ｒ
ＭＯＶ Ｂ，＃
ＭＵＬ ＡＢ
ＭＯＶ Ｒ，Ａ ；（Ｒ）× 的低 位送 Ｒ
ＭＯＶ Ａ，Ｂ
ＸＣＨ Ａ，Ｒ ；（Ｒ）×的高 位暂存 Ｒ
ＭＯＶ Ｂ，＃
ＭＵＬ ＡＢ
ＡＤＤ Ａ，Ｒ
ＭＯＶ Ｒ，Ａ ；Ｒ×＋（Ｒ×）高 位送 Ｒ
ＩＮＣ Ｒ ；取下一个 ＢＣＤ数
ＭＯＶ Ａ，Ｒ
ＡＤＤ Ａ，＠Ｒ
ＭＯＶ Ｒ，Ａ
ＭＯＶ Ａ，Ｒ
ＡＤＤＣＡ，＃ ；加低字节来的进位
ＭＯＶ Ｒ，Ａ
ＤＪＮＺ Ｒ，ＬＯＯＰ
ＲＥＴ
位 ＢＣＤ 码最大值为 ，转换成二进制数为 ＦＨ，故不超过两个字节，可用两
个字节来表示转换结果。
．． 运算程序
大多数单片机应用系统中，都离不开数值计算，而最基本的数值计算为四则运算，数
值运算中又可以分为符号数运算和无符号数运算，定点数和浮点数运算，定点数运算程序
简单，执行速度快，多数情况下采用定点数运算。下面介绍一些定点数运算程序。
．加、减法程序
加法程序已在例 中作了介绍，减法程序与加法程序类似，只需将其中加法指令换成
减法指令即可。
【例 】 将 Ｈ 开始存放的 个字节的数与 Ｈ 开始存放的 个字节的数相减
（假设被减数大于减数）。
设被减数指针为 Ｒ，减数指针为 Ｒ，差数放回被减数单元，Ｒ 存放字节个数，则程
序如下：
　　ＳＵＢ： ＭＯＶ Ｒ，＃Ｈ
ＭＯＶ Ｒ，＃Ｈ
ＭＯＶ Ｒ，＃
ＣＬＲ Ｃ
　　ＳＵＢ：ＭＯＶ Ａ，＠Ｒ
　　第 章 汇编语言程序设计简介　　
ＳＵＢＢ Ａ，＠Ｒ
ＭＯＶ ＠Ｒ，Ａ
ＩＮＣ Ｒ
ＩＮＣ Ｒ
ＤＪＮＺ Ｒ，ＳＵＢ
ＲＥＴ
．乘法运算程序
在计算机中，常将乘法采用移位和加法来实现。
【例 】 将（ＲＲ）和（ＲＲ）中双字节无符号数相乘，结果存入 ＲＲＲＲ。
此乘法可以采用部分积右移的方法来实现，其程序框图如图 ． 所示。
图 ． ＮＭＵＬ程序框图
程序如下：
　　ＮＭＵＬ： ＭＯＶ Ｒ，＃　　　　；初始化
ＭＯＶ Ｒ，＃
ＣＬＲ Ｃ
ＭＯＶ Ｒ，＃
　　ＮＭＵＬ： ＭＯＶ Ａ，Ｒ ；ＣｙＲＲＲＲ右移一位
ＲＲＣ Ａ
ＭＯＶ Ｒ，Ａ
ＭＯＶ Ａ，Ｒ
　　单片机原理及接口技术　　
ＲＲＣ Ａ
ＭＯＶ Ｒ，Ａ
ＭＯＶ Ａ，Ｒ
ＲＲＣ Ａ
ＭＯＶ Ｒ，Ａ
ＭＯＶ Ａ，Ｒ
ＲＲＣ
ＭＯＶ Ｒ，Ａ
ＪＮＣ ＮＭＵＬ ；Ｃ为移出乘数的最低位
ＭＯＶ Ａ，Ｒ ；（ＲＲ）＋（ＲＦ）→（ＲＲ）
ＡＤＤ Ａ，Ｒ
ＭＯＶ Ｒ，Ａ
ＭＯＶ Ａ，Ｒ
ＡＤＤＣ Ａ，Ｒ
ＭＯＶ Ｒ，Ａ
　　ＮＭＵＬ： ＤＪＮＺ Ｒ，ＮＭＵＬ ；循环位
ＭＯＶ Ａ，Ｒ ；最后结果再移一位
ＲＲＣ Ａ
ＭＯＶ Ｒ，Ａ
ＭＯＶ Ａ，Ｒ
ＲＲＣ Ａ
ＭＯＶ Ｒ，Ａ
ＭＯＶ Ａ，Ｒ
ＲＲＣ Ａ
ＭＯＶ Ｒ，Ａ
ＭＯＶ Ａ，Ｒ
ＲＲＣ Ａ
ＭＯＶ Ｒ，Ａ
ＲＥＴ
对于 位× 位数的乘法子程序，可采用快速乘法实现。
【例 】 假定被乘数在（ＲＲ）中，乘数放在 Ｒ中，乘积放在 ＲＲ和 Ｒ中。
ＭＣＳ 中有 位数的乘法指令 ＭＵＬ，用它来实现多字节乘法时，可表示为
　　　　（ＲＲ）×（Ｒ）＝［（Ｒ）× ＋（Ｒ）］×（Ｒ）
＝（Ｒ）×（Ｒ）× ＋（Ｒ）×（Ｒ）
其中（Ｒ）×（Ｒ）和（Ｒ）×（Ｒ）都是可直接用 ＭＵＬ指令来实现，而乘以 意味着左移
位。由此可编写如下程序：
　　ＮＭＵＬ：ＭＯＶ Ａ，Ｒ　　　
ＭＯＶ Ｂ，Ｒ
ＭＵＬ ＡＢ ；（Ｒ）×（Ｒ）
　　第 章 汇编语言程序设计简介　　
ＭＯＶ Ｒ，Ａ ；积的低位送 Ｒ
ＭＯＶ Ｒ，Ｂ ；积的高位送 Ｒ
ＭＯＶ Ａ，Ｒ
ＭＯＶ Ｂ，Ｒ
ＭＵＬ ＡＢ ；（Ｒ）×（Ｒ）
ＡＤＤ Ａ，Ｒ ；（Ｒ）×（Ｒ）的高位加（Ｒ）×（Ｒ）的低位
ＭＯＶ Ａ，Ｂ
ＡＤＤＣ Ａ，＃Ｈ ；（Ｒ）×（Ｒ）的高位加 Ｃｙ
ＭＯＶ Ｒ，Ａ ；结果送 Ｒ
ＲＥＴ
根据上面的算法，很容易推广到 位×位、 位× 位数的乘法上去，编程完全
可仿照上面的程序，充分利用 ＭＵＬ指令来实现。
．除法运算程序
除法是乘法的逆运算，用移位、相减的方法来完成。首先比较被除数的高位字与除数，
如被除数高位大于除数，则商为，并从被除数中减去除数，形成一个部分余数；否则商位
为 ，不执行减法。然后把新的部分余数左移一位，并与除数再次进行比较。循环此步骤，
直到被除数的所有位都处理完为止，一般商的字长为 ｎ，则需循环ｎ次。一般计算机中，被
除数均为双倍位，即如果除数和商为双字节，则被除数为四字节。如果在除法中发生商大
于规定字节，称为溢出。在进行除法前，应该检查是否会产生溢出。一般可在进行除法前，
先比较被除数的高位与除数，如被除数高位大于除数，则溢出，置溢出标志，不执行除法。
根据上述运算，可画出除法程序的流程图，如图 ． 所示。
图 ． 除法程序的流程
　　单片机原理及接口技术　　
　　【例 】 将（ＲＲＲＲ）除以（ＲＲ），商放在（ＲＲ）中，余数放在（ＲＲ）中。
按题目要求，ＲＲＲＲ为被除数，同时 ＲＲ 又是商，在运算前，先比较 ＲＲ 与
除数 ＲＲ，若前者大，则为溢出，置位Ｆ（溢出标志），然后直接退出，不进行除法。上商
时，上商 采用加 的方法；上商 不加 。比较操作采用减法来实现，只是先不回送减
法结果，而是保存在累加器 Ａ 和寄存器 Ｒ 中，在需要执行减法时，才送回结果。Ｂ为循
环次数控制计数器，其值为 （除数和商为 位）。在左移时，把移出的最高位保留到用
户标志 Ｆ中，如Ｆ＝则被除数（部分余数，有位）总是大于除数，因为除数最多为
位，这时必然执行减法并上商 。其程序如下：
　　ＮＤＩＶ： ＭＯＶ Ａ，Ｒ 　　　；判商是否产生溢出
ＣＬＲ Ｃ
ＳＵＢＢ Ａ，Ｒ
ＭＯＶ Ａ，Ｒ
ＳＵＢＢ Ａ，Ｒ
ＪＮＣ ＮＤＩＶ ；溢出，转溢出处理
ＭＯＶ Ｂ，＃ ；无溢出，执行除法
　　ＮＤＩＶ： ＣＬＲ Ｃ ；被除数左移一位，低位送
ＭＯＶ Ａ，Ｒ
ＲＬＣ Ａ
ＭＯＶ Ｒ，Ａ
ＭＯＶ Ａ，Ｒ
ＲＬＣ Ａ
ＭＯＶ Ｒ，Ａ
ＭＯＶ Ａ，Ｒ
ＲＬＣ Ａ
ＭＯＶ Ｒ，Ａ
ＸＣＨ Ａ，Ｒ
ＲＬＣ Ａ
ＸＣＨ Ａ，Ｒ
ＭＯＶ Ｆ，Ｃ ；保护移出的最高位
ＣＬＲ Ｃ
ＳＵＢＢ Ａ，Ｒ ；部分余数与除数比较
ＭＯＶ Ｒ，Ａ
ＭＯＶ Ａ，Ｒ
ＳＵＢＢ Ａ，Ｒ
ＪＢ Ｆ，ＮＤＩＶ ；移出的高位为 ，肯定够减
ＪＣ ＮＤＩＶ ；否则，（Ｃｙ）＝才够减
　　ＮＤＩＶ： ＭＯＶ Ｒ，Ａ ；回送减法结果
ＭＯＶ Ａ，Ｒ
ＭＯＶ Ｒ，Ａ
　　第 章 汇编语言程序设计简介　　
ＩＮＣ Ｒ ；商上
　　ＮＤＩＶ： ＤＪＮＺ Ｂ，ＮＤＩＶ ；循环次数减，若不为零则循环
ＣＬＲ Ｆ ；正常执行无溢出 Ｆ＝
ＲＥＴ
　　ＮＤＩＶ： ＳＥＴＢ Ｆ ；溢出 Ｆ＝
ＲＥＴ
习 题 与 思 考 题
．若有两个符号数ｘ、ｙ分别存放在内部存储器 Ｈ、Ｈ 单元中，试编写一个程序
实现 ｘ×＋ｙ，结果存入 Ｈ、Ｈ 单元中。
．在以 Ｈ 为首址的外部 ＲＡＭ 单元中，存放了个 ＡＳＣＩＩ码表示的～之间
的数，试编写程序将它们转换为ＢＣＤ码，并以压缩型ＢＣＤ码的形式存放在以Ｈ 为首
地址的外部 ＲＡＭ 单元中。
．采样的个值分别存放在 Ｒ、Ｒ、Ｒ、Ｒ、Ｒ中，求出它们的中间值，并存放在
Ｒ 中。
．以 ＢＵＦ为起始地址的外部数据 存 储 器 区 中，存 放 有 个 单 字 节 无 符 号 二 进 制
数，试编写一程序，求其平均值并送 ＢＵＦ 单元。
．试编写程序，将内部 ＲＡＭ 中 ＤＡＴＡ单元开始的个单字节数据依次与ＤＡＴＡ
单元为起始地址的 个单字节数据进行交换。
．某场歌手赛，共有个评委，试编一程序，输入个评分，去掉最高分和最低分，
求平均分（均为 ＢＣＤ码）。
．编写将一个单字节十六进制数转换为十进制数的子程序。
．在内部 ＲＡＭ 的 ＢＬＯＣＫ 开始的单元中有一无符号数据块，数据块长度存入 ＬＥＮ
单元。试编程求其中的最大数并存入 ＭＡＸ单元中。
．试编程将内部 ＲＡＭ 中 Ｈ～Ｈ 单元中的数左移 位，移出部分送 Ｈ 单元。
．在外部 ＲＡＭ 的 ＢＬＯＣＫ 单 元 开 始 有 一 数 据 块，数据块长度存入内 部 ＲＡＭ 的
ＬＥＮ 单元。试编程统计其中正数、负 数 和 零 的 个 数 分 别 存 入 内 部 ＲＡＭ 的 ＰＣＯＵＮＴ、
ＭＣＯＵＮＴ 和ＺＣＯＵＮＴ 单元。
．试编一查表求平方子程序 ＳＱＲ（设 Ｘ在累加器 Ａ 中，Ａ 小于，平方数存入工作
寄存器 Ｒ中）。
．试编写一程序，将外部数据区 ＤＡＴＡ 单元开始的 个单字节数逐一依次移至
内部 ＲＡＭ 中 ＤＡＴＡ 单元开始的数据区中。
．试编一 字节数乘 字节数的子程序。
．试编一 字节数除以 字节数的子程序。
　　单片机原理及接口技术　　
第章
　　　ＭＣＳ 单片机的中断系统
． 中 断 的 概 述
中断是计算机中一个很重要的概念，中断技术的引入使计算机的发展和应用大大地推
进了一步。因此，中断功能的强弱已成为衡量一台计算机功能完善与否的重要指标之一。
．中断
中断是指计算机在执行某一程序的过程中，由于计算机系统内、外的某种原因，而必
须中止原程序的执行，转去执行相应的处理程序，待处理结束之后，再回来继续执行被中
止的原程序的过程。
采用了中断技术后的计算机，可以解决 ＣＰＵ 与外设之间速度匹配的问题，使计算机
可以及时处理系统中许多随机的参数和信息，同时，它也提高了计算机处理故障与应变的
能力。
．中断源
中断源是指在计算机系统中向 ＣＰＵ 发出中断请求的来源，中断可以人为设定，也可
以是为响应突发性随机事件而设置。通 常 有Ｉ／Ｏ 设 备、实 时 控 制 系 统 中 的 随 机 参 数 和 信
息、故障源等。
．中断优先级
由于在实际的系统中，往往有多个中断源，且中断申请是随机的，故有时可能会有多
个中断源同时提出 中 断 申 请，但 ＣＰＵ 一次只能响应一个中断源发出的中断请求，这 时
ＣＰＵ 应响应哪个中断请求？这就需要用软件或硬件按中断源工作性质的轻重缓急，给它们
安排一个优先顺 序，即 所 谓 的 优 先 级 排 队。中 断 优 先 级 越 高，则 响 应 优 先 权 就 越 高。当
ＣＰＵ 正在执行中断服务程序时，又有中断优先级更高的中断申请产生，这时 ＣＰＵ 就会暂
停当前的中断服务转而处理高级中断申请，待高级中断处理程序完毕再返回原中断程序断
点处继续执行，这一过程称为中断嵌套。
．中断响应的过程
（）在每条指令结束后，系统都自动检测中断请求信号，如果有中断请求，且 ＣＰＵ 处
　　第 章 ＭＣＳ 单片机的中断系统　　
于开中断状态下，则响应中断。
（）保护现场，在保护现场前，一般要关中断，以防止现场被破坏。保护现场一般是用
堆栈指令将原程序中用到的寄存器推入堆栈。在保护现场之后要开中断，以响应更高优先
级的中断申请。
（）中断服务，即为相应的中断源服务。
（）恢复现场，用堆栈指令将保护在堆栈中的数据弹出来，在恢复现 场 前 要 关 中 断，
以防止现场被破坏。在恢复现场后应及时开中断。
（）返回，此时 ＣＰＵ 将推入到堆栈的断点地址弹回到程序计数器，从而使 ＣＰＵ 继续
执行刚才被中断的程序。
． ＭＣＳ 中断系统
ＭＣＳ 单片机的中断系统由与中断有关的特殊功能寄存器、中断入口、顺序查询逻
辑电路组成，其结构如图．所示。
图 ． ＭＣＳ 中断系统结构框图
．． 中断源
ＭＣＳ 单片机的中断系统，是位单片机中功能最强的一种。由图．可知，
提供了 个中断源（提供了 个），其作用如表 ． 所示。
的中断请求分别由特殊功能寄存器 ＴＣＯＮ 和ＳＣＯＮ 的相应位锁存。
　　单片机原理及接口技术　　
表 ． 中断源
中 断 源 说　　　　明
ＩＮＴ
Ｐ．引脚输入，低电 平／负 跳 变 有 效，在每个机器周期的 ＳＰ采 样
并建立ＩＥ标志
定时器 当定时器 Ｔ产生溢出时，置位内部中断请求标志 ＴＦ，发中断申请
ＩＮＴ
Ｐ．引脚输入，低电 平／负 跳 变 有 效，在每个机器周期的 ＳＰ采 样
并建立ＩＥ标志
定时器 当定时器 Ｔ产生溢出时，置位内部中断请求标志 ＴＦ，发中断申请
串行口 当一个串行帧接收／发 送 完 时，使 中 断 请 求 标 志 ＲＩ／ＴＩ置 位，发 中 断
请求
．特殊功能寄存器ＴＣＯＮ中的标志
ＴＣＯＮ 为内部定时器／计数器 Ｔ、Ｔ的控制寄存器，其字节地 址 为Ｈ，位 地 址 为
Ｈ～ＦＨ，图 ． 示出了 ＴＣＯＮ 各位的定义。
（ＭＳＢ） （ＬＳＢ）
ＴＦ ＴＲ ＴＦ ＴＲ ＩＥ ＩＴ ＩＥ ＩＴ
图 ． ＴＣＯＮ 格式
图 ． 中各位的作用如下：
ＴＦ：内部定时器 溢出标志。当定时器／计数器溢出时，由硬件置位，申请中断，进
入中断服务后被硬件自动清除。
ＴＲ：内部定时器 运行控制位。靠软件置位或清除，置位时，定时器／计数器接通工
作，清除时停止工作。
ＴＦ：内部定时器 溢出标志。其作用类同于 ＴＦ。
ＴＲ：内部定时器 运行控制位。其作用类同于 ＴＲ。
ＩＥ：外部中断 请求标志。检测到在ＩＮＴ引脚上出现的外部中断信号有效时，由硬
件置位，请求中断。进入中断服务后被硬件自动清除。
ＩＴ：外部中断 类型 控 制 位。靠软件来设置或清除，以控制外部中断的触发类型。
ＩＴ＝ 时是下降沿触发，ＩＴ＝ 时是低电平触发。
ＩＥ：外部中断 请求标志。其作用类同于ＩＥ。
ＩＴ：外部中断 类型控制位。其作用类同于ＩＴ。
．特殊功能寄存器ＳＣＯＮ
ＳＣＯＮ 用于控制和监视串行口的工 作状态。其 字 节 地 址 为 Ｈ，位 地 址 为 Ｈ～
ＦＨ，各位定义见图 ．。
（ＭＳＢ） （ＬＳＢ）
ＳＭ ＳＭ ＳＭ ＲＥＮ ＴＢ ＲＢ ＴＩ ＲＩ
图 ． ＳＣＯＮ 格式
　　第 章 ＭＣＳ 单片机的中断系统　　
图 ． 中各位的作用如下：
ＳＭ 和ＳＭ：串行口操作模式选择位；
ＳＭ：多机通信使能位；
ＲＥＮ：允许接收位；
ＴＢ：发送数据位；
ＲＢ：接收数据位；
以上 位定义将在串行接口中说明。
ＴＩ：串行口发送中断标志。串行口每发送完一帧数据后，硬件就置位 ＴＩ。ＣＰＵ 响应中
断后不会自动清零 ＴＩ，需由软件来完成。
ＲＩ：串行口接收中断标志。串行口每接收完一帧数据后，硬件就置位 ＲＩ。ＣＰＵ 响应中
断后不会自动清零 ＲＩ，需由软件来完成。
．． 中断控制
．中断允许控制
ＭＣＳ 单片机有 个（有 个）中断源，为了使每个中断源都能独立地被允许
或禁止，以便用户能灵活使用，它在每个中断信号的通道中设置了一个中断屏蔽触发器。
只有该触发器无效，它所对应的中断请求信号才能进入 ＣＰＵ，即此类型中断开放。否则，
即使其对应的中断标志位置 ，ＣＰＵ 也不会响应中断，即此类型中断被屏蔽了。同时 ＣＰＵ
内还设置了一个中断允许触发器，它控制 ＣＰＵ 能否响应中断。
中断屏蔽触发器和中断允许触发器 由中断允许寄存器 ＩＥ 控 制，ＩＥ 的 字 节 地 址 为
ＡＨ，位地址为 ＡＨ～ＡＦＨ，其各位定义如图 ． 所示，它的各位的置位和复位均由用
户通过软件编程实现。
（ＭＳＢ） （ＬＳＢ）
ＥＡ Ｘ ＥＴ ＥＳ ＥＴ ＥＸ ＥＴ ＥＸ
图 ． ＩＥ格式
图 ． 中各位的作用如下：
ＥＡ：中断总允许位。若 ＥＡ＝，禁止一切中断；若 ＥＡ＝，则某一个中断源是否允许
中断分别由各自的允许位确定。
ＥＴ：内部定时器 中断允许位。ＥＴ＝，禁止中断；ＥＴ＝，允许中断。
ＥＳ：串行口中断允许位。ＥＳ＝，禁止串行口中断；ＥＳ＝，允许中断。
ＥＴ：内部定时器 中断允许位。ＥＴ＝，禁止 Ｔ中断；ＥＴ＝，允许 Ｔ中断。
ＥＸ：外部中断 允许位。ＥＸ＝，禁止外部中断中断；ＥＸ＝，允许中断。
ＥＴ：内部定时器 中断允许位。ＥＴ＝，禁止 Ｔ中断；ＥＴ＝，允许 Ｔ中断。
ＥＸ：外部中断 允许位。ＥＸ＝，禁止外部中断中断；ＥＸ＝，允许外部中断
中断。
．中断优先级
ＭＣＳ 单片机的中断分为两个优先级，每个中断源的优先级都可以通过中断优先
　　单片机原理及接口技术　　
级寄存器ＩＰ中的相应位来设定。特殊功能寄存器ＩＰ中各位由用户通过软件编程，其字节
地址为 ＢＨ，位地址为 ＢＨ～ＢＣＨ，它的定义如图 ． 所示。
（ＭＳＢ） （ＬＳＢ）
Ｘ Ｘ ＰＴ ＰＳ ＰＴ ＰＸ ＰＴ ＰＸ
图 ． ＩＰ格式
图 ． 中各位的作用如下：
ＰＴ：内部定时器 中断优先级设定位。ＰＴ＝，设定 Ｔ为高优先级；ＰＴ＝，设
定 Ｔ为低优先级。
ＰＳ：串行口中断优先级设定位。ＰＳ＝，设定串行口为高优先级；ＰＳ＝，设定串行口
为低优先级。
ＰＴ：内部定时器中断优先级设定位。ＰＴ＝，设定 Ｔ中断为高优先级；ＰＴ＝，
设定 Ｔ中断为低优先级。
ＰＸ：外部中断 优先级设定位。ＰＸ＝，设定外部中断 为高优先级；ＰＸ＝，设
定外部中断为低优先级。
ＰＴ：内部定时器中断优先级设定位。ＰＴ＝，设定 Ｔ中断为高优先级；ＰＴ＝，
设定 Ｔ中断为低优先级。
ＰＸ：外部中断 优先级设定位。ＰＸ＝，设定外部中断 为高优先级；ＰＸ＝，设
定外部中断 为低优先级。
靠中断优先级寄存器ＩＰ把各中断源的优先级分为高优先级和低优先级，但中断源有
个（有个），当有两个以上中断源同时提出申请时，ＣＰＵ 到底响应哪一个中断源发
出的中断申请呢？它们遵循以下两条基本规则：
（）低优先级中断可被高优先级中断所中断，反之不能；
（）一种中断（不管是什么优先级）一旦得到响应，与它同级的中断不能再中断它。
为了实现这两条规则，中断系统内部设置了两个不可寻址的“优先级激活”触发器。其
中一个指示某高优先级的中断正在得到服务，所有后来的中断都被阻断。另一个触发器指
示某低优先级的中断正得到服务，所有同级的中断都被阻断，但不阻断高优先级的中断。
当同时收到几个同一优先级的中断请求时，哪一个请求得到服务，取决于“内部查询
次序”，相当于在 每 个 优 先 级 中，还有按次序决定的第二优先级结构，其 顺 序 见 表 ．
所示。
表 ． 同级内第二优先级次序
中 断 源 中断标志位 同级内优先级
外部中断
定时器 溢出中断
外部中断
定时器 溢出中断
串行口中断
定时器 中断
ＩＥ
ＴＦ
ＩＥ
ＴＦ
ＲＩ或 ＴＩ
ＴＦ或 ＥＸＦ
最高
↑
最低
　　第 章 ＭＣＳ 单片机的中断系统　　
　　例如，某软件中对寄存器ＩＥ、ＩＰ设置如下：
　　ＭＯＶＩＥ，＃ＦＨ
　　ＭＯＶＩＰ，＃Ｈ
则此时该系统中：
· ＣＰＵ 中断允许；
· 允许外 部 中 断 、外 部 中 断 、定 时 器／计 数 器 、定 时 器／计 数 器 提 出 的 中 断
申请；
· 允许中断源的中断优先次序为：
定时器／计数器 ＞外部中断 ＞外部中断 ＞定时器／计数器 。
．． 中断响应
．中断响应的条件
ＭＣＳ 单片机系列，在 ＣＰＵ 允许中断（ＥＡ＝），中断源允许中断的标志位被软件
置 的前提下，ＣＰＵ 将在每一个机器周期的 ＳＰ 期间顺序检测所有的中断源。这样到任
一周期的 Ｓ状态时，找到了所有已激活的中断请求，并排好了优先权。在下一个机器周期
的 Ｓ状态，只要不受阻断就开始响应其中最高优先级的中断请求。若发生下列情况，中断
响应会受到阻断：
（）同级或高优先级的中断已在进行中；
（）当前的机器周期还不是正在执行指令的最后一个机器周期（换言之，正在执行的
指令完成前，任何中断请求都得不到响应）；
（）正在执行的是一条 ＲＥＴＩ或者访问特殊功能寄存器ＩＥ 或ＩＰ的指令（换言之，在
ＲＥＴＩ或读写ＩＥ或ＩＰ之后，不会马上响应中断请求，而至少执行一条其它指令之后才会
响应）。
若下一周期上述条件不满足，中断标志有可能已经消失，因此会拖延了的中断请求可
能不会再得到响应。
．中断响应过程
单片机一旦响应中断请求，就由硬件完成以下功能：
（）根据响应的中断源的中断优先级，使相应的优先级状态触发器置 ；
（）执行硬件中断服务子程序调用，并把当前程序计数器 ＰＣ的内容压入堆栈；
（）清除相应的中断请求标志位（串行口中断请求标志 ＲＩ和 ＴＩ除外）；
（）把被响应的中断源所对应的中断服务程序的入口地址（中断矢量）送入 ＰＣ，从而
转入相应的中断服务程序。
ＭＣＳ 系统的中断响应入口地址即中断矢量是由硬件自动生成的。各中断源与它
所对应的中断服务程序入口地址见表 ． 所示。
中断响应的过程，相当于执行了一条调用指令，或称隐指令。如当 ＴＦ出现高电平且
响应中断时，ＣＰＵ 就自动执行一条隐指令“ＬＣＡＬＬＢＨ”。应当注意，在中断服务子程
序的调用过程中，只保存了 ＰＣ的信息，其余的信息都要编程者通过软件来保护。
　　单片机原理及接口技术　　
表 ． 中断服务程序入口地址表
中 断 源 中 断 矢 量
外部中断 Ｈ
定时器 Ｔ中断 ＢＨ
外部中断 Ｈ
定时器 Ｔ中断 ＢＨ
串行口中断 Ｈ
定时器 Ｔ中断（仅有） ＢＨ
　　例如，现有外部中断 提出申请，且主程序中有 Ｒ、Ｒ、ＤＰＴＲ、累加器 Ａ 需保护，
则编制程序应为：
　　　　　　ＯＲＧ Ｈ　　　
ＡＪＭＰ ＭＡＩＮ
ＯＲＧ Ｈ
ＬＪＭＰＩＮＴ

ＯＲＧ Ｈ
　　ＭＡＩＮ： … ；主程序
…
ＯＲＧ Ｈ
　　ＩＮＴ： ＰＵＳＨ ＡＣＣ ；中断服务程序
ＰＵＳＨ ＤＰＨ
ＰＵＳＨ ＤＰＬ
ＰＵＳＨ Ｒ
ＰＵＳＨ Ｒ

ＰＯＰ Ｒ
ＰＯＰ Ｒ
ＰＯＰ ＤＰＬ
ＰＯＰ ＤＰＨ
ＰＯＰ ＡＣＣ
ＲＥＴＩ
编程中应注意：
（）在 Ｈ 放一条跳转到主程序的跳转指令，这是因为 ＭＣＳ 单片机复位后，
ＰＣ的内容变为Ｈ，程序从Ｈ 开始执行，紧接着Ｈ 是中断程序入口地址，故
在此中间只能插入一条转移指令；
（）响应中断时，先自动执行一条隐指令“ＬＣＡＬＬＨ”，而Ｈ 至ＢＨ（定时
器 溢出中断入口地址）之间可利用的存储单元不够，故放一条无条件转移指令。
（）在中断服务程序的末尾，必须安排一条中断返回指令 ＲＥＴＩ，使程序自动返回主
程序。
　　第 章 ＭＣＳ 单片机的中断系统　　
． 中断系统的应用
【例 】 单步操作的中断实现。
前已述及，中断请求只有在一条指令执行完之后才会得到响应，并且正在响应一个中
断时，同级的中断请求是不会得到响应的，利用这个特点即可实现单步操作。
这里介绍一种方法。
把一个外部中断（设为ＩＮＴ）设置为电平激活方式。其中断服务程序的末尾写上如下
几条指令：
　　ＪＮＢ Ｐ．，＄　　；在ＩＮＴ变高前原地等待（死循环）
　　ＪＢ Ｐ．，＄ ；在ＩＮＴ变低前原地等待（死循环）
　　ＲＥＴＩ ；返回并执行一条指令
现在，若ＩＮＴ保持低电平，且允许ＩＮＴ中断，则 ＣＰＵ 就进入外部中断服务程序，
由于有上述几条指令，它就会停在ＪＮＢ处，原地等待。当ＩＮＴ端出现一个正脉冲（由低到
高，再到低）时，程序就会往下执行，执行 ＲＥＴＩ后，将返回主程序，往下执行一条指令，
然后又立即响应中断，以等待ＩＮＴ端出现的下一个正脉冲。这样在ＩＮＴ端每出现一个正
脉冲，主程序就执行一条指令，实现了单步执行的目的，要注意的是，这个正脉冲的高电
平持续时间不小于 个周期，以确保 ＣＰＵ 能采集到高电平值。
【例 】 多中断源。
ＭＣＳ 单片机有两个外部中断输入端，当有 个以上中断源时，它的中断输入端
就不够了。此时，可以采用中断与查询相结合的方法来实现。可以使每个中断源都接在同
一个外部中断输入端上，同时利用输入口线作为多中断源情况下各中断源的识别线。具体
电路见图 ．。同一根外部中断输入端ＩＮＴ上接有 个中断源，集电极开路的非门构成
或非电路，无论哪个外部装置提出中断请求，都会使ＩＮＴ端变化，究竟是哪个外部装置造
成的中断，可以靠查询 Ｐ．～ Ｐ． 的逻辑电平获知，这 个中断源的优先级由软件排
定。下面是有关程序，中断优先级按装置 ～ 由高到低顺序排列。
　　　　　　　ＯＲＧ Ｈ　　　　　
ＬＪＭＰＩＮＴ
…
　　ＩＮＴ： ＰＵＳＨ ＰＳＷ
ＰＵＳＨ ＡＣＣ
ＪＢ Ｐ．，ＤＶ
ＪＢ Ｐ．，ＤＶ
ＪＢ Ｐ．，ＤＶ
ＪＢ Ｐ．，ＤＶ
　　ＧＯＢＡＣＫ：ＰＯＰ ＡＣＣ
ＰＯＰ ＰＳＷ
ＲＥＴＩ
　　ＤＶ： …
　　单片机原理及接口技术　　
图 ． 多中断源
；装置中断服务程序
…
ＡＪＭＰ ＧＯＢＡＣＫ
　　ＤＶ： …
；装置中断服务程序
…
ＡＪＭＰ ＧＯＢＡＣＫ
　　ＤＶ： …
；装置中断服务程序
…
ＡＪＭＰ ＧＯＢＡＣＫ
　　ＤＶ： …
；装置中断服务程序
…
ＡＪＭＰ ＧＯＢＡＣＫ
　　第 章 ＭＣＳ 单片机的中断系统　　
　　使用此方法时应特别注意：装置 ～ 的 个中断输入均为高电平有效，能被相应的
中断服务程序所清除，并且在 ＣＰＵ 响应该中断之前保持有效，外部中断 采用电平触发
方式。
使用此种方法的优点是：如果干扰信号引起中断请求，则进入中断服务程序后，ＣＰＵ
依次查询一遍后又返回主程序，增强了抗干扰能力。
习 题 与 思 考 题
．简述中断、中断源、中断源的优先级及中断嵌套的含义。
．ＭＣＳ 单片机提供几个中断源？几个中断优先级？
．简述 ＴＣＯＮ、ＳＣＯＮ、ＩＥ、ＩＰ个特殊功能寄存器各位的定义及功能。
．简述 ＭＣＳ 单片机的中断响应过程。
．说明 ＭＣＳ 单片机响应中断后，中断服务程序的入口地址。
．指出哪几个中断申请标志位在 ＣＰＵ 响应该中断申请后能够被硬件自动清零？
．在 ＭＣＳ 单片机的应用系统中，如果有多个外部中断源，怎样进行处理？
．外部中断ＩＮＴ、ＩＮＴ的两种触发方式在原理上有何区别？如何用软件设置（说明
一种）？
．在一个应用系统中，晶振频率为 ＭＨｚ，一个外部中断请求信号的宽度为 ｎｓ
的负脉冲，应该采用哪种触发方式？如何实现？
．ＭＣＳ 的中断服务程序能否放在 ＫＢ程序存储器的任意区域？如何实现？
　　单片机原理及接口技术　　
第章
　　　　ＭＣＳ 单片机内部
　　定时器／计数器及串行接口
　　ＭＣＳ 单片机内部带有两个 位定时器／计数器（ 则有 个），以及一个全双
工的异步通信串行接口，这给用户带来了极大的方便。本章介绍 系列单片机内部定
时器／计数器和串行口的结构、工作原理及应用。
． 定时器／计数器的结构及工作原理
定时器／计数器实质上是加法计数器，当它对具有固定时间间隔的内部机器周期进行
计数时，它是定时器；当它对外部事件进行计数时，它是计数器。
定时器／计数器的基本结构如图 ． 所示。
图 ． 定时器／计数器结构框图
图中，基本部件是两个 位的计数器，其中 ＴＨ、ＴＬ是 Ｔ的计数器，ＴＨ、ＴＬ
是 Ｔ的计数器。ＴＨ和 ＴＬ、ＴＨ和 ＴＬ构成两个位加法计数器，它的工作状态及
工作方式由定时器／计数器的工作方式寄存器 ＴＭＯＤ 及定时器／计数器控制寄存器 ＴＣＯＮ
的各位决定。工作 状 态 有 定 时 和 计 数 两 种，由 ＴＭＯＤ 中 的 一 位 控 制。工作方式有方式
～ 共四种，由 ＴＭＯＤ中的两 位 编 码 决 定。ＴＭＯＤ 和 ＴＣＯＮ 的 内 容 由 软 件 写 入。定 时
器／计数器的输出是加法计数器的计满溢出信号，它使 ＴＣＯＮ 的某位（ＴＦ或 ＴＦ）置 ，
作为定时器／计数器的溢出中断标志。
　　第 章 ＭＣＳ 单片机内部定时器／计数器及串行接口　　
当加法计数器的初值被设置，用指令改变 ＴＭＯＤ 和 ＴＣＯＮ 的内容后，就会在下一条
指令的第一个机器周期的ＳＰ时按设定的方式自动进行工作。
工作方式在后面讨论，这里先讨论定时和计数工作状态。在作定时器使用时，输入的
时钟脉冲是由晶体振荡器的输出经 分频后得到的，所以定时器可看做是对计算机机器
周期的计数器（因为每个机器周期包含 个振荡周期，故每个机器周期定时器加 ，可以
把输入的时钟脉冲看成机器周期信号），故 其 频 率 为 晶 振 频 率 的 ／。如 晶 振 频 率 为
ＭＨｚ，则定时器每接收一个输入脉冲的时间为 μｓ。
当它用作对外部事件计数时，接相应的外部输入端 Ｔ（Ｐ．）或 Ｔ（Ｐ．）。在这种情
况下，当检测到输入端的电平由高跳变到低时，计数器就加 （它在每个机器周期的 ＳＰ
时采样外部输入，当采样值在这个机器周期为高，在下一个机器周期为低时，则计数器加
）。加 操作发生在检测到这种跳变后的一个机器周期中的 ＳＰ，因此需要两个机器周
期来识别一个从“”到“”的跳变，故最高计数频率为晶振频率的 ／。这就要求输入信号
的电平要在跳变后至少应在一个机器周期内保持不变，以保证在给定的电平再次变化前至
少被采样一次。
这里要注意的是：加法计数器是计满溢出时才申请中断，所以在给计数器赋初值时，
不能直接输入所需的计数值，而应输入的是计数器计数的最大值与这一计数值的差值，设
最大值为 Ｍ，计数值为 Ｎ，初值为 Ｘ，则 Ｘ的计算方法如下：
计数状态：Ｘ＝Ｍ－Ｎ
定时状态：Ｘ＝Ｍ－定时时间／Ｔ
其中 Ｔ＝÷晶振频率
． 方式和控制寄存器
定时器／计数器有 种工作方式，由 ＴＭＯＤ设置，并由 ＴＣＯＮ 控制。ＴＭＯＤ和 ＴＣＯＮ
都属于特殊功能寄存器。
．定时器／计数器的方式寄存器ＴＭＯＤ
ＴＭＯＤ的地址是Ｈ，它不 能 位 寻 址，它里面的内容被称为方式字，设 置 时 一 次 写
入，其各位的定义如图 ． 所示。高 位用于定时器 Ｔ，低 位用于定时器 Ｔ。
（ＭＳＢ） （ＬＳＢ）
ＧＡＴＥ Ｃ／珚Ｔ Ｍ Ｍ ＧＡＴＥ Ｃ／珚Ｔ Ｍ Ｍ
Ｔ方式控制 Ｔ方式控制
图 ． ＴＭＯＤ各位定义
下面介绍 ＴＭＯＤ各位功能。
）ＭＭ工作方式控制位
两位可组合成 种编码，分别对应 种工作方式，见表 ． 所示。
　　单片机原理及接口技术　　
表 ． 工作方式选择表
Ｍ Ｍ 方 式 说　　明
位定时器（ＴＨ 的高位和 ＴＬ的低 位）
位定时器／计数器
自动重装入初值的 位计数器
Ｔ分成两个独立的位计数器，Ｔ在方式时停止工作
　　）Ｃ／珚Ｔ 定时器方式或计数器方式选择位
当 Ｃ／珚Ｔ ＝时，为计数器方式；当 Ｃ／珚Ｔ ＝ 时，为定时器方式。
）ＧＡＴＥ 定时器／计数器运行门控标志位
当 ＧＡＴＥ＝时，只有ＩＮＴ（或ＩＮＴ）引脚为高电平且 ＴＲ（或 ＴＲ）置时，相应的
定时器／计数器 才 被 选 通 工 作，这 时 可 用 于 测 量 在 ＩＮＴｘ 端 出 现 的 正 脉 冲 的 宽 度。若
ＧＡＴＥ＝，则只要 ＴＲ（或 ＴＲ）置，定时器／计数器就被选通，而不管ＩＮＴ（或ＩＮＴ）
的电平是高还是低。
．定时器／计数器控制寄存器ＴＣＯＮ
特殊功能寄存器 ＴＣＯＮ 用于控制定时器的操作及对定时器中断的控制。其各位定义
及功能已在中断系统的相关章节中介绍，此处不再详述。
ＴＦ、ＴＦ分别是定时器／计数器 Ｔ、Ｔ的溢出标志位，加法计数器计满溢出时置，
申请中断，在中断响应后自动复 。ＴＦ产生的中断申请是否被接受，还需要由中断是否开
放来决定。
ＴＲ、ＴＲ 分别是定时器／计数器 Ｔ、Ｔ 的运行控制位，通过软件置 后，定时器／
计数器才开始工作，在系统复位时被清 。
． 工 作 方 式
定时器／计数器的工作方式有种，由 ＴＭＯＤ中的 Ｍ和 Ｍ位选择，工作方式不同，
计数长度（即最大值 Ｍ）和计数方式也不同。
方式 ：
当 ＭＭ设置为时，定时器选定为方式工作。在这种方式下，位寄存器只用
了位，加法计数器由 ＴＬ的低位和 ＴＨ 的高位组成，而 ＴＬ的高位弃之不用。工
作方式 的逻辑图如图 ． 所示。
当 ＧＡＴＥ＝ 时，只要 ＴＣＯＮ 中的 ＴＲ为，ＴＬ及 ＴＨ组成的位计数器就开
始计数；当 ＧＡＴＥ＝时，此时仅 ＴＲ＝仍不能使计数器计数，还需要ＩＮＴ引脚为高电
平才能使计数器工作。当 ＧＡＴＥ＝和 ＴＲ＝时，ＴＨ＋ＴＬ是否计数取决于ＩＮＴ引
脚的信号，当ＩＮＴ由低电平变为高电平时，开始计数；当ＩＮＴ由高电平变为低电平时，
停止计数，这样就可以用来测量在ＩＮＴ 引脚上出现的正脉冲宽度。
　　第 章 ＭＣＳ 单片机内部定时器／计数器及串行接口　　
图 ． 方式 （位计数器）
　　当 位计数器加到全“”以后，再加就产生溢出，这时置 ＴＣＯＮ 的 ＴＦ为，同
时把计数器全变为“”。这种方式的计数长度 Ｍ 为的次方。由于加法计数器是位
的，故赋的初值也应是 位二进制数。但应注意， 位初值的高 位赋值给 ＴＨ，低
位数前面加 个 凑成 位之后赋给 ＴＬ。如要求计数值 Ｎ 为 ，则初值 Ｘ为
Ｘ＝Ｍ－＝－＝＝Ｂ
其二进制数前 位是，后位是，因此赋初值时 ＴＨ＝ＥＨ，ＴＬ＝Ｈ。
方式：
方式和方式的工作相同，唯一的不同是加法计数器是由位计数器组成的，高
位为 ＴＨ，低位为 ＴＬ。其控制逻辑图如图．所示。给它赋初值时，位二进制数的高
位赋给 ＴＨ，低 位赋给 ＴＬ，最大计数值 Ｍ 为 的 次方。
图 ． 方式 （位计数器）
方式：
方式 使定时器／计数器作为能自动重置初值连续工作的 位计数器，ＴＬ 作 位加
法计数器，ＴＨ 用于重置初值的常数缓冲器，如图 ． 所示。ＴＨ 由软件预置初值，当 ＴＬ
产生溢出时，一方面使溢出标志 ＴＦ置 ，同时把 ＴＨ 中的 位数据重新装入 ＴＬ中。
方式 、在计数器计满溢出后由软件重新赋初值，方式就省去了这种麻烦，所以它
常用于定时控制或串行口的波特率发生器。如希望每隔μｓ产生一个定时控制脉冲，若
晶振频率为 ＭＨｚ，则此时计数初值 Ｘ＝Ｍ－Ｎ＝（－）／＝，故 只 要 在 ＴＨ，
ＴＬ中预置初始值 ，将定时器／计时器 Ｔ设置成定时工作方式 ，则就能很方便地实现
上述功能。
　　单片机原理及接口技术　　
图 ． 方式 （初始常数自动重装载）
方式 ：
方式 对 Ｔ和 Ｔ是不相同的，若 Ｔ设置为方式，则停止工作（其效果与 ＴＲ＝
相同），所以方式 只适用于 Ｔ。
在工作方式 ，定时器／计数器 Ｔ 被分成两个独立的 位计数器 ＴＬ和 ＴＨ。如图
． 所 示。由 图 可 见，ＴＬ 利 用 了 Ｔ 本 身 的 一 些 控 制 （Ｃ／Ｔ，ＧＡＴＥ，ＴＲ，ＩＮＴ 和
ＴＦ），它的操作与方式 和方式 类似，只不过是一个 位计数器，而 ＴＨ 借用了 Ｔ
的控制位 ＴＲ 和 ＴＦ，并 规 定 只 能 用 作 定 时 器 功 能，对 机 器 周 期 计 数。在 这 种 方 式 中，
ＴＨ 控制了 Ｔ的中断，Ｔ可以设置为方式～，主要用于任何不需要中断控制的场合，
或用作串行口的波特率发生器。
图 ． 方式 （两个 位独立计数器）
通常，当 Ｔ用作串行口 波 特 率 发 生 器 时，Ｔ 才 定 义 为 方 式 ，以 增 加 一 个 位 计
数器。
　　第 章 ＭＣＳ 单片机内部定时器／计数器及串行接口　　
． 定时器／计数器应用举例
从前面几节可知，ＭＣＳ 的内部定时器／计数器是可编程的，在使用它之前应考虑
到 个特殊功能寄存器的应用：ＴＭＯＤ 和 ＴＣＯＮ 的初始化，Ｔ 和 Ｔ 的初值，以及使用
中断时还要用到的 ＳＰ、ＩＥ和ＩＰ。
一、方式 的应用
【例 】 利用定时器输出周期为 ｍｓ的方波，设单片机晶振频率为 ＭＨｚ。
选用定时器／计数器 Ｔ 作定时器，输出为 Ｐ． 引脚，ｍｓ的方波可由间隔 ｍｓ的
高低电平相间而成，因而只要每隔 ｍｓ对 Ｐ． 取反一次即可得到这个方波。
定时 ｍｓ的初值：
因为　　　　　　　　机器周期＝÷ＭＨｚ＝μｓ
所以 ｍｓ内 Ｔ 需要计数 Ｎ 次：
　　　　　　　　Ｎ＝ｍｓ÷μｓ＝
由此可知：使用方式 的 位计数器即可，Ｔ 的初值 Ｘ为
　　　　　　　　Ｘ＝Ｍ－Ｎ＝－＝＝ＥＣＨ
但是，因为 位计数器中，低 位 ＴＬ 只使用了 位，其余码均计入高 位 ＴＨ
的初值，则 Ｔ 的初值调整为
　　　　　　　　ＴＨ＝ＦＨ，ＴＬ＝ＣＨ
ＴＭＯＤ初始化：ＴＭＯＤ＝Ｂ＝Ｈ
　　　　　　　　（ＧＡＴＥ＝，Ｃ／Ｔ＝，Ｍ＝，Ｍ＝）
ＴＣＯＮ 初始化：启动 ＴＲ＝
ＩＥ初始化：开放中断 ＥＡ＝，定时器 Ｔ 中断允许 ＥＴ＝
程序清单如下：
　　　　　　　ＯＲＧ Ｈ　　　　　
ＡＪＭＰ ＳＴＡＲＴ ；复位入口
ＯＲＧ ＢＨ
ＡＪＭＰ ＴＯＩＮＴ ；Ｔ中断入口
ＯＲＧ Ｈ
　　ＳＴＡＲＴ： ＭＯＶ ＳＰ，＃Ｈ ；初始化程序
ＭＯＶ ＴＨ，＃ＦＨ ；Ｔ赋初值
ＭＯＶ ＴＬ，＃ＣＨ
ＭＯＶ ＴＭＯＤ，＃Ｈ
ＳＥＴＢ ＴＲ ；启动 Ｔ
ＳＥＴＢ ＥＴ ；开 Ｔ中断
ＳＥＴＢ ＥＡ ；开总允许中断
　　ＭＡＩＮ： ＡＪＭＰ ＭＡＩＮ ；主程序
　　ＴＯＩＮＴ： ＣＰＬ Ｐ．
ＭＯＶ ＴＬ，＃ＣＨ
　　单片机原理及接口技术　　
ＭＯＶ ＴＨ，＃ＦＨ
ＲＥＴＩ
此程序用定时器每隔 ｍｓ产生一个中断，对 Ｐ． 取反一次，产生 Ｈｚ的方波。
主程序始终循环等待中断。实际应用中，等待过程中 ＣＰＵ 可以完成大量的其它任务，在这
种情况下，宜采用中断方式，不宜采用查询方式。
另外，本例中 Ｐ． 引脚产生约 Ｈｚ的方波，其定时精度并不高，原因有二：一是
中断服务子程序执行时间未计入 Ｔ 定时；二是从中断申请到 ＣＰＵ 响应这个中断所经历
的时间未计入 Ｔ 定时，这个时间肯定是不确定的值，在允许 Ｔ 中断嵌套时定时精度更
差。因此，对定时精度要求十分精确的场合，必须对上述两项误差进行补偿。
二、方式 应用
方式 与方式 基本相同，只是方式 改用了 位计数器。要求定时周期较长时，
位计数器不够用，可改用 位计数器。
【例 】 已知某生产线的传送带上不断地有产品单向传送，产品之间有较大间隔。使
用光电开关统计一定时间内的产品个数。假定红灯亮时停止统计，红灯灭时才在上次统计
结果的基础上继 续 统 计，试 用 单 片 机 定 时 器／计 数 器 Ｔ的 方 式 完成该项产品的计数
任务。
图 ． 给出了完成产品计数任务的硬件原理电路，在生产线传送带一侧的光源 ＨＬ
射出一束光线，照在传送带另一侧的光电三极管 ＶＴ 上，使之导通。每一个产品自动地从
传送带上通过时，产生一次遮光，使 ＶＴ 截止。经过整形消抖延时滤波电路，使 Ｐ．／Ｔ
引脚上形成一个正脉冲，定时器／计数器 Ｔ 设置成计数状态，就可实现对此正脉冲的计
数。由前文叙述可知，Ｐ．／ＩＮＴ可作为 Ｔ 的外部启／停控制信号，灯控开关 Ｓ可控制红
灯 ＨＬ的亮、灭，同时经过消抖延时滤波电路，在 Ｐ．／ＩＮＴ上得到用于控制 Ｔ启／停
的高、低电平。
图 ． 硬件原理图
　　第 章 ＭＣＳ 单片机内部定时器／计数器及串行接口　　
　　（）初始化：ＴＭＯＤ＝Ｂ＝ＤＨ
　　　　　　　　　（ＧＡＴＥ＝，Ｃ／Ｔ＝，ＭＭ＝）
　　　　　　　　　 ＴＣＯＮ＝Ｈ
（）Ｔ在方式时，溢出产生中断，且计数器回零，故在中断服务程序中，需用Ｒ计
数中断次数，以保护累积计数结果。
（）启动 Ｔ计数，开 Ｔ中断。
程序清单如下：
　　　　　　ＯＲＧ Ｈ　　　　
ＡＪＭＰ ＳＴＡＲＴ ；复位入口
ＯＲＧ ＢＨ
ＡＪＭＰ ＴＩＮＴ ；Ｔ中断入口
ＯＲＧ Ｈ
　　ＳＴＡＲＴ：ＭＯＶ ＳＰ，＃Ｈ ；初始化程序
ＭＯＶ ＴＣＯＮ，＃Ｈ
ＭＯＶ ＴＭＯＤ，＃ＤＨ
ＭＯＶ ＴＨ，＃Ｈ
ＭＯＶ ＴＬ，＃Ｈ
ＭＯＶ Ｒ，＃Ｈ ；清中断次数计数单元
ＭＯＶ Ｐ，＃Ｈ ；设置 Ｐ．第二功能
ＳＥＴＢ ＴＲ ；启动 Ｔ
ＳＥＴＢ ＥＴ ；开 Ｔ中断
ＳＥＴＢ ＥＡ ；开总中断
　　ＭＡＩＮ： ＡＣＡＬＬ ＤＩＳＰ ；主程序，调显示子程序
…
ＯＲＧ ＡＨ
　　ＴＩＮＴ：ＩＮＣ Ｒ ；中断服务子程序
ＲＥＴＩ
　　ＤＩＳＰ： … ；显示子程序
ＲＥＴ
程序中，除了执行简短的中断服务程序和调用显示统计结果子程序之外，并 不 多 占
ＣＰＵ，因此主程序中 ＣＰＵ 可以处理很多其它事件。最终统计的产品累计总数 Ｍ ＝（Ｒ）×
＋（ＴＨ）（ＴＬ）。
三、方式 应用
方式 是定时器自动重装载的操作方式，在这种方式下，定时器和的工作是相同
的，它的工作过程与方式、方式基本相同，只不过在溢出的同时，将位二进制初值自
动重装载，即在中断服务子程序中，不需要编程送初值，这里不再举例。定时器 Ｔ工作在
方式 时，可直接用作串行口波特率发生器，这一部分内容在串行口这一节介绍。
四、方式 的应用
定时器 Ｔ工作在方式时是个位定时器／计数器，且 ＴＨ借用了定时器 Ｔ的
　　单片机原理及接口技术　　
溢出中断标志 ＴＦ 和运行控制位 ＴＲ。
【例 】 假设有一个用户系统中已使用了两个外部中断源，并置定时器 Ｔ 于方式 ，
作串行口波特率发生器用，现要求再增加一个外部中断源，并由 Ｐ．口输出一个Ｈｚ的
方波（假设晶振频率为 ＭＨｚ）。
在不增加其它硬件开 销 时，可 把 定 时 器／计 数 器 Ｔ 置 于 工 作 方 式 ，利 用 外 部 引 脚
Ｔ端作附加的外部中断输入端，把 ＴＬ 预置为 ＦＦＨ，这样在 Ｔ 端出现由 至 的负
跳变时，ＴＬ 立即溢出，申请中断，相当于边沿激活的外部中断源。在方式 下，ＴＨ 总
是作 位定时器用，可以靠它来控制由 Ｐ． 输出的 ｋＨｚ方波。
由 Ｐ．输出ｋＨｚ的方波，即每隔μｓ使 Ｐ．的电平发生一次变化。则 ＴＨ中
的初始值 Ｘ＝Ｍ－Ｎ＝－／＝。
下面是有关的程序。
初始化程序：
　　ＭＯＶ ＴＬ，＃ＦＦＨ　　　　
ＭＯＶ ＴＨ，＃
ＭＯＶ ＴＬ，＃ＢＡＵＤ ；ＢＡＵＤ根据波特率要求设置常数
ＭＯＶ ＴＨ，＃ＢＡＵＤ
ＭＯＶ ＴＭＯＤ，＃Ｈ ；置 Ｔ工作方式
；ＴＬ工作于计数器方式
ＭＯＶ ＴＣＯＮ，＃Ｈ ；启动定时器 Ｔ、Ｔ，置外部中断 和
；为边沿激活方式
ＭＯＶＩＥ，＃ＦＨ ；开放全部中断
ＴＬ 溢出中断服务程序（由 ＢＨ 单元转来）：
　　ＴＬＩＮＴ：ＭＯＶ ＴＬ，＃ＦＦＨ
… ；外部引脚 Ｔ 引起中断处理程序
ＲＥＴＩ
ＴＨ 溢出中断服务程序（由 ＢＨ 转来）：
　　ＴＨＩＮＴ：ＭＯＶ ＴＨ，＃
ＣＰＬ Ｐ．
ＲＥＴＩ
此处串行口中断服务程序、外部中断和外部中断的中断服务程序没有列出。
． ＭＣＳ 单片机的串行接口
．． 串行通信的基本概念
ＣＰＵ 与外部设备交换数据有并行和串行通信两种方式。并行通信是指数据的各位同
时进行传送的方式。其特点是传送速度快、效率高，显然并行传送的数据有多少位，就需
要有多少根传输线。当传送距离较远时，位数较多就会导致通信线路成本的大幅度增加，
因此它仅适合于短距离传送。串行通信是指数据的各位按顺序一位一位地传送的通信方
　　第 章 ＭＣＳ 单片机内部定时器／计数器及串行接口　　
式。其特点是只要一对传输线就可实现通信，对传输的数据较多、距离很远时，它可以大
量节约系统的硬件投资。因此，在远距离的数据通信系统中一般采用串行通信方式。
串行通信依据收发功能分为 种方式。① 单工方式：信息只能沿着一个方向传输，例
如甲设备只能发送而乙设备只能接收。② 半双工方式：信息可以沿一条信号线的两个方向
传输，但不能同时实现双向传输，只能交替地收或发。③ 全双工方式：使用两条相互独立
的数据线，分别传输两路方向相反的信息，使收和发能同时进行。
在串行通信过程中，数据传送方式有两种：同步方式和异步方式。
（）同步方式是将一大批数据分成几个数据块，数据块之间用同步字符予以隔开，而
传输的各位二进制码之间都没有间隔。其基本特征是发送与接收时钟始终保持严格同步。
（）异步通信是按帧传送数据，它利用每一帧的起、止信号来建立发送与接收之间的
同步，每帧内部各位均采用固定的时间间隔，但帧与帧之间的时间间隔是随机的。其基本
特征是每个字符必须用起始位和停止位作为字符开始和结束的标志，它是以字符为单位一
个个地发送和接收的。
一个字符（一帧）由起始位、数据位、奇偶校验位和停止位组成。起始位表示一个字符
的开始，接收方可用起始位使自己的接收时钟与数据同步。停 止 位 则 表 示 一 个 字 符 的 结
束。在传送一个字符时，由一位低电平的起始位开始，接着传送数据位，数据位的位数为
～。在传输时，按低位在前、高位在后的顺序传送。奇偶校验位用于检验数据传送的正
确性，也可以没有，可由程序来指定。最后传送的是高电平的停止位，停止位可以是位、
．位或位。停止位结束到下一个字符的起始位之间的空闲位要由高电平来填充（只要
不发送下一个字符，线路上就始终为空闲位），异步传送的位字符格式如图．所示。
图 ． 异步通信的位字符格式
ＭＣＳ 单片机内部有一个全双工异步串行Ｉ／Ｏ 口，占用 Ｐ． 和 Ｐ． 两个引脚，
成为这两个引脚的第二功能：Ｐ． 是串行数据接收端 ＲＸＤ，Ｐ． 是 串 行 数 据 发 送 端
ＴＸＤ。
本节先介绍与串行口有关的几个特殊功能寄存器，然后再叙述串行口的种工作模式
及其应用。
．． 与串行口有关的特殊功能寄存器
使用串行口时，要使 用 特 殊 功 能 寄 存 器 ＳＢＵＦ 作传送和接收数据的缓冲器，则 要 用
ＳＣＯＮ 作串行口控制，要用到ＳＰ、ＩＥ和ＩＰ作串行口中断控制，必要时还可能用到 Ｔ 和
ＰＣＯＮ 以设定波特率。
．数据缓冲器ＳＢＵＦ
串行口 缓 冲 器 ＳＢＵＦ 是可直接寻址的特殊功能寄存器，其 内 部 ＲＡＭ 字 节 地 址 是
　　单片机原理及接口技术　　
Ｈ。在物理上，它对应着两个独立的寄存器，一个发送寄存器，一 个 接 收 寄 存 器。发 送
时，就是 ＣＰＵ 写入 ＳＢＵＦ的时候， 系列单片机没有专门的启动发送状态的指令；接收
时，就是读取ＳＢＵＦ 的 过 程，接 收 寄 存 器 是 双 缓 冲 的，以避免在接收下一帧数据之前，
ＣＰＵ 未能及时响应接收器的中断，没有把上一帧数据读走，而产生两帧数据重叠的问题。
．串行口控制寄存器ＳＣＯＮ
ＳＣＯＮ 用于控制和监视串行口的工作状态，其各位定义如图 ． 所示。相应的各位功
能介绍如下：
ＳＭ、ＳＭ：用于定义串行口的操作模式，两个选择位对应种模式，见表．。其中
ｆＯＳＣ是振荡器频率，ＵＡＲＴ 为通用异步接收和发送器的英文缩写。
表 ． 串行口操作模式选择
ＳＭ ＳＭ 模 式 功　　能 波 特 率
同步移位寄存器 ｆＯＳＣ／
位 ＵＡＲＴ 可变（Ｔ溢出率）
位 ＵＡＲＴ ｆＯＳＣ／ 或ｆＯＳＣ／
位 ＵＡＲＴ 可变（Ｔ溢出率）
　　ＳＭ：多机通信时的接收允许标志位。在模式 和 中，若ＳＭ ＝ ，且接收到的第
位数据（ＲＢ）是，则接收中断标志（ＲＩ）不会被激活。在模式中，若ＳＭ＝且没有接
收到有效的停止位，则 ＲＩ不会被激活。在模式 中，ＳＭ 必须是 。
ＲＥＮ：允许接收位。由软件置位或清零，ＲＥＮ＝ 时，串行口允许接收数据；ＲＥＮ＝
时，禁止接收。
ＴＢ：发送数据位 。在模式 和 中，它是要发送的第 位数据，在许多通信协议
中，该位是奇偶位，可以由软件置位或清除。在多机通信中，这一位用于表示是地址帧还
是数据帧。
ＲＢ：接收数据位 。在模式 和 中是接收的第 位数据。在模式 中，若 ＳＭ＝
，则 ＲＢ 是接收的停止位。在模式 中，该位未使用。
．电源控制寄存器ＰＣＯＮ
电源控制寄存器 ＰＣＯＮ 的各位定 义 如 图．所 示。ＰＣＯＮ 的 地 址 为Ｈ，不 可 位 寻
址，初始化时需要进行字节传送。
（ＭＳＢ） （ＬＳＢ）
ＳＭＯＤ Ｘ Ｘ Ｘ ＧＦ ＧＦ ＰＤ ＩＤＬ
图 ． ＰＣＯＮ 的格式
最高位ＳＭＯＤ与串行口的工作有关，该位是波特率倍增位。ＳＭＯＤ＝时，波特率加
倍，否则不加倍。
ＧＦ、ＧＦ：通用标志位，由软件置位、复位。
ＰＤ：掉电方式控制位，ＰＤ＝为正常方式，ＰＤ＝为掉电方式。
　　第 章 ＭＣＳ 单片机内部定时器／计数器及串行接口　　
ＩＤＬ：空闲方式控制位，ＩＤＬ＝为正常方式，ＩＤＬ＝为空闲方式。
由软件将 ＰＤ位置，单片机进入掉电保护状态，内部 ＲＡＭ 和专用寄存器的内容被保
存，单片机停止一切工作，掉电保护时的备用电源可通过 ＶＣＣ引脚接入。当电源恢复后，系
统要维持ｍｓ的复位时间后才能退出掉电保护状态，复位操作将重新定义专用寄存器，
但内部 ＲＡＭ 的内容不变。
．． 串行口的种工作模式
串行口 的 结 构 比 较 复 杂，它 具 有 种 工 作 模 式，这 些 工 作 模 式 可 以 用 ＳＣＯＮ 中 的
ＳＭ 和 ＳＭ 两位编码决定。以下着重介绍各种模式的工作原理。
模式 ：
串行口 工 作 模 式 为 同 步 移 位 寄 存 器 输 入／输 出 模 式，可 外 接 移 位 寄 存 器，以 扩 展
Ｉ／Ｏ 口。
模式 又分为模式 输出和模式 输入两种工作状态。但应注意：在这种模式下，不
管输出还是输入，通信数据总是从 Ｐ．（ＲＸＤ）管脚输出或输入，而 Ｐ．（ＴＸＤ）管脚总是
用于输出移位脉冲，每一个移位脉冲将使 ＲＸＤ端输出或者输入一位二进制码。在 ＴＸＤ端
的移位脉冲即为模式 的波特率，其值固定为晶振频率ｆＯＳＣ的 ／，即每个机器周期移动
一位数据。
（）模式 输出状态。当一个数据写入串行口数据缓冲器时，就开始发送。在此期间，
发送控制器送出移位信号，使发送移位寄存器的内容右移一位。直至最高位（Ｄ 位）移出
后，停止发送数据和移位脉冲，完成了发送一帧数据的过程，并置发送中断标志 ＴＩ为 ，
申请中断或用于查询。
这是将单片机的串行口扩展为若干并行输出口的工作模式，常用的外接扩展芯片是串
行输入／ 位并行输出的移位寄存器 ＬＳ。它与单片机的连接电路如图 ． 所示。
图 ． 外接移位寄存器输出
每片ＬＳ 有两个串行数据输入端和一个同步移位脉冲输入端，以及 个并行输
出口。时钟 ＣＬＫ 端上每一个上升沿都会使该芯片的 位数据输出右移一位。
（）模式 输入状态。在特殊功能寄存器ＳＣＯＮ 中，位 ＲＥＮ 是串行口允许接收控制
位。当 ＲＥＮ＝ 时，禁止接收；当 ＲＥＮ＝时，允许接收。当串行口置为模式 ，且满足
ＲＥＮ＝和ＲＩ＝的条件时，就会启动一次接收过程。在机器周期的 ＳＰ时刻，在串行口
内接收控制器向移位寄存器写入 ，并在 ＴＸＤ 端输出移位脉冲，从 ＲＸＤ 端输入
　　单片机原理及接口技术　　
一位数据，同时使输入移位寄存器内容左移一位，其右端补上刚由 ＲＸＤ端输入的数据。这
样，原先在输入移位寄存器中的 就逐位从左端移出，而在 ＲＸＤ 引脚上的数据就逐位从
右端移入，当写入移位寄存器最左端的一个 移到最左端时，其右边已经接收了 位数
据。这时，将通知接收控制器进行最后一次移位，并把所接收的数据装入 ＳＢＵＦ，置位接收
中断标志位 ＲＩ，提供申请中断或查询标志。
这是将单片机的串行口扩展为若干并行输入口的工作模式，常用的外接扩展芯片是
位并行输入／串 行 输 出 移 位 寄 存 器 ＬＳ。它 与 单 片 机 的 连 接 电 路 如 图 ． 所 示。
ＬＳ 有 个并行输入端，一个串行输出端，以及一个用于移位的时钟输入端。在同步
移位脉冲的作用下，每个脉冲使 位并行输入数据左移一位，最高位移入单片机 ＲＸＤ端，
个移位脉冲可以使 个字节信息通过 ＲＸＤ引脚送入单片机的ＳＢＵＦ中。
图 ． 外接移位寄存器输入
模式：
串行口工作于模式 时，为波特率可变的 位异步通信接口。数据位由 Ｐ．（ＲＸＤ）
端接收，由Ｐ．（ＴＸＤ）端发送。传送一帧信息为位：一位起始位（），位数据位（低位
在前）和一位停止位（）。波特率是可变的，它取决于定时 器 Ｔ 的 溢 出 速 率 及 ＳＭＯＤ 的
状态。
（）模式 发送过程。用软件清除 ＴＩ后，ＣＰＵ 执行任何一条以 ＳＢＵＦ为目标寄存器
的指令，就启动发送过程。数据由 ＴＸＤ引脚输出，此时的发送移位脉冲是由定时器／计数
器 Ｔ 送来的溢出信号经过 或 分频而取得的。一帧信号发送完时，将置位发送中断
标志 ＴＩ＝，向 ＣＰＵ 申请中断，完成一次发送过程。
（）模式 接收过程。用软件清除 ＲＩ后，当允许接收位 ＲＥＮ 被置位 时，接收器以
选定波特率的 倍的速率采样 ＲＸＤ引脚上的电平，即在一个数据位期间有 个检测脉
冲，并在第、、个脉冲期间采样接收信号，然后用三中取二的原则确定检测值，以抑制
干扰。并且采样是在每个数据位的中间，避免了信号边沿的波形失真造成的采样错误。当
检测到有从“”到“”的负跳变时，则启动接收过程，在接收移位脉冲的控制下，接收完一
帧信息。当最后一次移位脉冲产生时能满足下列两个条件：
① ＲＩ＝；
② 接收到的停止位为 或 ＳＭ＝。
则停止位送入 ＲＢ， 位数据进入 ＳＢＵＦ，并置接收中断标志位 ＲＩ＝，向 ＣＰＵ 发出中断
请求，完成一次接收过程。否则，所接收的一帧信息将丢失，接收器复位，并重新检测由
　　第 章 ＭＣＳ 单片机内部定时器／计数器及串行接口　　
“”至“”的负跳变，以便接收下一帧信息。注意：接收中断标志应由软件清除，通常串行
口以模式 工作时，ＳＭ设置为“”。
模式和模式：
串行口工作于模式 和模式时，被定义为位异步通信接口。它们的每帧数据结构
是 位的：最低位是起始位（），其后是 位数据位（低位在先），第 位是用户定义位
（ＳＣＯＮ 中的 ＴＢ或 ＲＢ），最后一位是停止位（）。模式 和模式 工作原理相似，唯一
的差别是模式的波特率是固定的，即为ｆＯＳＣ／或ｆＯＳＣ／；而模式的波特率是可变的，
与定时器 Ｔ 的溢出率有关。
（）模式和模式的发送过程。发送过程是由执行任何一条 ＳＢＵＦ为目的寄存器的
指令来启动的。由“写入ＳＢＵＦ”信号把位数据装入 ＳＢＵＦ，同时还把 ＴＢ装入发送移位
寄存器的第位，并通知发送控制器要求进行一次发送。发送开始，把一个起始位（）送到
ＴＸＤ 端。移位后，数据由移位寄存器送到 ＴＸＤ端。再过一位，出现第一个移位脉冲。第一
次移位时，把一个停止位“”由控制器的停止位发生端送入移位寄存器的第位。此后，每
次移位时，把送入第位。因此，当 ＴＢ的内容送到移位寄存器的输出位置时，其左面
一位是停止位“”，而再往左的所有位全为“”。这种状态由零检测器检测到后，就通知发
送控制器作最后一次移位，然后置 ＴＩ＝，请求申请中断。第 位数据（ＴＢ）由软件置位
或清零，可以作为数据的奇偶校验位，也可以作为多机通信中的地址、数据标志位。如把
ＴＢ 作为奇偶校 验 位，可以在发送程序中，在 数 据 写 入 ＳＢＵＦ 之 前，先 将 数 据 位 写 入
ＴＢ。
（）模式和模式接收过程。与模式类似，模式和模式接收过程始于在 ＲＸＤ
端检测到负跳变时，为此，ＣＰＵ 以波特率倍的采样速率对 ＲＸＤ端不断采样。一检测到
负跳变，分频计数器就立刻复位，同时把 ＦＦＨ 写入输入移位寄存器。计数器的个
状态把一位时间等分成份，在每一位的第 、、个状态时，位检测器对 ＲＸＤ 端的值
采样。如果所接收到的起始位无效（为），则复位接收电路，等待另一个负跳变的到来。若
起始位有效（为 ），则起始位移入移位寄存器，并开始接收这一帧的其余位。当起始位
移到最左面时，通知接收控制器进行最后一次移位。把 位数据装入接收缓冲器 ＳＢＵＦ，
第位数据装入ＳＣＯＮ 中的 ＲＢ，并置中断标志 ＲＩ＝。装入 ＳＢＵＦ和 ＲＢ以及置位 ＲＩ
的信号只有在产生最后一个移位脉冲且同满足下列两个条件时，才会产生：
① ＲＩ＝；
② ＳＭ＝ 或接收到的第 位数据为“”。
上述两个条件中任一个不满足，所接收的数据帧就会丢失，不再恢复。两者都满足时，第
位数据装入 ＴＢ，前 位数据装入 ＳＢＵＦ。
请注意：与模式 不同，模式 和 中装入 ＲＢ 的是第 位数据，而不是停止位，
所接收的停止位的值与ＳＢＵＦ、ＲＢ 和 ＲＩ都没有关系，利用这一特点可将其用于多机通
信中。　　　　　　　
．． 多机通信
如前所述，串行口以模式 或 接收时，若 ＳＭ为“”，则只有接收到的第位数据
为“”时，数据才装入接收缓冲器，并将中断标志 ＲＩ置“”，向 ＣＰＵ 发出中断请求；如接
　　单片机原理及接口技术　　
收到的第 位数据为“”，则不产生中断标志（ＲＩ＝），信息将丢失。而当 ＳＭ＝时，则
接收到一个字节后，不管第位数据是“”还是“”，都产生中断标志（ＲＩ＝），将接收到的
数据装入接收缓冲器ＳＢＵＦ。利用这一特点，可实现多个处理机之间的通信。如图 ． 所
示为一种简单的主从式多机通信系统。
图 ． 多处理机通信系统
从机系统由从机的初始化程序（或相关的处理程序）将串行口编程为模式 或 的接
收方式，且置 ＳＭ＝，允许串行口中断，每一个从机系统有一个对应的地址编码。当主机
要发送一数据块给某一从机时，它先送出一地址字节，称地址帧，它的第 位是“”，此时
各从机的串行口接收到的第 位（ＲＢ）都为“”，则置中断标志 ＲＩ为“”，这样使每一台
从机都检查一下所接收的主机发送的地址是否与本机相符。若为本机地址，则清除 ＳＭ，
而其余从机保持 ＳＭ＝ 状 态。接下来主机可以发送数据块，称 数 据 帧，它 的 第 位 是
“”，各从机接收到的 ＲＢ 为“”。因此只有与主机联系上的从机（此时ＳＭ＝）才会置中
断标志 ＲＩ为“”，接收主机的数据，实现与主机的信息传递。其余从机因 ＳＭ＝，且第
位 ＲＢ＝，不满足接收数据的条件，而将所接收的数据丢失。
．． 波特率
串行口每秒钟发送或接收的数据位数称为波特率。假设发送一位数据所需时间为 Ｔ，
则波特率为 ／Ｔ。
（）模式 的波特率等于单片机晶振频率的 ／，即每个机器周期接收或发送一位
数据。
（）模式 的波特率与电源控制器 ＰＣＯＮ 的最高位ＳＭＯＤ的写入值有关：
模式 的波特率＝晶振频率×ＳＭＯＤ
即 ＳＭＯＤ＝，波特率为（／）ｆＯＳＣ；ＳＭＯＤ＝，波特率为（／）ｆＯＳＣ。
（）模式和模式的波特率除了与ＳＭＯＤ位有关之外，还与定时器 Ｔ的溢出率有
关。定时器 Ｔ 作为波特率发生器，常选用定时方式 （ 位重装载初值方式），并且禁止
Ｔ 中断。此时 ＴＨ 从初值计数到产生溢出，它每秒钟溢出的次数称为溢出率。于是
　　　　　　模式 或 的波特率＝Ｔ的溢出率×ＳＭＯＤ
＝ＳＭＯＤ
×
ｆＯＳＣ
×（－ＴＨ）
表 ．列出了单片机串行口模式或的常用波特率及其设置方法，以便简化波特率
软件设计。
　　第 章 ＭＣＳ 单片机内部定时器／计数器及串行接口　　
表 ． 定时器Ｔ产生的常用波特率
串行口
模 式
波特率
／ＭＨｚ
晶振频率
ｆＯＳＣ／ＭＨｚ
ＳＭＯＤ
定时器 Ｔ
Ｃ／Ｔ 定时器方式 重装载值
模式 最大 Ｍ × × × ×
模式 最大ｋ × × ×
模式
或
模式
．ｋ
．ｋ
．ｋ
．ｋ
．ｋ
．ｋ
．
．
．
．
．
．
．
ＦＦＨ
ＦＤＨ
ＦＤＨ
ＦＡＨ
ＦＨ
ＥＨ
ＤＨ
Ｈ
ＦＥＥＢＨ
　　如果需要很低的波特率，可以把 Ｔ设置成为其它工作方式，并且允许 Ｔ中断，在中
断服务子程序中实现初始值的重装。
假设某 ＭＣＳ 单片机系统，串行口工作于模式，要求传送波特率为Ｈｚ，作
为波特率发生器的定时器 Ｔ工作在方式 时，请求出计数初值为多少？设单片机的振荡
频率为 ＭＨｚ。
因为串行口工作于模式 时的波特率为
模式 的波特率＝ＳＭＯＤ
×
ｆＯＳＣ
×（－ＴＨ）
所以　　　　　　ＴＨ＝－
ｆＯＳＣ
波特率××（／ＳＭＯＤ）
当ＳＭＯＤ＝时，初值 ＴＨ＝－××
×
／＝＝ＦＨ
当ＳＭＯＤ＝时，初值 ＴＨ＝－××
×
／＝＝ＥＨ
． 串行口的应用
．串行口的编程
串行口需初始化后，才能完成数据的输入、输出。其初始化过程如下：
（）按选定串行口的操作模式设定ＳＣＯＮ 的 ＳＭ、ＳＭ两位二进制编码。
（）对于操作模式 或 ，应根据需要在 ＴＢ 中写入待发送的第 位数据。
（）若选定的操作模式不是模式 ，还需设定接收／发送的波特率。
设定ＳＭＯＤ的状态，以控制波特率是否加倍。
若选定操作模式或，则应对定时器 Ｔ进行初始化以设定其溢出率。
　　单片机原理及接口技术　　
．串行口的应用
【例 】 用 串行口外接 ＬＳ 移位寄存器扩展 位输入口，输入数据由个
开关提供，另有一个开关 Ｋ 提供联络信号。电路示意如图 ． 所示。当开关 Ｋ 合上时，
表示要求输入数据。输入 位开关量，处理不同的程序。
图 ． 电路示意图
前已叙述，串行口模式 的接收可用于并行输入接口扩展，此时要用 ＳＣＯＮ 的 ＲＥＮ
位来作开关控制，因此初始化时除设置操作模式外，还要使 ＲＥＮ 位为。提供联络信号的
开关 Ｋ 输入到 的 Ｐ．引脚，采用查询方式。
程序如下：
　　ＳＴＡＲＴ：ＪＢ Ｐ．，＄ 　　　　；开关 Ｋ 未合上，等待
ＳＥＴＢ Ｐ． ；并行输入数据
ＣＬＲ Ｐ． ；开始串行移位
ＭＯＶ ＳＣＯＮ，＃Ｈ ；串行口模式 并启动接收
ＪＮＢ ＲＩ，＄ ；查询 ＲＩ
ＣＬＲ ＲＩ ；查询结束，清 ＲＩ
ＭＯＶ Ａ，ＳＢＵＦ ；输入数据
 ；根据 Ａ 处理不同任务
ＳＪＭＰ ＳＴＡＲＴ ；准备下一次接收
【例 】 利用串行口进行双机通信。
如图 ． 所示是双机通信系统。要求将甲机 芯片内 ＲＡＭ 中的 Ｈ～ＦＨ 的
数据串行发送到乙机。甲机工作于模式，ＴＢ为奇偶校验位；乙机用于接收串行数据，工
作于模式 ，并对奇偶校验位进行校验，接收数据存于 Ｈ～ＦＨ 中。
图 ． 双机通信系统
　　第 章 ＭＣＳ 单片机内部定时器／计数器及串行接口　　
　　程序清单如下：
甲机发送（采用查询方式）：
　　　　　　　ＭＯＶ ＳＣＯＮ，＃Ｈ　　　；设置工作方式
ＭＯＶ ＰＣＯＮ，＃ ；置ＳＭＯＤ＝，波特率不加倍
ＭＯＶ Ｒ，＃Ｈ ；数据区地址指针
ＭＯＶ Ｒ，＃Ｈ ；数据长度
　　ＬＯＯＰ： ＭＯＶ Ａ，＠Ｒ ；取发送数据
ＭＯＶ Ｃ，Ｐ ；奇偶位送 ＴＢ
ＭＯＶ ＴＢ，Ｃ
ＭＯＶ ＳＢＵＦ，Ａ ；送串口并开始发送数据
　　ＷＡＩＴ： ＪＢＣ ＴＩ，ＮＥＸＴ ；检测是否发送结束并清 ＴＩ
ＳＪＭＰ ＷＡＩＴ
　　ＮＥＸＴ： ＩＮＣ Ｒ ；修改发送数据地址指针
ＤＪＮＺ Ｒ，ＬＯＯＰ
ＲＥＴ
乙机接收（查询方式）：
ＭＯＶ ＳＣＯＮ，＃Ｈ ；操作模式，并允许接收
ＭＯＶ ＰＣＯＮ，＃Ｈ ；置ＳＭＯＤ＝
ＭＯＶ ＲＯ，＃Ｈ ；置数据区地址指针
ＭＯＶ Ｒ，＃Ｈ ；等待接收数据长度
　　ＬＯＯＰ： ＪＢＣ ＲＩ，ＲＥＡＤ ；等待接收数据并清 ＲＩ
ＳＪＭＰＬＯＯＰ
　　ＲＥＡＤ： ＭＯＶ Ａ，ＳＢＵＦ ；读一帧数据
ＭＯＶ Ｃ，Ｐ
ＪＮＣ ＬＰ ；Ｃ不为 转 ＬＰ
ＪＮＢ ＲＢ，ＥＲＲ ；ＲＢ＝，即 ＲＢ不为 Ｐ转 ＥＲＲ
ＡＪＭＰＬＰ
　　ＬＰ： ＪＢ ＲＢ，ＥＲＲ ；ＲＢ＝，即 ＲＢ不为 Ｐ转 ＥＲＲ
　　ＬＰ： ＭＯＶ ＠Ｒ，Ａ ；ＲＢ＝Ｐ，接收一帧数据
ＩＮＣ Ｒ
ＤＪＮＺ Ｒ，ＬＯＯＰ
ＲＥＴ
　　ＥＲＲ： … ；出错处理程序
…
习 题 与 思 考 题
．单片机内设有几个可编程的定时器／计数器？它们有几种工作方式，如何选择
和设定？作为定时器或计数器应用时，它们的波特率各为多少？
　　单片机原理及接口技术　　
．定时器／计数器作定时器用时，其定时时间与哪些因素有关？作计数器用时，对外
界计数频率有何限制？
．单片机的晶振频率为 ＭＨｚ，若只使用 Ｔ 产生 μｓ定时，可以选择哪几种定
时方式？分别写出定时器的方式控制字和计数初值。
．某一 单片机系统，晶振频率为 ＭＨｚ，现要从单片机的 Ｐ． 引脚输出一个
连续的 Ｈｚ方波信号，请编写程序。
．某单片机系统，时钟频率为 ＭＨｚ，定时器／计数器 Ｔ 用于 ｍｓ定时，Ｔ 用
于 次计数，两者均要求重复工作，问：
（）外部计数脉冲应从何引脚输入？
（）试编写达到上述要求的程序。
（）利用定时器／计数器 Ｔ、Ｔ 编写延时 ｓ的程序。
．为什么 Ｔ用作串行波特率发生器时常用工作方式？若 Ｔ设置为方式，用作波
特率发生器，晶振频率为 ＭＨｚ，求可能产生的波特率的变化范围。
．怎样选择串行口的工作模式？ＲＥＮ 位的作用是什么？Ｔ和 ＲＩ位 何 时 置 ，何 时
清 ？
．试设计一个 单片机的双机通信系统，编程将 Ａ 机片内 ＲＡＭ 中 Ｈ～ＦＨ
的数据块通过串行口传送至 Ｂ机片内 ＲＡＭ 的Ｈ～ＦＨ 单元中。
．试述 ＭＣＳ 单片机的多机通信原理。
．试用 串行口扩充Ｉ／Ｏ 口，控制 个发光二极管发光，画出电路并编写显示
程序。
　　第 章 ＭＣＳ 单片机内部定时器／计数器及串行接口　　
第章
　　　　单片机系统扩展与接口技术
　　单片机在复杂的应用中，片内的资源往往不能满足实际需求，需要扩充较大的存储容
量和较多的Ｉ／Ｏ 接口。所谓系统扩展，一般有两项主要任务：
其一，是把系统所需 的 外 设 和 单 片 机 连 接 起 来，使单片机系统能与外界进行信息交
换。如通过键盘、Ａ／Ｄ转换器等外部设备向单片机送入数据、命令等有关信息，去控制单
片机运行；通过显示器、发光二极管、打印机等设备把单片机处理的结果送出来，向人们
提供各种信息或对外界设备提供控制信号，这项任务实际上就是单片机接口设计。
其二，是扩大单片机的存储容量。由于单片机芯片的结构、集成工艺等关系，单片机
内 ＲＯＭ、ＲＡＭ 等容量不可能很大，在使用中有时不够，需要在芯片外进行扩展。
因此，系统扩展和接口技术一般有以下几方面内容：
（）外部总线的扩展；
（）外部存储器的扩展；
（）输入／输出接口的扩展；
（）管理功能部件的扩展（如定时器／计数器、键盘／显示器等）；
（）Ａ／Ｄ 和 Ｄ／Ａ 接口技术。
． 外部总线的扩展
一、外部总线的扩展
ＭＣＳ 芯片没有对外专用的地址总线和数据总线，那么在进行对外扩展存储器或
Ｉ／Ｏ 接口时，首先需要扩展对外总线。通过 ＭＣＳ 引脚 ＡＬＥ可实现对外总线扩展。在
ＡＬＥ为有效高电平期间，Ｐ 口上输出 Ａ～Ａ，因而只需在 ＣＰＵ 片外扩展一片地址锁存
器，用 ＡＬＥ的有效高电平边沿作锁存信号，即可将 Ｐ 口上的地址信息锁存，直到 ＡＬＥ
再次有效。在 ＡＬＥ 无效期间 Ｐ 口传送数据，即作数据总线口。这样就可将 Ｐ 口的地址
线和数据线分开。图 ． 为 ＭＣＳ 扩展的外部三总线示意图。
　　单片机原理及接口技术　　
图 ． ＭＣＳ 外部三总线示意图
　　通常用作单片机地址锁存器的芯片有ＬＳ、ＬＳ、ＬＳ、 等，图 ．
的（ａ）、（ｂ）和（ｃ）给出了ＬＳ、和ＬＳ的引脚，以及它们用做地址锁存器的
接法。
图 ． 地址锁存器的引脚和接口
ＬＳ和是带三态输 出 的位 锁 存 器，两者的结构和用法类似。以ＬＳ
为例，当三态端 ＯＥ有效，使能端 Ｇ 为高电平时，输出跟随输入变化；当 Ｇ 端由高变低时，
输出端位信息被锁存，直到 Ｇ 端再次有效。
ＬＳ为 Ｄ 触发器，当时钟上升沿到来时，将 Ｄ 端输入的数据锁存。作为地址锁
存器使用时，可将 ＡＬＥ反相接ＬＳ的 ＣＬＫ 端，ＣＬＫ 端接＋Ｖ。
二、总线驱动
在单片机应用系统中，扩展的三总线上挂接很多负载，如存储器、并行接口、Ａ／Ｄ 接
口、显示接口等，但总线接口的负载能力有限，因此常常需要通过连接总线驱动器进行总
线驱动。
总线驱动器对于单片机的Ｉ／Ｏ 口只相当于增加了一个 ＴＴＬ负载，因此驱动器除了对
后级电路驱动外，还能对负载的波动变化起隔离作用。
　　第 章 单片机系统扩展与接口技术　　
在对 ＴＴＬ 负载驱动时，只需考虑驱动电流的大小；在对 ＭＯＳ负载驱动时，ＭＯＳ负
载的输入电流很小，更多地要考虑对分布电容的电流驱动。
．常用的总线驱动器
系统总线中地址总线和控制总线是单向的，因此驱动器可以选用单向的，如ＬＳ。
ＬＳ还带有三态控制，能实现总线缓冲和隔离。
系统中的数据总线是双向的，其驱动器也要选用双向的，如ＬＳ。ＬＳ 也是
三态的，有一个 方 向 控 制 端 ＤＩＲ，ＤＩＲ＝时 输 出（Ａｎ→Ｂｎ），ＤＩＲ＝时 输 入（Ａｎ←Ｂｎ）。
ＬＳ、ＬＳ的引脚见图 ．。
图 ． 总线驱动器芯片管脚
（ａ）单向驱动器；（ｂ）双向驱动器
．总线驱动器的接口
图 ． 给出了总线驱动器ＬＳ和ＬＳ与管脚间的接口方法。
图 ． 与总线驱动器的接口
（ａ）Ｐ口的驱动；（ｂ）Ｐ口的驱动
由于Ｐ口始终输出地址高位，接口时ＬＳ的三态控制端Ｇ 和Ｇ 接地，Ｐ口
与驱动器输入线对应相连。
Ｐ口与ＬＳ输入线相连，珡Ｇ 端接地，保证数据线畅通。的 ＲＤ和 ＰＳＥＮ相与
后接 ＤＩＲ，使得 ＲＤ或 ＰＳＥＮ有效时，ＬＳ输入，其它时间处于输出状态。
　　单片机原理及接口技术　　
． 外部存储器的扩展
ＭＣＳ 系列单片机具有ＫＢ的程序存储空间，其中、片内有ＫＢ的
程序存储器，片内无程序存储器。当采用、型单片机而程序超过ＫＢ，或
采用单片机时，就需对程序存储器进行外部扩展。
ＭＣＳ 系列单片机的数据存储器与程序存储器的地址空间相互独立，其片外数据
存储器的空间也是ＫＢ，如果片内的数据存储器（仅Ｂ）不够用时，则需进行数据存储
器的外部扩展。
．． 外部程序存储器的扩展
．外部程序存储器的扩展原理及时序
ＭＣＳ 单片机扩展外部程序存储器的硬件电路如图 ．所示。
图 ． ＭＣＳ 单片机程序存储器的扩展原理
ＭＣＳ 单片机访问外部程序存储器所使用的控制信号有：ＡＬＥ（低位地址锁存控
制）和 ＰＳＥＮ（外部程序存储器“读取”控制）。
在外部存储器取指期间，Ｐ 口和 Ｐ口输出地址码（ＰＣＬ、ＰＣＨ），其中 Ｐ 口信号由
ＡＬＥ 选通进入地址锁存器后，变成高阻态等待从程序存储器读出指令码。访问外部存储器
的时序参见第 章图 ．。
从图中可以 看 出，ＭＣＳ 的 ＣＰＵ 在 一 个 机 器 周 期 内，ＡＬＥ 上出现两个正脉 冲，
ＰＳＥＮ出现两个负脉冲，说明 ＣＰＵ 可以两次访问外部程序存储器，再之单片机指令系统中
又有很多双字节单周期指令，使得程序的执行速度大大提高。
外部程序存储器可选用 ＥＰＲＯＭ、Ｅ
ＰＲＯＭ、ＰＡＧＥＤＥＰＲＯＭ 和 ＫＥＰＲＯＭ 等。
．ＥＰＲＯＭ 扩展电路
紫外线擦除电可编程只读存储器 ＥＰＲＯＭ，典型产品有Ｉｎｔｅｌ公司的系列芯片（Ｋ
× 位）、Ａ（Ｋ× 位）、Ａ（Ｋ× 位）、Ａ（Ｋ× 位）、（Ｋ×
位）和（Ｋ× 位）等，在这些芯片上均设有一个玻璃口，在紫外线下照射分钟
左右，存储器中的各位信息均变为 。以后通过编程器可将程序固化到这些芯片中。
　　第 章 单片机系统扩展与接口技术　　
以下介绍ＥＰＲＯＭ。的存储容量为 Ｋ× 位，单一＋Ｖ 供电，运行时的
最大功耗为 ｍＷ，维持功耗为ｍＷ，读出时间最大为ｎｓ。为线双列直
插式封装，其引脚如图 ． 所示。
有五种工作方式，见表 ．。
图 ． 的引脚图
　 　 表 ． 工作方式选择
方式 ＣＥ ＯＥ ＶＰＰ ＶＣＣ Ｉ／Ｏ～Ｉ／Ｏ
读 Ｌ Ｌ Ｖ Ｖ 输出（在线）
维持 Ｈ Ｘ Ｖ Ｖ 高阻
编程 Ｈ Ｈ Ｖ Ｖ 输入（离线）
编程校验 Ｌ Ｌ Ｖ Ｖ 输出
编程禁止 Ｌ Ｈ Ｖ Ｖ 高阻
与接口主要解决两个问题：一是硬件连接问题，二是根据实际连线确定芯
片地址。硬件接口见图 ．。
图 ． 与的连接图
　　单片机原理及接口技术　　
由图 ．可确定芯片的地址范围。方法是 Ａ～Ａ 从全开始，然后从最低位
开始依次加 ，最后变为全，相当于＝个单元地址依次选通，称为字选。即
　　Ｐ．～Ｐ．　　Ｐ．～Ｐ．　　Ｐ．～Ｐ．　　地址范围
　　Ａ～Ａ Ａ～Ａ Ａ～Ａ
　　 … … … Ｈ（首地址）
　　 … … … ＦＦＨ（末地址）
．Ｅ
ＰＲＯＭＡ的扩展
Ｅ
ＰＲＯＭ 电擦除电可编程只读存储器是近年来被广泛应用的一种新产品。其优点是
能使ＣＰＵ 在线修改其中的数据，并可在断电情况下保存数据，集ＥＰＲＯＭ 和ＲＡＭ 功能于
一体。
ＩｎｔｅｌＡ 是Ｋ×位Ｅ
ＰＲＯＭ，单一＋Ｖ 供电，最大工作电流为ｍＡ，维持
电流ｍＡ，其脚的管脚及原理框图见图．。由于片内设有编程所需的高压脉冲产生
电路，因此无需外加编程电源和写入脉冲。
图 ． Ａ 管脚及原理框图
（ａ）管脚；（ｂ）原理框图
Ａ 有 种工作方式，如表 ． 所示。
表 ． Ａ 工作方式
方　　式 控　　制　　脚
ＣＥ ＯＥ ＷＥ Ｉ／Ｏ～Ｉ／Ｏ
读出 Ｌ Ｌ Ｈ 输出信息
写入 Ｌ Ｈ Ｌ 数据输出
维持 Ｈ Ｘ Ｘ 高　　阻
禁止写 Ｘ Ｌ Ｘ —
禁止写 Ｘ Ｘ Ｈ —
　　第 章 单片机系统扩展与接口技术　　
～
～
～
　　（）维持和读出方式：Ａ 的维持和读出方式与普通 ＥＰＲＯＭ 完全相同。
（）写入方式：Ａ 提供了两种数据写入操作方式，即字节写入和页面写入。
（）数据查询方式：数据查询方式是指用软件来检测写操作中的“页存储”周期是否完成。
在“页存储”期间，如进行写操作，读出的是最后写入的字节，若芯片的转储工作未完成，则读
出数据的最高位是原来写入字节最高位的反码，据此，ＣＰＵ 可判断芯片的编程是否结束。
Ａ 与的接口电路如图 ． 所示。
图 ． Ａ 与的接口电路
．． 外部数据存储器的扩展
单片机内部仅有个字节 ＲＡＭ 存储器，而 ＣＰＵ 对内部的 ＲＡＭ 具有丰富的
操作指令。如在实时数据采集和处理时，仅靠片内的 ＲＡＭ 是远远不够的，因而必须扩展
外部数据存储器。常用的数据存储器有静态 ＲＡＭ 和动态 ＲＡＭ 两种，下面主要讨论静态
ＲＡＭ 与 ＭＣＳ 的接口。
．外部数据存储器的扩展方法及时序
单片机扩展外部 ＲＡＭ 的原理图如图 ．所示，数据存储器只使用 ＷＲ、ＲＤ扩展线
而不用 ＰＳＥＮ。因此，数据存储器与程序存储器地址可完全重叠，均为Ｈ～ＦＦＦＦＨ，
但数据存储器与Ｉ／Ｏ 口及外围设备是统一编址的，即任何扩展的Ｉ／Ｏ 口以及外围设备均占
用数据存储器的地址。
　　单片机原理及接口技术　　
图 ． ＭＣＳ 数据存储器的扩展示意图
ＭＣＳ 单片机读／写外部数据存储器的时序如图．、．所示。在图．的外部
ＲＡＭ 读周期中，Ｐ口输出高位地址，Ｐ口分时传送低位地址及数据。ＡＬＥ的下降沿
将低位地址打入地址锁存器后，Ｐ 口变为输入方式，ＲＤ有效选通外部 ＲＡＭ，相应存储
单元的内容送到 Ｐ 口上，由 ＣＰＵ 读入累加器。
外部 ＲＡＭ 写操作时，ＡＬＥ下降为低电平后，ＷＲ才有效，Ｐ 口上出现的数据写入相
应的 ＲＡＭ 单元。
．静态 ＲＡＭ 扩展
单片机应用系统中，静态 ＲＡＭ 最为常用，因为这种存储器无需考虑刷新问题。
但与动态 ＲＡＭ 相比，需要消耗较大的功率，价格也较高。下面以静态为例，介绍静
态 ＲＡＭ 的扩展。
图 ． 管脚图
是Ｋ× 位的静态随机存储器芯片，采用 ＣＭＯＳ
工艺制造，单一＋Ｖ 供电，额定功耗为ｍＷ，典型存取
时间为ｎｓ，为 线双列直插式封装，管脚见 图 ．。
各管脚含义如下：
Ａ～Ａ：条地址线；
Ｉ／Ｏ～Ｉ／Ｏ：双向数据线；
ＣＥ：片选信号线；
ＣＥ：片选信号线 ；
ＯＥ：输出允许信号；
ＷＥ：写信号。
的工作方式有 种，见表 ．。
表 ． 的工作方式
ＷＥ ＣＥ ＣＥ ＯＥ 方 式 Ｄ～Ｄ
× × × 未选中 高阻抗
× × × 未选中 高阻抗
输出禁止 高阻抗
写 ＤＩＮ
读 ＤＯＵＴ
　　第 章 单片机系统扩展与接口技术　　
　　与的接口电路见图 ．。
图 ． 扩展 静态 ＲＡＭ
电路中的 Ａ～Ａ这条地址线与锁存器的输出及 Ｐ 口对应线相连，的
Ｄ～Ｄ 这条数据线与的 Ｐ 口对应相连，的 ＯＥ和 ＷＥ与的 ＲＤ和 ＷＲ
对应，ＣＥ接 Ｐ．，ＣＥ 接高电平。
按照这种片选方式，的ＫＢ地址范围不唯一（因为 ＡＡ可为任意值），Ｈ
～ＦＦＦＨ 是一种地址范围。当向该片Ｈ 单元写一个数据 ＤＡＴＡ 时，可用如下指令：
　　ＭＯＶ Ａ，＃ＤＡＴＡ
　　ＭＯＶ ＤＰＴＲ，＃Ｈ
　　ＭＯＶＸ ＠ＤＰＴＲ，Ａ
从ＦＦＦＨ 单元读一个数据时，可用如下指令：
　　ＭＯＶ ＤＰＴＲ，＃ＦＦＦＨ
　　ＭＯＶＸ Ａ，＠ＤＰＴＲ
．． 多片存储器芯片的扩展
上面讨论的是 扩展一片 ＥＰＲＯＭ 或 ＲＡＭ 的方法。在实际应用中，可能需要扩
　　单片机原理及接口技术　　
展多片 ＥＰＲＯＭ 或 ＲＯＭ。如果 Ａ 扩展 Ｋ× 位的 ＥＰＲＯＭ，就需 片 。当
ＣＰＵ 通过指令 ＭＯＶＣＡ，＠Ａ＋ＤＰＴＲ 发出读 ＥＰＲＯＭ 操作时，Ｐ、Ｐ 发出的地址信号
应能选择其中一片的一个存储单元，即 片 不应该同时被选中，这就是所谓的片选。
片选方法有两种：线选法和地址译码法。
．线选法寻址
线选法是用 Ｐ、Ｐ 口低位地址线对每个芯片内的同一存储单元进行寻址，称为字选。
所需地址线由每片的单元数决定，对于 ＫＢ容量芯片需要 根地址线 Ａ～Ａ，然后将
余下的高位地址线 分 别 接 到 各 存 储 芯 片 的 片 选 端 ＣＥ。图 ． 是 用 片 组 成 的
Ｋ× 位的 ＥＰＲＯＭ。
图 ． 用线选法实现片选
各芯片的地址范围如下：
　　　　芯片　　　片选　　　　　字选　　　地址范围
　　　　　　Ａ Ａ Ａ　　Ａ～Ａ　　
　　＃ … ＣＨ（首地址）
… ＤＦＦＦＨ（末地址）
　　＃ … ＡＨ（首地址）
… ＢＦＦＦＨ（末地址）
　　＃ … Ｈ（首地址）
… ＦＦＦＨ（末地址）
线选法的优点是，硬件简单，不需地址译码器，用于芯片不太多的情况；缺点是各存
储器芯片之间的地址不连续，给程序设计带来不便。
．译码法寻址
译码法寻址就是利用地址译码器对系统的片外高位地址进行译码，以其译码输出作为
　　第 章 单片机系统扩展与接口技术　　
～
～
～
～
～
～
～
～
～
存储器芯片的片选信号，将地址划分为连续的地址空间块，避免了地址的间断。
译码法仍用低位地址线对每片内的存储单元进行寻址，而高位地址线经过译码器译码
后输出作为各芯片的片选信号。常用的地址译码器是 ／ 译码器 ＬＳ。
译码法又分为完全译码和部分译码两种。
（）完全译码。地址译码器使用了全部地址线，地址与存储单元一一对应。
（）部分译码。地址译码器仅使用了部分地址，地址与存储单元不是一一对应。部分
译码会大量浪费存储单元，对于要求存储器容量较大的微机系统，一般不采用。但对于单
片机系统来说，由于实际需要的存储容量不大，采用部分译码器可简化译码电路。
【例】 要 求 用 芯 片 扩 展 的片外程序存储器空间，分配的地址范围为
Ｈ～ＦＦＦＨ。
本例采用完全译码方法。
（）确定片数。
因Ｈ ～ ＦＦＦＨ 的存储空间为ＫＢ，则
所需芯片数＝实际要求的存储容量
单个芯片的存储容量＝ＫＢ
ＫＢ＝ （片）
（）分配地址范围。
　　　　　　Ａ Ａ Ａ　　Ａ… Ａ　　地址范围
　　 ＃ … Ｈ
… ＦＦＦＨ
　　 ＃ … Ｈ
… ＦＦＦＨ
（）存储器扩展连接如图 ． 所示。
图 ． 采用地址译码器扩展存储器的连接图
． 输入／输出接口的扩展
ＭＣＳ 单片机本身提供给用户使用的输入、输出线并不多，只有Ｐ和部分 Ｐ线。
　　单片机原理及接口技术　　
～
～
～
～
因此，单片机应用系统中都不可避免地要进行Ｉ／Ｏ 扩展。
．． Ａ可编程并行Ｉ／Ｏ接口
Ａ 具有个位并行Ｉ／Ｏ 口，称为ＰＡ 口、ＰＢ口和ＰＣ口。其中ＰＣ口又分为高
位和低 位，通过控制字设定可以选择三种工作方式：① 基本输入／输出；② 选通输入／输
出；③ ＰＡ 口为双向总线。
．Ａ的内部结构和引脚
Ａ 的内部结构和引脚如图 ． 所示。
图 ． Ａ 内部结构和引脚
（ａ）内部结构；（ｂ）引脚
Ａ 内部结构包 括 三 个 并 行 数 据 输 入／输 出 端 口，两个工作方式控制电路，一 个
读／写控制电路和 位总线缓冲器。
（）端口 Ａ、Ｂ、Ｃ。
Ａ 口：是一个位数据输出锁存器／缓冲器和一个位数据输入锁存器。
Ｂ口：是一个位数据输出锁存器／缓冲器和一个位数据输入缓冲器。
Ｃ口：是一个位数据输出锁存器／缓冲器和一个位数据输入缓冲器。
通常，Ａ 口、Ｂ口作为数据输入／输出端口，Ｃ口作为控制／状态信息端口。Ｃ口内部又
分为两个 位端口，每个端口有一个位锁存器，分别与 Ａ 口和Ｂ口配合使用，作为控制
信号输出或状态信息输入端口。
（）工作方式控制。工作方式控制电路有两个，一个是 Ａ 组控制电路，另一个是 Ｂ组
控制电路。这两组控制电路共有一个控制命令寄存器，用 来 接 收 中 央 处 理 器 发 来 的 控
　　第 章 单片机系统扩展与接口技术　　
制字。
Ａ 组控制电路用来控制 Ａ 口和 Ｃ口的上半部分（ＰＣ～ＰＣ）。Ｂ组控制电路用来控制
Ｂ口和 Ｃ口的下半部分（ＰＣ～ＰＣ）。
（）总线数据缓冲器。总线数据缓冲器是一个三态双向位缓冲器，作为与系统
总线之间的接口，用来传送数据、指令、控制命令以及外部状态信息。
（）读／写控制逻 辑 电 路。读／写控制逻辑电路接收 ＣＰＵ 发 来 的 控 制 信 号ＲＤ、ＷＲ、
ＲＥＳＥＴ、地址信号 Ａ、Ａ等，然后根据控制信号的要求，将端口数据读出，送往 ＣＰＵ 或
将 ＣＰＵ 送来的数据写入端口。
各端口的工作状态如表 ． 所示。
表 ． Ａ 接口工作状态选择表
端口地址选择 操作选择
ＣＳ Ａ Ａ 所选端口 ＲＤ ＷＲ ＣＰＵ 操作功能
（选中）
Ａ 口 读 Ａ 口内容
Ｂ口 读 Ｂ口内容
Ｃ口 读 Ｃ口内容
Ａ 口 写入 Ａ 口
Ｂ口 写入 Ｂ口
Ｃ口 写入 Ｃ口
控制寄存器 写入控制字
× × 未选中 × ×
　　Ａ 共有 个引脚，采用双列直插式封装，如图 ．所示，功能如下：
Ｄ～Ｄ：三态双向数据线； ＰＡ～ＰＡ：Ａ 口输入／输出线；
ＣＳ：内选信号线； ＰＢ～ＰＢ：Ｂ口输入／输出线；
ＲＤ：读信号线； ＰＣ～ＰＣ：Ｃ口线；
ＷＲ：写信号线； Ａ，Ａ：地址线；
ＶＣＣ：＋Ｖ 电源； ＧＮＤ：地线；
ＲＥＳＥＴ：复位信号线。
．工作方式选择
Ａ 的工作方式由用户通过 ＣＰＵ 对方式控制字的设定进行选择，三种方式的硬件
示意图见图 ．。
（）方式：基本输入／输出方式。这种方式不需选通信号。ＰＡ，ＰＢ和ＰＣ中任一端口
都可以通过方式控制字设定为输入或输出。
（）方式 ：选通输入／输出方式。共有 个口，被分为两组。Ａ 组包括 Ａ 口和 ＰＣ～
ＰＣ，Ａ 口可由编程设定为输入或输出，ＰＣ～ＰＣ作为输入／输出操作的选通信号和应答
信号。Ｂ 组 包 括 Ｂ 口 和 ＰＣ ～ＰＣ，这 时 Ｃ 口 作 为 Ａ 和 外 设 或 ＣＰＵ 之 间 的 控 制 联
络线。
　　单片机原理及接口技术　　
图 ． Ａ 三种工作方式示意图
（ａ）方式 ；（ｂ）方式 ；（ｃ）方式
　　（）方式 ：双向传送方式。只有 Ａ 口有方式 ，此时，Ａ 口为位双向传送数据口，
Ｃ口的高 位ＰＣ～ＰＣ 用来作为指定 Ａ 口输入／输出的控制联络线。Ｃ口在设定为方式
或方式时，各引脚分配的固定功能如表 ． 所示。
表 ． Ａ的 Ｃ口联络控制信号线
Ｃ口的位
方式（Ａ 口、Ｂ口）
输　　入 输　　出
方式 （仅用于 Ａ 口）
输　　入 输　　出
ＰＣ ＩＮＴＲＢ ＩＮＴＲＢ Ｉ／Ｏ Ｉ／Ｏ
ＰＣ ＩＢＦＢ ＯＢＦＢ Ｉ／Ｏ Ｉ／Ｏ
ＰＣ ＳＴＢＢ ＡＣＫＢ Ｉ／Ｏ Ｉ／Ｏ
ＰＣ ＩＮＴＲＡ ＩＮＴＲＡ ＩＮＴＲＡ ＩＮＴＲＡ
ＰＣ ＳＴＢＡ Ｉ／Ｏ ＳＴＢＡ ×
ＰＣ ＩＢＦＡ Ｉ／Ｏ ＩＢＦＡ ×
ＰＣ Ｉ／Ｏ ＡＣＫＡ × ＡＣＫＡ
ＰＣ Ｉ／Ｏ ＯＢＦＡ × ＯＢＦＡ
　　第 章 单片机系统扩展与接口技术　　
　　表 ． 中Ｉ／Ｏ 表示 Ｃ口未用的这些线可以设定为一般的输入／输出线。表中各联络线
用于输入时含义如下：
（）ＳＴＢ（Ｓｔｒｏｂｅ）———选通信号输入端，低电平有效。
（）ＩＢＦ（ＩｎｐｕｔＢｕｆｆｅｒＦｕｌｌ）———输入缓冲器满高电平有效。
（）ＩＮＴＲ（ＩｎｔｅｒｒｕｐｔＲｅｑｕｅｓｔ）———中断请求信号，高电平有效。
在 ＳＴＢ＝ＩＢＦ＝时，Ａ 会向 ＣＰＵ 发出中断请求信号ＩＮＴＲ＝。在 ＣＰＵ 响应中
断后读取缓冲器的收据时，由 ＲＤ的下降沿将ＩＮＴＲ清 ，通知外设再一次输入数据。
表 ． 中用于输出的联络信号，含义如下：
（）ＡＣＫ（Ａｃｋｎｏｗｌｅｄｇｅ）———外设响应输入信号，低电平有效。当 ＡＣＫ＝ 时，表明
外设已取走并且处理完 ＣＰＵ 通过Ａ 输出的数据。
（）ＯＢＦ（ＯｕｔｐｕｔＢｕｆｆｅｒＦｕｌｌ）———输出缓冲器满，低电平有效。当 ＯＢＦ＝ 时，表明
ＣＰＵ 已经把数据写入 Ａ 指定的端口，通知外设可以把数据取走。
（）ＩＮＴＲ———中断请求输出信号，高电平有效。当ＩＮＴＲ＝时，向 ＣＰＵ 申请中断，
要求 ＣＰＵ 继续输出数据，ＣＰＵ 在中断程序中把数据写入Ａ。
．Ａ 的控制字
Ａ 共有两个控制字，用来选择工作方式或对 Ｃ口控制。
）方式控制字
Ａ 的 个端口工作在什么方式，是输入还是输出，都是由工作方式控制字设定
的，控制字格式如图 ． 所示。
图 ． Ａ 的方式控制字
另外，在用户选择方式或方式时，对Ｃ口的定义无论是输入还是输出方式，都不影
响Ｃ口作为控制联络线使用的各位功能，但未用于控制联络线的各位，仍用 Ｄ、Ｄ 定义。
　　单片机原理及接口技术　　
）端口 Ｃ置位／复位控制字
由于 Ｃ口常作为联络控制位使用，应使 Ｃ 口各数位用置位／复位控制字来单独设置，
以实现用户要求的控制功能，格式如图 ． 所示。
图 ． Ａ 端口 Ｃ置位／复位控制字
由图可见，对 Ｃ口的某一位 ＰＣｉ，进行置位或复位操作由 Ｄ设定，选择 Ｃ口的哪一位
进行操作则是由 ＤＤＤ 来确定的。
Ｄ＝是置位／复位控制字的特征位，由于Ａ 中两个控制寄存器共用一个端口地址，
故Ａ根据控制字的 Ｄ来区别是方式控制寄存器，还是Ｃ口置位／复位控制寄存器。
【例 】 要求 Ａ 口工作在方式输入，Ｂ口为方式输出，Ｃ口高位ＰＣ～ＰＣ为输
入，Ｃ口低位 ＰＣ～ＰＣ 为输出。实现上述要求的初始化程序为：
　　ＭＯＶ Ｒ，＃Ｈ　　　　；Ｈ 为 Ａ 控制寄存器地址
　　ＭＯＶ Ａ，＃ＣＨ ；Ａ 工作方式字为 ＣＨ
　　ＭＯＶＸ ＠Ｒ，Ａ ；方式字送入 Ａ 控制口
．Ａ 和 单片机的硬件接口
图 ． 所示为与 Ａ 的硬件接口电路。
图 ． Ａ 与单片机接口
设 Ａ 的 Ａ、Ｂ、Ｃ口和控制寄存器地址依次为Ｈ、Ｈ、Ｈ 和Ｈ。如果用户
需要将 Ｃ口的 ＰＣ置 ，ＰＣ置 ，可编程如下：
　　ＭＯＶ Ｒ，＃Ｈ ；Ａ 控制口地址
　　第 章 单片机系统扩展与接口技术　　
　　ＭＯＶ Ａ，＃Ｈ ；将 ＰＣ置 控制字
　　ＭＯＶＸ ＠Ｒ，Ａ ；置 ＰＣ＝
　　ＭＯＶ Ａ，＃ＡＨ ；将 ＰＣ置 控制字
　　ＭＯＶＸ ＠Ｒ，Ａ ；置 ＰＣ＝
注意：第二次写入的ＡＨ 置 ＰＣ＝ 的操作不影响第一次写入的置 ＰＣ＝ 的状态。
【例 】 图．是扩展Ａ 与打印机接口的电路。Ａ 的片选线为Ｐ．，
打印机与 采 用 查 询 方 式 交 换 数 据。打 印 机 的 状 态 信 号 输 入 给 ＰＣ，打 印 机 忙 时
ＢＵＳＹ＝，打印机的数据输入采用选通控制，当 ＳＴＢ上出现负跳变时数据被输入，要求编
写向打印机输出 个数据的程序。设 Ａ 的 Ａ、Ｂ、Ｃ 和控制寄存器的口地址分别为
ＣＨ、ＤＨ、ＥＨ 和ＦＨ。
图 ． 扩展打印机接口Ａ
Ａ 的方式中 ＯＢＦ为低电平有效，而打印机 ＳＴＢ要求下降沿选通。所以 Ａ
采用方式，由 ＰＣ模拟 产 生 ＳＴＢ信 号。因 ＰＣ 输 入，ＰＣ 输 出，则方式选择命令字 为：
Ｂ＝ＥＨ。
自内部 ＲＡＭＨ 单元开始向打印机输出个数据的程序如下：
　　　　　ＭＯＶ Ｒ，＃ＦＨ　　　　；Ｒ 指向控制口
ＭＯＶ Ａ，＃ＥＨ ；方式控制字为ＥＨ
ＭＯＶ ＠Ｒ ，Ａ ；送方式控制字
ＭＯＶ Ｒ，＃Ｈ ；送内部 ＲＡＭ 数据块首地址至指针 Ｒ
ＭＯＶ Ｒ，＃Ｈ ；置数据块长度
　　ＬＰ： ＭＯＶ Ｒ，＃ＥＨ ；Ｒ 指向 Ｃ口
　　ＬＰ： ＭＯＶＸ Ａ，＠Ｒ ；读 ＰＣ 连接 ＢＵＳＹ 状态
ＪＢ ＡＣＣ．，ＬＰ ；查询等待打印机
ＭＯＶ Ｒ，＃ＣＨ ；指向 Ａ 口
ＭＯＶ Ａ，＠Ｒ ；取 ＲＡＭ 数据
ＭＯＶＸ ＠Ｒ，Ａ ；数据输出到Ａ 口锁存
ＩＮＣ Ｒ ；ＲＡＭ 地址加
ＭＯＶ Ｒ，＃ＦＨ ；Ｒ 指向控制口
　　单片机原理及接口技术　　
ＭＯＶ Ａ，＃Ｈ ；ＰＣ复位控制字
ＭＯＶＸ ＠Ｒ，Ａ ；ＰＣ＝，产生 ＳＴＢ的下降沿
ＭＯＶ Ａ，＃Ｈ ；ＰＣ 置位控制字
ＭＯＶＸ ＠Ｒ，Ａ ；ＰＣ＝，产生 ＳＴＢ的上升沿
ＤＪＮＺ Ｒ，ＬＰ ；未完，则反复
．． 可编程并行Ｉ／Ｏ接口
芯片内具有个字节的ＲＡＭ，两个位、一个位的可编程Ｉ／Ｏ 口和一个
位的计数器，与 ＭＣＳ 接口简单，是单片机应用系统中广泛使用的芯片。
．的结构与引脚
的内部结构如图 ．（ｂ）所示，主要由下列三部分组成：
（）随机存储器部分：容量为 × 位的静态 ＲＡＭ。
（）Ｉ／Ｏ 接口部分：
ａ．端口 Ａ，可编程 位Ｉ／Ｏ 端口 ＰＡ～ＰＡ。
ｂ．端口 Ｂ，可编程 位Ｉ／Ｏ 端口 ＰＢ～ＰＢ。
ｃ．端口 Ｃ，可编程 位Ｉ／Ｏ 端口 ＰＣ～ＰＣ。
ｄ．命令寄存器。 位寄存器，只允许写入。
ｅ．状态寄存器。 位寄存器，只允许读入。
（）定时器／计数器部分：是一个位的二进制减法定时器／计数器。为脚双
列直插式封装芯片，见图 ．（ａ）。
图 ． 引脚及结构框图
　　第 章 单片机系统扩展与接口技术　　
　　 各引脚功能简介如下：
ＡＤ～ＡＤ 为地址／数据复用线。ＩＯ／珨Ｍ 为 ＲＡＭ 和Ｉ／Ｏ 口选择。ＣＥ为片选信号，ＡＬＥ
为地址锁存信号，下降沿有效。
ＲＤ为读信号线，ＷＲ为写信号线。ＲＥＳＥＴ 为复位信号，高电平有效。当 ＲＥＳＥＴ 端口
加上 μｓ左右宽的正脉冲时， 初始复位，将 个Ｉ／Ｏ 口均置为输入方式。
ＴＩＭＥＲＩＮ 为定时器输入，ＴＩＭＥＲＯＵＴ 是定时器输出，ＰＡ～ＰＡ 和 ＰＢ～ＰＢ 是 Ａ
口、Ｂ口的输入／输出线，ＰＣ～ＰＣ 是 Ｃ口的输入／输出或控制信号线。ＶＣＣ＝＋Ｖ 电源，
ＶＳＳ为接地端。
． 的 ＲＡＭ 和Ｉ／Ｏ口的编址
芯片中的 ＲＡＭ 和Ｉ／Ｏ 口均占用单片机系统片外 ＲＡＭ 的地址，其中高位地址
由 ＣＥ和ＩＯ／珨Ｍ 决定。当ＣＥ＝，且ＩＯ／珨Ｍ＝时，低位的Ｈ～ＦＦＨ 为 ＲＡＭ 的有效地
址；当 ＣＥ＝，且ＩＯ／珨Ｍ＝时，由低位地址中的末位（ＡＡＡ）来决定各个口的地址，
详见表 ．。
表 ． 端口地址表
Ａ Ａ Ａ Ａ Ａ Ａ Ａ Ａ 选中的口或寄存器
× × × × × 命令状态字寄存器
× × × × × Ａ 口
× × × × × Ｂ口
× × × × × Ｃ口
× × × × × 定时器低位寄存器
× × × × × 定时器高位和操作方式寄存器
．Ｉ／Ｏ的工作方式
Ｉ／Ｏ 的工作方式有两种：基本Ｉ／Ｏ 和选通Ｉ／Ｏ。
）基本Ｉ／Ｏ
基本Ｉ／Ｏ 为无条件传送，不需任何联络信号， 的 Ａ 口、Ｂ口、Ｃ口都可以工作于
该方式。
）选通Ｉ／Ｏ
选通Ｉ／Ｏ 为条件传送，传送的方式可用查询方式，也可用中断方式。 的 Ａ 口、Ｂ
口均可工作于此方式，这时需由 Ｃ口提供联络控制信号线。这些联络控制信号线有：
（）ＢＦ：Ｉ／Ｏ 缓冲器满标志，输出，高电平有效。
（）ＳＴＢ：选通信号，输入，低电平有效。
（）ＩＮＴＲ：中断请求信号，输入，低电平有效。
以上信号线对 Ａ 口和 Ｂ口均适用，分别称为 ＡＢＦ，ＡＳＴＢ，ＡＩＮＴＲ 和 ＢＢＦ、ＢＳＴＢ、
ＢＩＮＴＲ。它们都由 Ｃ口提供，如表 ． 所示。
　　单片机原理及接口技术　　
表 ． 的ＰＣ口线联络信号
方式
口位 作 ＰＡ 口联络信号 作 ＰＡ 和 ＰＢ口联络信号
ＰＣ ＡＩＮＴＲ ＡＩＮＴＲ
ＰＣ ＡＢＦ ＡＢＦ
ＰＣ ＡＳＴＢ ＡＳＴＢ
ＰＣ 输出 ＢＩＮＴＲ
ＰＣ 输出 ＢＢＦ
ＰＣ 输出 ＢＳＴＢ
．的命令／状态字
有一个命令／状态字寄存器，实际上这是两个不同的寄存器，分别存放命令字和
状态字。由于对命令寄存器只能进行写操作，对状态寄存器只能进行读操作，因此把它们
统一编址，合称命令／状态寄存器。
）命令字
命令字共 位，用于定义Ｉ／Ｏ 口及定时器的工作方式。命令字的格式如图．所示。
图 ． 的命令字格式
对 Ｃ口工作方式的说明：
ＤＤ＝（ＡＬＴ）：Ａ 口、Ｂ口为基本Ｉ／Ｏ，Ｃ口为输入。
ＤＤ＝（ＡＬＴ）：Ａ 口、Ｂ口为基本Ｉ／Ｏ，Ｃ口为输出。
ＤＤ＝（ＡＬＴ）：Ａ 口为选通Ｉ／Ｏ，Ｂ口为基本Ｉ／Ｏ，Ｃ口低 位为联络信号，高
位输出。
ＤＤ＝（ＡＬＴ）：Ａ 口、Ｂ口均为选通Ｉ／Ｏ，Ｃ口低位作 Ａ 口联络信号，高位作
Ｂ口联络信号。
对定时器运行控制位（ＴＭ，ＴＭ）的说明：
　　第 章 单片机系统扩展与接口技术　　
当 ＴＭＴＭ＝ 时，其操作为：当计数器未计数时，装入计数长度后，立即开始计
数；当计数器正在计数时，待计数器溢出后以新装入的计数长度和方式进行计数。
）状态字
状态字的格式如图 ． 所示。
图 ． 的状态字格式
． 的定时器／计数器
的定时器／计数器是一个位的 减 法 计 数 器，由 两 个位 寄 存 器 构 成，其 格 式
如下：
ＴＬ（Ｈ） Ｔ Ｔ Ｔ Ｔ Ｔ Ｔ Ｔ Ｔ
ＴＨ（Ｈ） Ｍ Ｍ Ｔ Ｔ Ｔ Ｔ Ｔ Ｔ
其中 Ｔ～Ｔ 为计数长度，可表示的长度范围为Ｈ～ＦＦＦＨ。ＭＭ用来设定定时
器的输出方式。 定时器方式及相应的输出波形如图 ． 所示。
图 ． 定时器方式及输出波形
　　单片机原理及接口技术　　
．的接口电路及应用
可以和 ＭＣＳ 直接相连，如图．所示。的 ＲＡＭ 和各端口地址如下：
ＲＡＭ 的地址：Ｈ～ＦＦＨ 　　　　　　命令口：Ｈ
Ａ 口：Ｈ 　　　Ｂ口：Ｈ Ｃ口：Ｈ
定时器低位：Ｈ 定时器高位：Ｈ
图 ． 与 ＭＣＳ 的接口
【例】 在图．所示的接口电路中，设 Ａ 口与Ｃ口为输入口，Ｂ口为输出口，均为
基本Ｉ／Ｏ。定时器为连续方波工作方式，对输入脉冲进行 分频。试编写 的初始化
程序。
命令字可选取为：ＰＡ＝，ＰＢ＝，ＰＣＰＣ＝，ＩＥＡ＝，ＩＥＢ＝，ＴＭＴＭ＝。即
命令字为Ｂ＝ＣＨ。
初始化程序：
　　ＭＯＶ ＯＰＴＲ，＃Ｈ　　；指向定时器的低 位
ＭＯＶ Ａ ，＃Ｈ ；设置定时器低 位的值
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；写入定时器低 位
ＩＮＣ ＤＰＴＲ ；指向定时器的高位
ＭＯＶ Ａ，＃Ｈ ；设置定时器的高 位及 位输出方式位的值
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；写入位的值
ＭＯＶ ＤＰＴＲ，＃Ｈ ；指向命令口
ＭＯＶ Ａ，＃ＣＨ ；取 的命令字
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；写入命令字
【例】 采用图．所示的电路，从的 Ａ 口输入数据，并进行判断：若不为，
则 将该数据存入的ＲＡＭ 中（从起始单元开始，数据总数不超过个），同时从Ｂ口
输出，并将 ＰＣ置“”；若为 ，则停止数据输入，同时将 ＰＣ 清“”，试编写程序。
程序如下：
　　　　　　ＭＯＶ ＤＰＴＲ，＃Ｈ　　　；指向命令口
ＭＯＶ Ａ，＃Ｈ ；设置命令字
　　第 章 单片机系统扩展与接口技术　　
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；写入命令字
ＭＯＶ Ｒ，＃Ｈ ；指向 的 ＲＡＭ 区首址
ＭＯＶ Ｒ，＃Ｈ ；数据总数为 个
　　ＬＰ： ＭＯＶ ＤＰＴＲ，＃Ｈ ；指向 Ａ 口
ＭＯＶＸ Ａ，＠ＤＰＴＲ ；从 Ａ 口读入数据
ＪＺ ＬＰ ；为 则转
ＭＯＶＸ ＠Ｒ，Ａ ；存入 ＲＡＭ 单元
ＩＮＣ Ｒ ；指向下一单元
ＩＮＣ ＤＰＴＲ ；指向 Ｂ口
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；Ｂ口输出
ＩＮＣ ＤＰＴＲ ；指向 Ｃ口
ＭＯＶＸ Ａ，＠ＤＰＴＲ ；Ｃ口读入
ＳＥＴＢ ＡＣＣ， ；使 ＰＣ＝
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；回送
ＤＪＮＺ Ｒ，ＬＰ ；未完则反复
　　ＬＰ： ＳＪＭＰ ＄ ；暂停
　　ＬＰ： ＭＯＶ ＤＰＴＲ，＃Ｈ ；指向 Ｃ口
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；回送
ＳＪＭＰ ＬＰ
． 管理功能部件的扩展
在单片机应用系统中，常常需要人机对话，因而功能开关、拨码器、键盘、显示器和打
印机等输入／输出设备就必不可少，本节介绍一些外部设备及它们与单片机的接口技术。
．． 键盘接口
键盘实际上是由排列成矩阵形式的一系列按键开关组成的，用 户 通 过 键 盘 可 以 向
ＣＰＵ 输入数据、地址和命令。
键盘按其结构形式可分为编码式键盘和非编码式键盘两类。
单片机系统中普遍使用非编码式键盘，这类键盘主要解决以下几个问题：
① 键的识别；
② 如何消除键的抖动；
③ 键的保护。
．非编码式键盘工作原理
非编码式键盘识别按键的方法有两种：一是行扫描法，二是线反转法。
）行扫描法
通过行线发出低电平信号，如果该行线所连接的键没有按下的话，则列线所接的端口
得到的是全“”信号，如果有键按下的话，则得到非全“”信号。
　　单片机原理及接口技术　　
为了防止双键或多键同时按下，往往从第 行一直扫描到最后行，若只发现个闭
合键，则为有效键，否则全部作废。
找到闭合键后，读入相应的键值，再转至相应的键处理程序。
）线反转法
线反转法也是识别闭合键的一种常用方法，该法比行扫描速度快，但在硬件上要求行
线与列线外接上拉电阻。
先将行线作为输出线，列线作为输入线，行线输出全“”信号，读入列线的值，然后将
行线和列线的输入、输出关系互换，并且将刚才读到的列线值从列线所接的端口输出，再
读取行线的输入值。那么在闭合键所在的行线上值必为。这样，当一个键被按下时，必定
可读到一对唯一的行列值。
．键盘接口电路
图． 是采用 接口芯片构成 × 键盘的接口电路，其中 Ａ 口为输出，作为行
线；Ｃ口为输入，作为列线。
图 ． 采用的键盘接口电路
下面的程序是用行扫描法进行键扫描的程序，其中 ＫＳ为判键闭合的子程序。有键闭
合时（Ａ）＝。ＤＩＲ为数码显示器扫描显示子程序，执行一遍的时间约ｍｓ。程序执行后，
若键闭合，键值存入 Ａ 中，键值的计算公式是：键值＝行号×＋列号；若无键闭合，则 Ａ
中存入标志 ＦＦＨ。
　　ＫＥＹ：ＬＣＡＬＬ ＫＳ　　　　　　　　；检查有无闭合键
ＪＮＺ ＬＫ ；（Ａ）＝，有键闭合则转
ＬＪＭＰ ＬＫ ；无闭合键则返回
ＬＫ： ＬＣＡＬＬ ＤＩＲ ；延时 ｍｓ
ＬＣＡＬＬ ＤＩＲ ；清抖
ＬＣＡＬＬ ＬＳ ；再检查有键闭合否
ＪＮＺ ＬＫ ；有键闭合则转
　　第 章 单片机系统扩展与接口技术　　
ＬＪＭＰ ＬＫ ；无键闭合则返回
ＬＫ： ＭＯＶ Ｒ，＃Ｈ ；行号初值送 Ｒ
ＭＯＶ Ｒ，＃ＦＥＨ ；行扫描初值送 Ｒ
ＬＫ： ＭＯＶ ＤＰＴＲ，＃Ｈ ；指向 口 Ａ
ＭＯＶ Ａ，Ｒ ；行扫描值送 Ａ
ＭＯＶＸ ＠ＤＯＴＲ，Ａ ；扫描 行
ＩＮＣ ＤＰＴＲ
ＩＮＣ ＤＰＴＲ ；指向 口 Ｃ
ＭＯＶＸ Ａ，＠ＤＰＴＲ ；读入列值
ＡＮＬ Ａ，＃ＦＨ ；保留低 位
ＭＯＶ Ｒ，Ａ ；暂存列值
ＣＪＮＺ Ａ，＃ＦＨ，ＬＫ ；列值非全“”则转
ＭＯＶ Ａ，Ｒ ；行扫描值送 Ａ
ＪＮＢ ＡＣＣ．，ＬＫ ；扫描至最后一行则转
ＲＬ Ａ ；未扫完，则移至下一行
ＭＯＶ Ｒ，Ａ ；行值存入 Ｒ 中
ＩＮＣ Ｒ ；行号加
ＳＪＭＰ ＬＫ ；转至扫描下一行
ＬＫ： ＭＯＶ Ａ，Ｒ ；行号送入 Ａ
ＡＤＤ Ａ，Ｒ ；行号×
ＭＯＶ Ｒ，Ａ
ＡＤＤ Ａ，Ｒ ；行号×
ＭＯＶ Ｒ，Ａ ；存入 Ｒ 中
ＭＯＶ Ａ，Ｒ ；列值送 Ａ
ＬＫ： ＲＲＣ Ａ ；右移一位
ＪＮＣ ＬＫ ；该位为 则转
ＩＮＣ Ｒ ；列号加
ＳＪＭＰ ＬＫ ；列号未判完则继续
ＬＫ： ＭＯＶ Ｈ，Ｒ ；存键值
ＬＫ： ＬＣＡＬＬ ＤＩＲ ；扫描一遍显示器
ＬＣＡＬＬ ＫＳ ；发扫描信号
ＪＮＺ ＬＫ ；键未释放等待
ＬＣＡＬＬ ＤＩＲ ；键已释放
ＬＣＡＬＬ ＤＩＲ ；延时 ｍｓ，清抖
ＭＯＶ Ａ，Ｈ ；键值存入 Ａ 中
ＫＮＤ： ＲＥＴ
ＬＫ： ＭＯＶ Ａ，＃ＦＦＨ ；无键标志 ＦＦＨ 存入 Ａ 中
ＲＥＴ
ＫＳ： ＭＯＶ ＤＰＴＲ，＃Ｈ ；判键子程序
　　单片机原理及接口技术　　
ＭＯＶ Ａ，＃Ｈ ；全扫描信号
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；发全扫描信号
ＩＮＣ ＤＰＴＲ
ＩＮＣ ＤＰＴＲ ；指向口 Ｃ
ＭＯＶＸ Ａ，＠ＤＰＴＲ ；读入列值
ＡＮＬ Ａ，＃ＦＨ ；保留低位
ＯＲＬ Ａ，＃ＦＨ ；高位取“”
ＣＰＬ Ａ ；取反，无键按下则全“”
ＲＥＴ
．． ＬＥＤ显示器接口
．ＬＥＤ显示器结构与原理
ＬＥＤ显示器由 条发光二极管组成显示字段，有的还带有一个小数点ｄｐ 。将 段发
光二极管阴极连在一起，称为共阴接法，当某个字段的阳极为高电平时，对应的字段就点
亮。共阳接法是将 ＬＥＤ的所有阳极并接后连到＋Ｖ 上，当某一字段的阴极为 时，对应
的字段就点亮。如图 ． 所示。
图 ． 段 ＬＥＤ数码显示器
点亮 ＬＥＤ显示器有静态和动态两种方法。所谓静态显示，就是显示某一字符时，相应
的发光二极管恒定的导通或截止，这种方式，每一显示位都需要一个 位输出口控制，占
用硬件较多，一般仅用于显示器位数较少的场合。
所谓动态显示，就是一位一位地轮流点亮各位显示器。对每一位显示器而言，每隔一
段时间点亮一次。显示位的亮度既跟导通电流有关，也 和 点 亮 时 间 与 间 隔 时 间 的 比 例 有
关。动态显示器因其硬件成本较低而常常采用。
为了显示字符，要为 ＬＥＤ显示器提供显示段码（或称字形代码），组成一个“”字形的
段，再加上 个小数点位，共计段，因此提供 ＬＥＤ显示器的显示段码为个字节。各
段码位的对应关系如下：
　　第 章 单片机系统扩展与接口技术　　
段码位 Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
显示位 ｄｐ ｇ ｆ ｅ ｄ ｃ ｂ ａ
　　用 ＬＥＤ显示器显示十六进制数和空白及 Ｐ的显示段码，如表 ． 所示。
表 ． 十六进制数及空白与Ｐ的显示段码
字 型 共阳极段码 共阴极段码 字 型 共阳极段码 共阴极段码
ＣＨ ＦＨ Ｈ ＦＨ
ＦＨ Ｈ Ａ Ｈ Ｈ
ＡＨ ＢＨ Ｂ Ｈ ＣＨ
ＢＨ ＦＨ Ｃ ＣＨ Ｈ
Ｈ Ｈ Ｄ ＡＨ ＥＨ
Ｈ ＤＨ Ｅ Ｈ Ｈ
Ｈ ＤＨ Ｆ Ｈ Ｈ
ＦＨ Ｈ 空白 ＦＦＨ Ｈ
Ｈ ＦＨ Ｐ ＣＨ Ｈ
．ＬＥＤ显示器接口电路
图． 为 位共阴显示器和 的接口逻辑。 的 Ａ 口作为扫描口，经反相驱
动器 Ｎ 接显示器公共极，Ｂ口作为段数据口，经同相驱动器 接显示器的各段。
图 ． 位动态显示器接口
设 ＲＡＭ 中有 个显示缓冲单元 Ｈ～ＥＨ，分别存放 位显示器的显示数据。
的 Ａ 口扫描输出总有一位为高电平， 的 Ｂ口输出相应位的显示数据的段数据，
　　单片机原理及接口技术　　
使某一位显示出一个字符，其余位为暗，依次改变 Ａ 口输出的高电平位及Ｂ口输出对应的
段数据， 位显示器就显示出缓冲器的显示字符。显示程序流程如图 ． 所示。
图 ． 显示子程序流程图
程序清单如下：
　　ＤＩＲ：　　ＭＯＶ Ｒ，＃Ｈ　　　；显示缓冲区首址送 Ｒ
ＭＯＶ Ｒ，＃Ｈ ；使显示器最右边位亮
ＭＯＶ Ａ，Ｒ
ＬＤ： ＭＯＶ ＤＰＴＲ，＃Ｈ ；扫描值送 ＰＡ 口
ＭＯＶＸ ＠ ＤＰＴＲ，Ａ
ＩＮＣ ＤＰＴＲ ；指向 ＰＢ口
ＭＯＶ Ａ，＠Ｒ ；取显示数据
ＡＤＤ Ａ，＃Ｈ ；加上偏移量
ＭＯＶＸ Ａ，＠Ａ＋ＰＣ ；取出字形
ＭＯＶＸ ＠ ＤＰＴＲ，Ａ ；送出显示
ＡＣＡＬＬ ＤＬ ；延时
ＩＮＣ Ｒ ；缓冲区地址加
ＭＯＶ Ａ，Ｒ ；
ＪＢ ＡＣＣ．，ＬＤ ；扫描到第 个显示位了吗？
　　第 章 单片机系统扩展与接口技术　　
ＲＬ Ａ ；没有，Ｒ 左环移一位，扫描下一个显示位
ＭＯＶ Ｒ，Ａ
ＡＪＭＰ ＬＤ
ＬＤ： ＲＥＴ
ＤＳＥＧ： ＤＢ ＦＨ，Ｈ，ＢＨ，ＦＨ，Ｈ，ＤＨ 　　；显示段码表
ＤＳＥＧ： ＤＢ ＤＨ，Ｈ，ＦＨ，ＦＨ，Ｈ，ＣＨ
ＤＳＥＧ： ＤＢ Ｈ，ＥＨ，Ｈ，Ｈ，Ｈ，ＥＨ
ＤＳＥＧ： ＤＢ Ｈ，Ｈ，ＣＨ，Ｈ，Ｈ，Ｈ
ＤＳＥＧ： ＤＢ Ｈ，Ｈ，Ｈ，Ｈ
ＤＬ： ＭＯＶ Ｒ，＃Ｈ ；延时子程序
ＤＬ： ＭＯＶ Ｒ，＃ＦＦＨ
ＤＬ： ＤＪＮＺ Ｒ，ＤＬ
ＤＪＮＺ Ｒ，ＤＬ
ＲＥＴ
．． 键盘显示器接口
是一种通用的可编程键盘／显示器接口芯片。它能接收和识别来自键盘阵列的输入
数据并完成预处理，还能显示数据和对数码显示器进行自动扫描控制。是实现 ＣＰＵ 与键盘、
ＬＥＤ数码显示器之间进行信息交换的一种专用接口芯片。与 ＭＣＳ 单片机的接口非
常简单，因而在单片机应用系统中得到了广泛的应用。本节对仅作简要介绍。
图 ． 的引脚图
．的组成及引脚
芯片有 条引脚，由单一＋Ｖ 电源供电。它主要由以下几部分组成：
（）Ｉ／Ｏ 控制和数据缓冲器；
（）控制和定时寄存器及定时控制部分；
（）扫描计数器；
（）回送缓冲器与键盘去抖动控制电路；
（）ＦＩＦＯ（先 进 后 出）寄 存 器 和 状 态
电路；
（）显示器地址寄存器及显示 ＲＡＭ。
的引脚如 图 ． 所 示。下 面 对 引
脚作一简要说明。
ＤＢ～ＤＢ：双向数据总线。
Ａ：命令状态或数据选择线。Ａ＝，表
示从 ＤＢ～ＤＢ线上传送的是命令或状态字；
Ａ＝ 表示为数据。
ＲＤ、ＷＲ：读、写信号线。
ＩＲＱ：中断请求线。
ＳＬ～ＳＬ：扫描线。可进行译码扫描（
　　单片机原理及接口技术　　
选 ），也可进行编码扫描（ 选 ），需要使用 ／ 译码器。若使用 ／ 译码器，则扫描
线为 选。
ＲＬ～ＲＬ：回送线。内部有上拉电阻，从此线上得到键盘的回扫描信号。
ＯＵＴＡ～ＯＵＴＡ、ＯＵＴＢ～ＯＵＴＢ：显示器刷新寄存器输出，与扫描线同步。
．的接口电路与应用
的接口方法如图 ． 所示。图中， 外接 × 键盘， 位显示器。 的
数据总线接的Ｐ口。键盘部分可提供具有二键锁定或 Ｎ 键巡回方式的键键
盘矩阵。ＳＬ～ＳＬ通 过 外 接 译 码 器（ＬＳ）来 选 择 行。列 值 由 ＲＬ～ＲＬ 进 入
，这 条返回线的信号经缓冲锁存。如果某键按下，该键在阵列中的地址，以及
换挡键（ＳＨＩＦＴ）和控制键（ＣＮＴＬ）的状态送入 的 ＦＩＦＯ 的 ＲＡＭ 中。ＦＩＦＯ 的 ＲＡＭ
最多可存放 个字符。当检测到某键被按下时， 的中断请求变为高电平。同时 ＦＩＦＯ
状态字改变以反映存放在 ＦＩＦＯ 中的字符数。
图 ． 与 接口连接框图
Ａ～Ａ 和Ｂ～Ｂ为段控输出（高电平有效），外接驱动器后连至ＬＥＤ各段。对于段
ＬＥＤ来说，Ａ为最高位，Ｂ为最低位。ＳＬ～ＳＬ为位控输出，经译码驱动后，连至各 ＬＥＤ
可控制 位显示器，其扫描速度则由内部定时器决定。
更新显示器和用查询方法读出 个键输入数的程序如下：
　　ＳＴＲＴ： ＭＯＶ ＯＰＴＲ，＃ＦＦＦＨ　　；ＦＦＦＨ 为 状态地址
ＭＯＶ Ａ，＃ＤＨ ；清除命令
ＭＯＶＸ ＤＰＴＲ，Ａ ；命令字输入
ＷＡＩＴＤ： ＭＯＶＸ Ａ，＠ＤＰＴＲ ；读入状态
ＪＢ ＡＣＣ．，ＷＡＩＴＤ ；清除等待
ＭＯＶ Ａ，＃ＡＨ ；对时钟编程，设 ＡＬＥ为 ＭＨｚ，
； 分频为 ｋＨｚ
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；命令送入
　　第 章 单片机系统扩展与接口技术　　
ＭＯＶ Ａ，＃Ｈ ；显示器左边输入外部译码，双键互锁
；方式
ＭＯＶＸ ＠ＤＰＴＲ ，Ａ
ＭＯＶ Ｒ，＃Ｈ ；设Ｈ～ＦＨ 存放显示字形的段数据
ＭＯＶ Ｒ，＃Ｈ ；显示位数
ＭＯＶ Ａ，＃Ｈ ；输出写显示数据命令
ＭＯＶＸ ＠ＤＰＴＲ，Ａ
ＭＯＶ ＤＰＴＲ ，＃ＥＦＦＨ ；ＥＦＦＨ 是 数据地址
ＬＯＯＰ： ＭＯＶ Ａ，＠Ｒ
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；段选码送 显示 ＲＡＭ
ＩＮＣ Ｒ ；指向下一个段选码
ＤＪＮ Ｒ，ＬＯＯＰ ； 个段选码送完？
ＭＯＶ Ｒ，＃Ｈ ；Ｈ 为键值存放单元首址
ＭＯＶ Ｒ，＃Ｈ ；有 个键值
ＬＯＯＰ： ＭＯＶ ＤＰＴＲ，＃ＦＦＦＨ ；读 状态
ＬＯＯＰ： ＭＯＶＸ Ａ，＠ＤＰＴＲ
ＡＮＬ Ａ，＃ＦＨ ；取状态字低 位
ＪＺ ＬＯＯＰ ；ＦＩＦＯ 中无键值时等待输入
ＭＯＶ Ａ，＃Ｈ ；输出读 ＦＩＦＯ 的 ＲＡＭ 命令
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；命令送入
ＭＯＶ ＤＰＴＲ，ＥＦＦＨ ；读键输入数据
ＭＯＶＸ Ａ，＠ＤＰＴＲ ；读入键值
ＭＯＶ ＠Ｒ，Ａ ；键值存入内存 Ｈ～ＦＨ
ＩＮＣ Ｒ ；指向下一个键值存放单元
ＤＪＮＺ Ｒ，ＬＯＯＰ ；读完 Ｈ 个键入数据？
ＨＥＲＥ： ＡＪＭＰ ＨＥＲＥ ；键值读完等待
． Ａ／Ｄ和 Ｄ／Ａ 接口功能的扩展
由于单片机只能处理数字量，因而应用系统中凡遇到有模拟量的地方，就要进行模拟
量向数字量或数字量向模拟量的转换，这就需要解决单片机与 Ａ／Ｄ和 Ｄ／Ａ 的接口问题。
目前 Ａ／Ｄ、Ｄ／Ａ 转换器都已集成化，具有体积小、功能强、可靠性高、误差小、功耗
低等特点，并能很方便地与单片机连接。
．． Ａ／Ｄ转换器接口
．概述
Ａ／Ｄ转换器用以实现模拟量向数字量的转换。按转换原理可分为 种：计数式、双积
分式、逐次逼近式以及并行式 Ａ／Ｄ转换器。
　　单片机原理及接口技术　　
逐次逼近式 Ａ／Ｄ转换器是一种速度较快，精度较高的转换器，其转换时间大约在几微
秒到几百微秒之间。常用的这种芯片有：
（）ＡＤＣ～ＡＤＣ型 位 ＭＯＳ型 Ａ／Ｄ转换器；
（）ＡＤＣ／ 型 位 ＭＯＳ型 Ａ／Ｄ转换器；
（）ＡＤＣ／ 型 位 ＭＯＳ型 Ａ／Ｄ转换器。
量化间隔和量化误差是 Ａ／Ｄ转换器的主要技术指标之一。
量化间隔由下式计算：
Δ＝满量程输入电压
ｎ－
其中ｎ为 Ａ／Ｄ转换器的位数。
量化误差有两种表示方法：一种是绝对量化误差；另一种是相对量化误差。
绝对量化误差
ε＝量化间隔
＝Δ
相对量化误差
ε＝
ｎ＋
．典型 Ａ／Ｄ转换器芯片 ＡＤＣ 简介
ＡＤＣ 是 位逐次逼近式 Ａ／Ｄ转换器。带 个模拟量输入通道，有通道地址译码
锁存器，输出带三态 数 据 锁 存 器。启动信号为脉冲启动方 式，最 大 可 调 误 差 为 ±ＬＳＢ。
ＡＤＣ 内部设有时 钟 电 路，故 ＣＬＫ 时 钟 需 由 外 部 输 入，ｆｃｌｋ允 许 范 围 为 ｋＨｚ～
ＭＨｚ，典型值为 ｋＨｚ。每一通道的转换需 ～ 个时钟脉冲，大约 ～μｓ。
ＡＤＣ的内部结构图见图 ．，芯片引脚如图 ． 所示。
图 ． ＡＤＣ的内部结构
　　第 章 单片机系统扩展与接口技术　　
图 ． ＡＤＣ引脚图
引脚功能介绍如下：
ＩＮ～ＩＮ： 路输入通道的模拟量输入端口。
－～－： 位数字量输出端口。
ＳＴＡＲ，ＡＬＥ：ＳＴＡＲ为启动控制输入端口，ＡＬＥ 为地址锁存控制信号端口。这两个
信号连在一起，当输入一个正脉冲时，便立即启动模／数转换。
ＥＯＣ，ＯＥ：ＥＯＣ为转换结束信号脉冲输出端口，ＯＥ为输出允许控制端口。这两个信
号亦可连在一起表示 Ａ／Ｄ转换结束。ＯＥ端的电平由低变高，打开三态输出锁存器，将转
换结果的数字量输出到数据总线上。
ＲＥＦ（＋），ＲＥＦ（－），ＶＣＣ，ＧＮＤ：ＲＥＦ（＋）和 ＲＥＦ（－）为参考电压输入端，ＶＣＣ为主
电源输入端，ＧＮＤ为接地端。
ＣＬＫ：时钟输入端。
ＡＤＤＡ、Ｂ、Ｃ： 路模拟开关的 位地址选通输入端，其对应关系如表 ． 所示。
表 ． 地址码与输入通道的对应关系
地 址 码
Ｃ Ｂ Ａ
对应的输入通道
地 址 码
Ｃ Ｂ Ａ
对应的输入通道
ＩＮ
ＩＮ
ＩＮ
ＩＮ
ＩＮ
ＩＮ
ＩＮ
ＩＮ
　　ＡＤＣ时序图如图 ． 所示。其中，
ｔＷＳ：最小启动脉宽，典型值为 ｎｓ，最大为 ｎｓ。
ｔＷＥ：最小 ＡＬＥ脉宽，典型值为 ｎｓ，最大为 ｎｓ。
ｔＤ：模拟开关延时，典型值为 μｓ，最大为 ．μｓ。
ｔＣ：转换时间，当ｆｃｌｋ＝ｋＨｚ时，典型值为 μｓ，最大为 μｓ。
ｔＥＯＣ：转换结束延时，最大为个时钟周期加 μｓ。
　　单片机原理及接口技术　　
图 ． ＡＤＣ时序图
．ＡＤＣ与 的接口电路
ＡＤＣ与的硬件接口有三种方式：查询方式、中断方式和等待延时。下面介
绍最常用的查询与中断方式。
）查询方式
ＡＤＣ 与 的硬件接口如图 ． 所示。
图 ． ＡＤＣ查询方式硬件接口
　　第 章 单片机系统扩展与接口技术　　
在编程时，令 Ｐ．＝Ａ＝，ＡＡＡ给出被选择的模拟通道的地址；执行一条输出
指令，启动 Ａ／Ｄ转换；执行一条输入指令，读取 Ａ／Ｄ转换结果。
下面的程序是采用查询方法，分别对 路模拟信号轮流采样一次，并依次把结果转存
到数据存储区的采样转换程序。
　　　　　　　ＭＯＶ Ｒ，＃ｄａｔａ　　　　　；置数据区首址
ＭＯＶ ＤＰＴＲ，＃ＦＦＨ ；Ｐ．＝，指向通道
ＭＯＶ Ｒ，＃Ｈ ；置通道数
ＬＰ： ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；启动 Ａ／Ｄ转换
ＭＯＶ Ｒ，＃ＡＨ ；软件延时
ＤＡＬＹ： ＮＯＰ
ＮＯＰ
ＮＯＰ
ＮＯＰ
ＮＯＰ
ＤＪＮＺ Ｒ，ＤＡＬＹ
ＭＯＶＸ Ａ，＠ＤＰＴＲ ；读取转换结果
ＭＯＶ ＠Ｒ，Ａ ；存储数据
ＩＮＣ ＤＰＴＲ ；指向下一个通道
ＩＮＣ Ｒ ；修改数据区指针
ＤＪＮＺ Ｒ，ＬＰ ； 个通道全采样完了吗？
）中断方式
ＡＤＣ 与 的硬件接口如图 ． 所示。
图 ． ＡＤＣ 中断方式硬件接口
　　单片机原理及接口技术　　
这里将 ＡＤＣ作为一个外部扩展的并行Ｉ／Ｏ 口，直接由的 Ｐ．和 ＷＲ脉冲
进行启动。因而其端口地址为 ＦＥＦＦＨ。用中断方式读取转换结果的数字量，模拟量输入
通道选择端 ＡＤＤＡ、ＡＤＤＢ、ＡＤＤＣ分别与 的 Ｐ．、Ｐ．、Ｐ． 直接相连，ＣＬＫ
由 的 ＡＬＥ提供。其读取通道 转换后的数字量程序段如下：
　　　　　　　ＯＲＧ Ｈ　　　　　　　
ＩＮＡＤＣ： ＳＥＴＢ ＩＴ ；ＩＮＴ设为边沿触发
ＳＥＴＢ ＥＡ ；开中断ＩＮＴ
ＳＥＴＢ ＥＸ
ＭＯＶ ＤＰＴＲ，＃ＦＥＦＦＨ ；端口地址送 ＤＰＴＲ
ＭＯＶ Ａ，＃Ｈ ；选择 通道输入
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；启动输入
…
ＯＲＧ Ｈ
ＡＪＭＰ ＰＩＮＴ
ＰＩＮＴ： …
ＭＯＶ ＤＰＴＲ，＃ＦＥＦＦＨ ；端口地址送 ＤＰＴＲ
ＭＯＶＸ Ａ，＠ＤＰＴＲ ；读取ＩＮ 的转换结果
ＭＯＶ Ｈ，Ａ ；存入 Ｈ 单元
ＭＯＶ Ａ，＃Ｈ
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；启动 Ａ／Ｄ，ＩＮ 通道输入并转换
ＲＥＴＩ ；返回
．． Ｄ／Ａ转换器接口
．Ｄ／Ａ转换器的性能指标
Ｄ／Ａ 转换器的输入为数字量，经转换后输出为模拟量。有关 Ｄ／Ａ 转换器的技术性能
指标很多，如绝对精度、相对精度、线性度、输出电压范围、输入数字代码种类等等。本节
仅对几个与接口有关的指标作一简介。
（）分辨率。分辨率是 Ｄ／Ａ 转换器对输入量变化敏感程度的描述，与输入数字量的位
数有关。如果数字量的位数为ｎ，则 Ｄ／Ａ 转换器的分辨率为 －ｎ。
（）建立时间。建立时间是描述 Ｄ／Ａ 转换速度的一个参数，具体是指从输入数字量变
化到输出达到终值误差±／ＬＳＢ（最低有效位）时所需的时间。通常以建立时间来表明转
换速度。
（）接口形式。Ｄ／Ａ 转换器有两类：一类不带锁存器，另一类则带锁存器。对于不带
锁存器的 Ｄ／Ａ 转换器，为保存单片机的转换数据，在接口处要加锁存器。
．典型 Ｄ／Ａ转换器 ＤＡＣ简介
ＤＡＣ是 位电流输出型 Ｄ／Ａ 转换器，单电源供电，在＋～＋Ｖ 范围内均可
工作。基准电压 的 范 围 为±Ｖ，电 流 建 立 时 间 为μｓ，ＣＭＯＳ工 艺，低 功 耗 ｍＷ。
ＤＡＣ 的内部结构如图 ． 所示。
　　第 章 单片机系统扩展与接口技术　　
图 ． ＤＡＣ内部结构框图
该转换器由输入寄存器和 ＤＡＣ寄存器构成两级数据输入锁存。使用时，数据输入可
以采用两级锁存（双缓冲）形式，单级锁存（单缓冲）形式，也可采用直接输入（直通）形式。
由 个与门电路组成寄存器输出控制电路，可直接进行数据锁存控制：当 ＬＥ＝ 时，
输入数据被锁存；当 ＬＥ＝时，数据不锁存，锁存器的输出跟随输入变化。
ＤＡＣ 为电流输出形式，其两个输出端的关系为ＩＯＵＴ＋ＩＯＵＴ＝常数。
为了得到电压输出，可在电流输出端接一个运算放大器，如图．所示。需要指出的
是，ＤＡＣ 内部已有反馈电阻，其阻值为 ｋΩ。
ＤＡＣ转换器芯片为 脚双列直插式封装，其引脚排列如图 ． 所示。
图 ． 图 ． ＤＡＣ的引脚图
　　各引脚的功能如下：
ＤＩ～ＤＩ：转换数据输入端。
ＣＳ：片选信号，输入，低电平有效。
ＩＬＥ：数据锁存允许信号，输入，高电平有效。
ＷＲ、ＷＲ：写信号 和 ，输入，低电平有效。
　　单片机原理及接口技术　　
ＸＦＥＲ：数据传输控制信号，输入，低电平有效。
ＩＯＵＴ：电流输出，当 ＤＡＣ寄存器中各位全为“”时，电流最大；为全“”时，电流为。
ＩＯＵＴ：电流输出，电路中保证ＩＯＵＴ＋ＩＯＵＴ＝常数。
Ｒｆｂ：反馈电阻端，片内集成电阻为 ｋΩ。
ＶＲＥＦ：参考电压，可正可负，范围为－～＋Ｖ。
ＤＧＮＤ：数字量地。
ＡＧＮＤ：模拟量地。
．ＤＡＣ与 ＭＣＳ 的接口及应用
ＤＡＣ 与 有两种基本的接口方式：单缓冲方式和双缓冲方式。
）单缓冲方式
单缓冲方式接口电路如图 ． 所示。让ＩＬＥ接＋Ｖ，ＣＳ和 ＸＦＥＲ与地址选择线Ｐ．
相连接。当地址选择线选通 ＤＡＣ后，只要输出 ＷＲ信号，ＤＡＣ 就能一步完成数
字量的输入锁存和 Ｄ／Ａ 的转换输出。
图 ． ＤＡＣ单缓冲方式接口电路
执行下面的几条指令就能完成一次 Ｄ／Ａ 转换：
　　ＭＯＶ ＤＰＴＲ，＃ＦＦＦＨ　　　　；指向 ＤＡＣ
　　ＭＯＶ Ａ，＃ＤＡＴＡ ；数字量装入 Ａ
　　ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；完成一次 Ｄ／Ａ 输入与转换
）双缓冲方式
对于多 路 Ｄ／Ａ 转 换 接 口，要 求 同 步 进 行 Ｄ／Ａ 转 换 输 出 时，必 须 采 用 双 缓 冲 方 式。
ＤＡＣ 数字量输入锁存和 Ｄ／Ａ 转换输出是分两步完成的，即 ＣＰＵ 的数据总线分时输
入数字量并锁存在各 Ｄ／Ａ 转换器的输入寄存器中，然后 ＣＰＵ 对所有 Ｄ／Ａ 转换器发出控
制信号，使各输入寄存器中的数据输入相应的 ＤＡＣ寄存器，实现同步转换输出。
图 ． 是一个两路同步输出的 Ｄ／Ａ 转换接口电路。执行下面的指 令，能 完 成 两 路
Ｄ／Ａ的同步转换输出。
　　第 章 单片机系统扩展与接口技术　　
图 ． ＤＡＣ双缓冲方式接口电路
　　　　ＭＯＶ ＤＰＴＲ，＃ＤＦＦＦＨ　　　；指向 ＤＡＣ（）
ＭＯＶ Ａ，＃ｄａｔａ ；ｄａｔａ送入 ＤＡＣ（）中锁存
ＭＯＶＸ ＠ ＤＰＴＲ，Ａ ；
ＭＯＶ ＤＰＴＲ，＃ＢＦＦＦＨ ；指向 ＤＡＣ（）
ＭＯＶ Ａ，＃ｄａｔａ ；ｄａｔａ送入 ＤＡＣ（）中锁存
ＭＯＶＸ ＠ＤＰＴＲ，Ａ
ＭＯＶ ＤＰＴＲ，＃ＦＦＦＨ ；给 ＤＡＣ（）和（）提供 ＷＲ信号
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；同时完成 Ｄ／Ａ 转换输出
Ｄ／Ａ 转换器可以应用在许多场合，这里介绍用 Ｄ／Ａ 转换器产生阶梯波。
阶梯波是在一定的时间范围内每隔一段时间，输出幅度递增 一 个 恒 定 值。在 图 ．
中，每隔 ｍｓ输出幅度增长一个定值，经 ｍｓ后重新循环。用 ＤＡＣ 在单缓冲方式
下就可输出这样的波形（接口电路见图 ．）。
图 ． 阶梯波形图
　　单片机原理及接口技术　　
产生阶梯波的程序如下：
　　ＳＴＡＲＴ： ＭＯＶ Ａ，＃Ｈ 　　　　；
ＭＯＶ ＤＰＴＲ，＃ＦＦＦＨ ； 的地址送 ＤＰＴＲ
ＭＯＶ Ｒ，＃ＡＨ ；台阶数为
ＬＰ： ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；送数据至
ＡＣＡＬＬ ＤＥＬＡＹ ；ｍｓ延时
ＤＪＮＺ Ｒ，ＮＥＸＴ ；不到 台阶转移
ＳＪＭＰ ＳＴＡＲＴ ；产生下一个周期
ＮＥＸＴ： ＡＤＤ Ａ，＃ ；台阶增幅
ＳＪＭＰ ＬＰ ；产生下一台阶
ＤＥＬＡＹ： ＭＯＶ Ｈ，＃ ；ｍｓ延时程序
ＡＧＡＩＮ： ＮＯＰ
ＮＯＰ
ＤＪＮＺ Ｈ，ＡＧＡＩＮ
ＲＥＴ
习 题 与 思 考 题
．如何构造 ＭＣＳ 单片机扩展的系统总线？
．什么是完全译码？什么是部分译码？各有什么特点？
．采用 （Ｋ× 位）芯 片，扩 展 程 序 存 储 器 容 量，分 配 的 地 址 范 围 为Ｈ～
ＢＦＦＦＨ。采用完全译码，试选择芯片数，分配地址，并画出与单片机的连接电路。
．要求 Ａ 的 Ａ 口工作在方式 输出，Ｂ口工作在方式 输入，Ｃ口的 ＰＣ 为输
入，ＰＣ 为输出，试编写 Ａ 的初始化程序。
．若将 Ａ 的 ＣＳ端与 Ｐ． 相连，试画出 Ａ 与 的连接图，并写出最小
与最大的两组地址。
．Ａ 的 ＲＡＭ 和Ｉ／Ｏ 如何编址？若将 ＣＥ端接 Ｐ．，ＩＯ／珨Ｍ 接 Ｐ．，则其 ＲＡＭ
的地址与Ｉ／Ｏ 口地址分别为多少？
．要求 Ｉ／Ｏ 工作在 ＡＬＴ，Ａ、Ｂ口均为输入，定时器对输入脉冲 分频后输
出连续方波，试进行初始化编程。
．简述非编码式键盘行扫描法与线反转法的工作原理。
．若采用 Ａ 作为 × 键 盘 的 接 口 芯 片，Ａ 口 作 为 行 线 输 出，Ｂ 口 作 为 列 线 输
入，试画出键盘接口电路。
．用定时器 Ｔ每隔 ｍｓ控制 ＡＤＣ 的ＩＮ通道进行一次 Ａ／Ｄ 转换，试编写
初始化程序。
．用一片 ＤＡＣ 工作在双缓冲方式，要求和 单片机接口，并编写出对应的
Ｄ／Ａ 转换程序。
　　第 章 单片机系统扩展与接口技术　　
第章
　　单片机应用系统的设计与开发
． 单片机应用系统的开发过程
单片机应用系统的设计与开发主要包括五部分内容：方案论证，硬件系统的设计，系
统软件的设计，系统仿真调试和脱机运行。各部分详细内容如图 ． 所示。
一、方案论证
确定开发题目后，首先要进行方案调研，这个过程至 关 重 要，制定出一个好的方案，
会使后面的开发工作较为顺利。调研工作主要解决以下几个问题：
（）了解用户的需求，确定设计规模和总体框架。
（）摸清软硬件技术难度，明确技术主攻问题。
（）针对主攻问题开展调研工作，查找中外有关资料，确定初步方案。
（）单片机应用开发技术是软硬件结合的技术，方案设计要权衡任务的软硬件分工。
有时硬件设计会影响到软件程序结构。如果系统中增加某个硬件接口芯片，而给系统程序
的模块化带来了可能和方便，那么这个硬件开销是值得的。在无碍大局的情况下，以软件
代替硬件正是计算机技术的长处。
（）尽量采纳可借鉴的成熟技术，减少重复性劳动。
二、硬件系统的设计
单片机应用系统的设计可划分为两部分：一部分是与单片机直接接口的数字电路范围
的电路芯片的设计。如存储器和并行接口的扩展，定时系统、中断系统扩展，一般的外部
设备的接口，甚至于 Ａ／Ｄ、Ｄ／Ａ 芯片的接口。另一部分是与模拟电路相关的电路设计，包
括信号整形、变换、隔离和选用传感器；输出通道中的隔离和驱动以及执行元件的选用。
应用系统的设计应注意以下几个方面：
（）从应用系统的总线观念出发，各局部系统和通道接口设计与单片机要做到全局一
盘棋。例如，芯片间的时间是否匹配，电平是否兼容，能否实现总线隔离缓冲等，避免“拼
盘”战术。
（）尽可能选用符合单片机用法的典型电路。
　　单片机原理及接口技术　　
图 ． 单片机应用系统开发设计流程图
（）尽可能采用新技术，选用新的元件及芯片。选用集成度高的芯片，以减少芯片数
量，缩小印制板面积。例如，选用含有 内核的扩展多功能接口的单片机新机种，取 代
向外的一大片电路。选用无粘合接口，如数据采集系统等集成度高、功能强的数字或
模拟电路芯片，取代许多小规模集成电路芯片的集合。选用 ＰＬＤ可编程逻辑器件，取代部
分电路设计。
（）抗干扰设计是硬件设计的重要内容，如看门狗电路、去耦滤波、通道隔离、合理的
印制板布线等。
（）当系统扩展的各类接口芯片较多时，要充分考虑到总线驱动能力。当负载超过允
　　第 章 单片机应用系统的设计与开发　　
许范围时，为了保证系统可靠工作，必须加总线驱动器。
（）可用印制板辅助设计软件，如 ＰＲＯＴＥＬ 进行印制板的设计。
三、应用软件设计
应用系统中测控任务的实现最终是靠程序的执行来完成的。应用软件设计的如何，将
决定系统的效率和它的优劣。软件设计需注意以下几个方面：
（）采用模块程序设计。模块程序是把一个较长的完整的程序，如监控程序，分成若
干个小的功能程序模块，在分别进行独立设计、编程、调试之后，最终装配在一起，链接成
一个完整的程序。模块化程序设计便于程序移植和修改。
（）采用自顶向下的程序设计。程序设计时，先从系统主程序开始设计，从属的程序
或子程序用程序标志代替。当主程序编好后，再将标志扩展为从属程序或子程序。
（）外部设备和外部事件尽量采用中断方式与 ＣＰＵ 联络，这样，既便于系统模块化，
也可提高程序效率。
（）近几年推出的单片机开发系统，有些是支持高级语言的，如 Ｃ与 ＰＬ／Ｍ的编
程和在线跟踪调试。与汇编语言编程相比，使用高级语言编程，可大大提高开发和调试效
率，而得到的目标代码质量可与汇编语言相媲美。
（）目前已有一些实用子程序发表，程序设计时可适当使用，其中包括运行子程序和
控制算法程序等。
（）系统的软件设计应充分考虑到软件抗干扰措施。如数字滤波，程序跑飞的软件陷
阱，软件 ＷＡＴＣＨＤＯＧ，软件的容错设计等。
四、软硬件调试
一个单片机应用系统，经过方案论证，硬件设计，印制板设计加工和焊接，软件的编
写，还要进行软硬件的调试，验证理论设计的正确性。由于单片机没有自开发能力，其应
用系统调试需借助于单片机开发系统。
单片机系统主要的功能是：
（）程序的录入、编辑和交叉汇编功能。
（）提供仿真 ＲＡＭ、仿真单片机。
（）支持用户汇编语言（有的同时支持高级语言）源文件跟踪调试。
（）目前一般的开发装置都有与通用微机的联机接口，可以利用微机环境进行调试。
（）ＥＰＲＯＭ 的写入功能。
在利用开发装置进 行 调 试 时，应 先 把 硬 件 电 路 调 通。硬件调试可采用分块调试的方
法，先易后难，先局部调试，都通过后再总调。对硬件的分块调试可编制相应模块的测试
程序，有的测试程序稍加改动就可成为功能模块程序。
在硬件基本调通，验证存储空间分配可行时，进行自顶向下的主程序的设计调试。程
序的调试需在 ＤＥＢＵＧ 环境下进行，用断点调试或连续调试的方法，通过程序执行过程中
内存或有关寄存器的状态变化找出故障点，也可借助于仪器仪表测试电路的状态和波形来
验证软硬件的正确性。
五、ＥＰＲＯＭ 固化
所有开发装置调试通过的程序，最终要脱机运行，即将仿真 ＲＯＭ 中运行的程序固化
到 ＥＰＲＯＭ 脱机运行。但在开发装置上运行正常的程序，固化后脱机运行并不一定同样正
　　单片机原理及接口技术　　
常。若脱机运行有问题，需分析原因，如是否总线驱动功能不够，或是对接口芯片操作的
时间不匹配等。经修改的程序需再次写入。
． 单片机开发工具 ＷＡＶＥ简介
单片机以其体积小、重量轻、价格低及功能强等特点得到了广泛的应用，但单片机上
一般仅集成 ＣＰＵ、ＲＡＭ 和Ｉ／Ｏ 接口，而无用户接口（键盘和显示器）及监控程序，因而单
片机自身无编程功能，必须依赖单片机开发工具（又称单片机仿真器）。单片机开发工具有
输入程序、编辑程序和调试程序的功能，目前国内使用较多的有 ＷＡＶＥ、ＫｅｉｌＣ、ＭｅｄＷｉｎ
等，在此就 ＷＡＶＥ仿真器作一简介。
ＷＡＶＥ（伟福）仿真器支持多类 ＣＰＵ 仿真，可仿真 ＭＣＳ 系列、ＭＣＳ 系列、
ＭｉｃｒｏｃｈｉｐＰＩＣ系列 ＣＰＵ。采用双 ＣＰＵ 结构，不占用户资源。软件将编辑器、编译器、调
试器集成在一起，源程序编辑、编译、下载、调试可以在一个环境下完成。调试程序时，可
以观察到寄存器、ＲＡＭ、外部端口、定时器、串行口中断、外部中断等相关状态，有丰富
的窗口显示方式，可动态地展示仿真的各种过程。其调试程序的过程如下：
．建立程序
选择［文件／新建文件］功能，出现一个文件名为 ＮＯＮＡＭＥ的源程序窗口，在此窗口
中输入程序。
．保存程序
选择［文件／保存文件］或［文件／另存为］功能，给出文件所要保存的位置，例如，Ｃ：＼
ＶＷ＼ＳＡＭＰＬＥＳ文件夹，再给出文件名 ＭＹ．ＡＳＭ。保存文件。文件保存后，程序窗口上
文件名为：保存文件所在路径 Ｃ：＼ＷＡＶＥ＼ＳＡＭＰＬＥＳ＼ＭＹ．ＡＳＭ。
．建立项目
选择［文件／新建项目］功能，新建项目会自动分三步进行。
（）加入模块文件。在加入模块文件的对话框中选择刚才保存的文件 ＭＹ．ＡＳＭ，按
打开键。
（）加入包含文件。在加入包含文件对话框中，选择所要加入的包含文件。如果没有
包含文件，按取消键。
（）保存项目。在保存项目对话框中输入项目名称。ＭＹ无须加后缀，软件会自动将
后缀设成“．ＰＲＪ”。按保存键将项目存在与你的源程序相同的文件夹下。项目保存好后，如
果项目是打开的，可以看到项目中的“模块文件”已有一个模块“ＭＹ．ＡＳＭ”，如果项目窗
口没有打开，可以选择［窗口／项目窗口］功能来打开。可以通过仿真器设置快捷键或双击
项目窗口第一行选择仿真器和要仿真的单片机。
．设置项目
选择［设置／仿真器设置］功能或按“仿真器设置”快捷图标或双击项目窗口的第一行来
打开“仿真器设置”对话框，在“仿真器”栏中，选择仿真器类型和配置的仿真头以及所要仿
真的单片机。在“语言”栏中，“编译器选择”可选择为“伟福汇编器”。按“好”键确定，当仿
真器设置好后，可再次保存项目。
　　第 章 单片机应用系统的设计与开发　　
．编译程序
选择［项目／编译］功能或按编译快捷图标或 Ｆ键编译项目。在编译过程中，如果有错
可以在信息窗口中显示出来，双击错误信息，在源程序中定位所在行。纠正错误后，再次
编译直到没有错误。在编译之前，软件会自动将项目和程序存盘。在编译没有错误后，就
可调试程序了。
．单步调试程序
选择［执行／跟踪］功能或按跟踪快捷图标或按 Ｆ键进行单步跟踪调试程序，单步跟踪
就一条指令一条指令地执行程序，若有子程序调用，也会跟踪到子程序中去。观察程序每
步执行的结果，如果程序太长可设置断点：将光标移至此行并将光标移到源程序窗口的左
边灰色区，光标变成“手指圈”，单击左键设置断点。也可以用弹出的［设置／取消断点］功能
或用 Ｃｔｒｌ＋Ｆ组合键设置断点。有效断点的图标为“红圆绿钩”，无效断点的图标为“红圆
黄叉”。断点设置好后，用［全速执行］功能全速执行程序。当程序执行到断点时，会暂停下
来，这时可以观察程序中各变量的值及各端口的状态，判断程序是否正确。
．连接硬件仿真
将仿真器通过 ＵＳＢ电缆连接到计算机上，将仿真头接到仿真器，检查接线是否有误，
确信没有接错后，接上电源，打开仿真器的电源开关。参见第步，设置项目，在“仿真器”
和“通信设置”栏的下方 有“使 用 伟 福 软 件 模 拟 器”的 选 择 项。将 其 前 面 框 内 的 钩 去 掉，按
“好”键确认。如果仿真器和仿真头设置正确，并且硬件连接没有错误，就会出现［硬件仿
真］的对话框，并显示仿真器、仿真头的型号及仿真器的序列号。如果仿真器初始化过程中
有错，软件就会再次出现仿真器设置对话框，这时应检查仿真器、仿真器的选择是否有错，
硬件接线是否有错，检查纠正错误后，再次确认。
． ＭＣＳ 应用系统的调试
在完成应用系统的硬件组装和软件设计以后，便进入系统调试阶段。这个阶段的任务
是排除样机中的硬件故障和纠正软件中的设计错误，并 解 决 硬 件 和 软 件 之 间 的 不 协 调 问
题。下面介绍几种调试方法。
一、硬件调试方法
单片机系统的硬件调试和软件调试是不能完全分开的，许多硬件错误是在软件调试中
被发现和纠正的。但通常是先排除明显的硬件故障以后，再和软件结合起来调试。硬件调
试方法有两种：静态调试和仿真调试。
．静态调试
在样机加电之前，先 用 万 用 表 等 工 具，根据硬件逻辑设计详细检查样机线路的正确
性，核对元器件的型号、规格和安装是否符合要求。应特别注意电源系统的检查，以防止
电源短路和极 性 错 误。并重点检查系统总线是否存在相互之间短路或与其它信号线的
短路。
第一步是加电后检查各插件上引脚的电位，一般先检查 ＶＣＣ与 ＧＮＤ 之间电位，若在
Ｖ 左右属正常。若出现高压，联机仿真调试时，会损坏仿真器等，有时会使应用系统的集
　　单片机原理及接口技术　　
成块发热损坏。
第二步是在断电情况下，除 ＣＰＵ 之外，插上所有元器件，仿真插头插入样机 ＣＰＵ 插
座，并和仿真机相连，用万用表检查连 接的正确性后，准 备 联 机 仿 真 调 试。连 接 图 见
图 ．。
图 ． 应用系统连接仿真器开发系统简图
．联机仿真调试
电路检查无误后，分别打开样机和仿真器的工作电源，启动 ＭＢＵＧ 进入监控状态，就
可进行联机仿真调试了。
调试的方案是：把整个应用系统按其功能分成若干模块，如系统扩展模块：输入模块、
输出模块、Ａ／Ｄ模块、Ｄ／Ａ 模块等。针对不同的功能模块，编写一小段测试程序，并借助
于万用表、示波器、逻辑笔等仪器来检查硬件电路的正确性。
二、软件调试方法
软件调试可以一个模块一个模块地进行，下面给出一些常见的故障情况。
．程序跳转错
这种错误的现象是程序运行不到指定的地方，或发生死循环，通常是由于错用了指令
或设错了标号，如：
　　　　　　ＯＲＧ Ｈ
ＳＴＲＴ： ＣＬＲ Ｃ
ＭＯＶ Ａ，＃ＦＨ
ＬＰ： ＩＮＣ Ａ
ＪＮＣ ＬＰ
ＭＯＶ ＤＰＴＲ，＃ＦＦＦＨ
这段程序的目的是为了延迟一段时间，由于ＩＮＣ Ａ 指令执行后的结果不影响任何标
志，所以ＪＮＣＬＰ这条指令执行后总是转跳到ＬＰ，结果发生了死循环。可将ＪＮＣＬＰ改
为：ＣＪＮＥＡ，＃Ｈ，ＬＰ。
．程序错误
对于计算程序，经过反复测试后，才能验证它的正确性。例如调试一个双字节十进制
加法程序，该子程序的功能是将 Ｈ、Ｈ 和 Ｈ、Ｈ 单元内的 ＢＣＤ 码相加，结果送
Ｈ、Ｈ、Ｈ 单元。
　　ＳＴＲＴ： ＭＯＶ Ｒ，＃Ｈ
ＭＯＶ Ｒ，＃Ｈ
ＭＯＶ Ｒ，＃Ｈ
　　第 章 单片机应用系统的设计与开发　　
ＣＬＲ Ｃ
ＬＯＯＰ： ＭＯＶ Ａ，＠Ｒ
ＡＤＤＣ Ａ，＠Ｒ
ＤＡ Ａ
ＭＯＶ ＠Ｒ，Ａ
ＩＮＣ Ｒ
ＩＮＣ Ｒ
ＤＪＮＺ Ｒ，ＬＯＯＰ
ＣＬＲ Ａ
ＭＯＶ ＡＣＣ．，Ｃ
ＭＯＶ ＠ Ｒ，Ａ
ＬＯＯＰ： ＲＥＴ
调试这 个 程 序 时，先 将 加 数 写 入 的 Ｈ～Ｈ 单 元 内，然后设置断点至
ＬＯＯＰ，以ＳＴＲＴ 开始进行这个程序至断点，观察Ｈ～Ｈ 的内容是否正确。若存在错
误，再用单步方式从ＳＴＲＴ 开始逐条运行指令，并不断观察 的状态变化，进一步查
出错误原因。
．动态错误
用单步、断点仿真运行命令，一般只能测试目标系统的静态功能。目标系统的动态性
能要用全速仿真命令来测试，这时应选中目标机中晶振电路工作。
系统的动态性能范围很广，如控制系统的实时响应速度、显示器的亮度、定时器的精
度等等。若动态性能没有达到系统设计的指标，有的是由于元器件速度不够造成的；更多
的是由于多个任务之间的关系处理不恰当引起的。
．加电复位电路的错误
排除硬件和软件故障后，将ＥＰＲＯＭ 和ＣＰＵ 插上目标系统，若能正常运行，应用系统
的开发研制便完成。若 目 标 机 工 作 不 正 常，则主要是加电复位电路出现故障造成的。如
没有被初始复位，则ＰＣ不是从Ｈ 开始运行，故系统不会正常运行，必须及时检
查加电复位电路。
习 题 与 思 考 题
．简述单片机应用系统开发的一般过程。
．单片机应用系统开发的可行性分析包括哪些内容？
．单片机应用系统软、硬件设计应注意哪些问题？
．单片机开发系统的主要功能是什么？
．硬件调试的基本步骤是什么？
．软件调试中，一般有哪些错误？如何排除？
　　单片机原理及接口技术　　
第章
　　　　　单片机系统的抗干扰技术
　　从事单片机应用的开发人员都有过这样的经历：将调试好的样机投入现场进行实际运
行时，总会出现这样或那样的问题。有的一开机就失灵，有的时好时坏，让人不知所措。为
什么实验室能正常工作，到了现场就有问题呢？主要原因是系统没有采取抗干扰措施，或
措施不力。为此，本章专门介绍单片机应用系统的抗干扰技术，以增强产品在实际环境中
的生存能力。
． 干扰源及其分类
一、干扰的含义
所谓干扰，一般是指有用信号以外的噪声，在信号输入、传输和输出过程中出现的一
些有害的电气变化现 象。这 些 变 化 迫 使 信 号 的 传 输 值、指 示 值 或 输 出 值 出 现 误 差，出 现
假象。
干扰对电路的影响，轻则降低信号的质量，影响系统的稳定性；重则破坏电路的正常
功能，造成逻辑关系混乱，控制失灵。
二、干扰源的分类
．从干扰的来源划分
）内部干扰
内部干扰是应用系统本身引起的各种干扰，包括固定干扰和过渡干扰两种。固定干扰
是指信号间的相互串扰、长线传输阻抗失配时反射噪声、负载突变噪声以及馈电系统的浪
涌噪声等。过渡干扰是指电路在动态工作时引起的干扰。
）外部干扰
外部干扰是由系统外部窜入到系统内部的各种干扰，包括某些自然现象（如闪电、雷
击、地球或宇宙辐射等）引起的自然干扰和人为干扰（如电台、车辆、家用电器、电器设备
等发出的电磁干扰，以及电源的工频干扰）。一般来说，自然干扰对系统影响不大，而人为
干扰则是外部干扰的关键。图 ． 是上述两种干扰源的示意图。
　　第 章 单片机系统的抗干扰技术　　
① 装置开口或缝隙处进入的辐射干扰（辐射）
② 电网变化干扰（传输）
③ 周围环境用电干扰（辐射、传输、感应）
④ 传输线上的反射干扰（传输）
⑤ 系统接地不妥引入的干扰（传输、感应）
⑥ 外部线间串扰（传输、感应）
⑦ 逻辑线路不妥造成的过渡干扰（传输）
⑧ 线间串扰（感应、传输）
⑨ 电源干扰（传输）
瑏瑠 强电器引入的接触电弧和反电动势干扰（辐射、传输、感应）
瑏瑡 内部接地不妥引入的干扰（传输）
瑏瑢 漏磁感应（感应）
瑏瑣 传输线反射干扰（传输）
瑏瑤 漏电干扰（传输）
图 ． 内部和外部干扰示意图
．按干扰出现的规律划分
）固定干扰
在系统邻近固定的 电 气 设 备 运 行 时 接 收 的 干 扰 属 固 定 干 扰。例 如，一个系统中既有
“强电”部分，又有“弱电”部分，作为整个系统的工作是有节奏的，按规定的程序先后动作。
对这样的系统，“强电”设备的启／停就有可能引入一个固定时刻的干扰，使系统中的数字
逻辑电路出现错误。
）半固定干扰
半固定干扰是指那些偶尔使用的电气设备（如行车、电钻等）引起的干扰。
　　单片机原理及接口技术　　
）随机干扰
随机干扰属偶发性干扰。如闪电、供电系统继电保护的动作、汽车的打火等。
半固定干扰和随机干扰的区分在于：前者是可预计的，后者是突发性的。
．从干扰与输入信号的关系划分
）串模干扰
串模干扰又称常态 干 扰、横 向 干 扰，这种干扰表现为干扰信号和有用信号串接在一
起，如图．（ａ）所示。干扰可能是信号源本身产生的，也可能是引线上感应的。它叠加在
有用信号之上，成为有用信号的一部分，直接送到系统的输入端，影响很大。
图 ． 串模干扰和共模干扰
（ａ）串模干扰；（ｂ）共模干扰
）共模干扰
共模干扰又称共态 干 扰、纵 向 干 扰。这种干扰出现在输入信号端和系统本体接地之
间，如图．（ｂ）所示，主要是由于两者接地之间存在干扰电压引起的。这种干扰主要来源
于Ｈｚ交流电源的接地系统在大地的电位分布，以及某些电气设备通过接地系统的电流
所引起的。
图 ． 给出了信号为直流电压时串模干扰与共模干扰的波形。
图． 串模干扰与共模干扰波形
（ａ）直流信号；（ｂ）串模干扰；（ｃ）共模干扰；（ｄ）串模干扰与共模干扰共同作用
　　第 章 单片机系统的抗干扰技术　　
　　另外，干扰还可以从形式、产生和传播方式等方面进行分类，参见表．。尽管干扰的
分类多种多样，在单片机应用系统中，我们将以干扰传播方式分类方法为主，讨论串模干
扰和共模干扰的抑制方法。
表 ． 常见干扰的种类
分类方式 干 扰 种 类
按
干
扰
来
源
分
内
部
干
扰
① 过渡干扰　　　　　　② 线间串扰
③ 电源干扰　　　　　　④ 电弧和反电势干扰
⑤ 接地系统干扰　　　　⑥ 漏磁干扰
⑦ 传输线反射干扰　　　⑧ 漏电干扰
外
部
干
扰
① 辐射干扰　　　　　　② 电网干扰
③ 周围用电干扰　　　　④ 接地干扰
⑤ 传输线反射干扰　　　⑥ 外部线间串扰
按干扰出
现规律分
① 固定干扰　　　　　　② 半固定干扰
③ 随机干扰 （②③可合称为随机干扰）
按干扰传
播方式分
① 静电干扰　　　　　　② 磁场耦合干扰
③ 电磁辐射干扰 ④ 共阻抗干扰
⑤ 漏电耦合干扰
按干扰与
输入关系分 ① 串模干扰　　　　　　② 共模干扰
按干扰的
形式分
① 交流干扰　　　　　　② 直流干扰
③ 不规则噪声干扰 ④ 机内调制干扰
． 干扰对单片机系统的影响
图．表示了干扰侵入单片机系统的基本途径。由图可见，最容易受到干扰的部位是
电源、接地系统、输入和输出系统以及单片机的总线系统。
图 ． 干扰入侵单片机系统的途径
　　单片机原理及接口技术　　
让我们先看一个程序片段：
　　Ｆ Ａ ＭＯＶ Ｃ，ＥＨ．
　　Ｆ Ｅ ＭＯＶ Ａ，Ｈ
　　Ｆ ＡＤＤＣ Ａ，＃
　　ＦＡ ＲＲＣ Ａ
　　ＦＢ Ｆ ＭＯＶ Ｈ，Ａ
　　ＦＤ ＭＯＶ ＥＨ．，Ｃ
如果干扰使程序计数器 ＰＣ出错，在某时刻变为ＦＨ，ＣＰＵ 将执行如下程序片段，
掉进一个死循环而不能自拔：
　　Ｆ Ｅ ＭＯＶ Ａ，＃ＥＨ
　　Ｆ ＯＲＬ Ａ，＃Ｈ
　　Ｆ Ｆ ＬＪＭＰ ＦＨ
由于程序失控，ＣＰＵ 执行的指令系列中既有编程者编制的程序段（在不该执行的时刻
被执行），也有不是编程者编制的程序段（把操作数当作指令执行而形成的程序段），因此，
什么指令都有可能被执行，从而做出很多无法解释的事情来。
可见，单片机系统要能实际工作，必须采取抗干扰措施。通常，有硬件和软件两种抗
干扰方法。硬件方法可把大多数干扰拒之门外，少数干扰窜入系统后，采用软件方法作第
二道防线。硬件抗干扰有效率高的优点，但要增加设备的成本和体积；软件抗干扰有成本
低的优点，但降低了系统的工作效率。
． 硬件抗干扰技术
．． 串模干扰的抑制方法
一、光电隔离
开关量输入／输出通道和模拟量输入／输出通道，都是干扰窜入的渠道，要切断这些渠
道，就要去掉外部与输入／输出通道之间的公共地线，实现彼此电气隔离以抑制干扰脉冲。
最常用的隔离器是光电耦合器，其内部结构见图 ．（ａ），图 ．（ｂ）为接入光电耦合器的
数字电路。
图 ． 二极管、三极管光电耦合器
光电耦合器的应用非常广泛，概括起来可分为两类：一是输入输出的隔离；二是消除
和抑制噪声。
　　第 章 单片机系统的抗干扰技术　　
．输入／输出隔离
当回路用光电耦合器隔离后，线路非常简单，不必担心输入／输出的接地。
）脉冲电路的应用
门电路将不同电位的信号，加到光电耦合器上，构成简单的逻辑电路，可方便地用于
各种逻辑电路相连的输入端，能把信号送到输出端，而输入端的噪声不会送出。
）整形放大
在测量微弱电流时，常常采用由光电耦合器构成的整形放大器。若放大器中使用机械
图 ． 可控硅感性负载开关电路
换流器（或场 效 应 管）时，响 应 速 度 慢，有 尖 峰 干
扰，影响电路 工 作。采 用 光 电 耦 合 器 就 没 有 这 样
的问题，尖峰噪声可以去掉。
．消除由负载引起的噪声
用逻辑电路信号来驱动可控硅，如图 ． 所
示，由于负载 为 感 性 开 关 电 路，产 生 的 尖 峰 噪 声
用光电耦合器隔离输入 输 出 后，负 载 上 的 噪 声 就
不会反馈到逻辑电路。
二、硬件滤波电路
常用的低通滤波器有 ＲＣ滤波器、ＬＣ滤波器、双 Ｔ 滤波器及有源滤波器等，它们的结
构图分别见图 ．（ａ）、（ｂ）、（ｃ）、（ｄ）。
图 ． 四种滤波器的结构图
ＲＣ滤波器的结构简单，成本低，不需调整。但它的串模抑制比不高，时间常数 ＲＣ较
大，会影响放大器的动态特性。
ＬＣ滤波器的串模抑制比高，但需要绕制电感，体积大，成本高。
双 Ｔ 滤波器对某一固定频率的干扰具有很高的抑制比，主要用于工频干扰，对高频干
扰无能为力。双 Ｔ 滤波器结构简单，但调整起来较麻烦。
有源滤波器可以获得较为理想的频率特性，但有源器件的共模抑制比一般难以满足要
求，其本身带来的噪声也比较大。
硬件滤波电 路 能 够 削 弱 各 类 高 频 干 扰，但 低 通 滤 波 器 的 截 止 频 率 若 定 得 很 低 （如
．Ｈｚ），就难以胜任，此时可采用软件滤波（数字滤波）来实现。
　　单片机原理及接口技术　　
三、过压保护电路
在输入通道上采用一定的过压保护电路，以防引入高压，损坏系统电路。过压保护电
路由限流电阻 和 稳 压 管 组 成，稳 压 值 以 略 高 于 最 高 传 送 信 号 电 压 为 宜。对 于 微 弱 信 号
（．Ｖ 以下），采用两支反并联的二极管，也可起到过压保护作用。
四、调制解调技术
有时，有效信号的频谱与干扰的频谱相互交错，使用一般硬件滤波很难分离，可采用
调制解调技术。先用已知频率的信号对有效信号进行调制，调制后的信号频谱应远离干扰
信号的频谱区域。传输中各种干扰信号很容易被滤波器滤除，被调制的有效信号经解调器
解调后，恢复原状。有时，不用硬件解调，运用软件中的相关算法，也可达到解调的目的。
五、抗干扰稳压电源
供电线路是干扰入侵系统的主要途径，要使单片机系统稳定可靠，在电源方面常用的
抗干扰措施有：
（）应用系统的供电线路和产生干扰的用电设备分开供电。
（）通过低通滤波器和隔离变压器接入电网，如图 ． 所示。低通滤波器可吸收大部
分电网中的“毛刺”。隔离变压器在初级和次级之间加入了一层屏蔽层，并将它和铁芯一起
接地。
（）整流组件上并接滤波电容。滤波电容选用 ｐＦ ～ ．μＦ的瓷片电容，接法
参见图 ．。
（）采用高质量的稳压电源。要求电源的等效内阻小于系统等效负载电阻数百倍。为
进一步加强抗干扰效果，滤波电容采用电解电容并接上一个瓷片电容或独石电容。参见图
．。在系统电路主板上，电源与地之间，最好每隔一定位置跨接一些滤波电容。
图 ． 抗干扰稳压电源
六、数字信号采用负逻辑传输
干扰源作用于高阻线路上，容易形成较大幅度的干扰信号，而对低阻线路影响要小一
些。在数字系统中，输出低电平时内阻较小，输出高电平时内阻较大。如果我们采用负逻
辑传输，就可以减少干扰引起的误动作，提高数字信号传输的可靠性。
．． 共模干扰的抑制方法
．平衡对称输入
在设计信号源时尽可能做到平衡和对称，否则会产生附加的共模干扰。
　　第 章 单片机系统的抗干扰技术　　
．选用高质量的差动放大器
要求差动放大器具有高增益、低噪声、低漂移、宽频带等特点，以便获得足够高的共
模抑制比。
．良好的接地系统
接地不良时将形成较明显的共模干扰。如没有条件进行良好接地，不如将系统浮置起
来，再配合采用合适的屏蔽措施，效果也不错。
．系统接地点的正确连接
单片机应用系统中存在的地线有：数字地、模拟地、功率地、信号地和屏蔽地。如何处
理这些地线是设计中必须注意的一个问题。
）一点接地和多点接地的应用原则
（）一般高频电路应就近多点接地，低频电路应一点接地。在高频电路中，地线上具
有电感，因而增加了地线阻抗，而且地线变成了天线，向外辐射噪声信号，因此，要多点就
近接地。在低频电路中，接地电路若形成环路，对系统影响很大，因此应一点接地。
（）交流地、功率地与信号地不能公用。流过交流地和功率地的电流较大，会造成数毫
伏、甚至几伏电压，这会严重地干扰低电平信号的电路，因此信号地与交流地、功率地分开。
（）信号地与屏蔽地的连接不能形成死循环回路。否则会感生出电压，形成干扰信号。
（）数字地与模拟地应分开，最后单点相连。
）印制板的地线布置
印制电路板的地线主要是指 ＴＴＬ、ＣＯＭＳ芯片的接地。印制板中的地线应成网状，而
且其它布线不要形成环路，特别是电路外围的环路。
印制板上的接地线根据电路通路最好逐渐加宽，并且不小于ｍｍ。图．示出了导
线的长度、宽度和允许电流值之间的关系。
当安装大规模集成 电 路 芯 片 时，要让芯片跨越平行的地线和电源线，这 样 能 减 少 干
扰，如图．所示。
图 ． 导线的长度宽度与电流关系图 图． 芯片的布置
．屏蔽
用金属外壳将整机 或 部 分 元 器 件 包 围 起 来，再 将 金 属 外 壳 接 地，就 能 起 到 屏 蔽 的 作
用，对于各种通过电磁感应引起的干扰特别有效。屏蔽外壳的接地点要与系统的信号参考
　　单片机原理及接口技术　　
点相接，而且只能单点接地，所有具有同参考点的电路必须装在同一屏蔽盒内。如有引出
线，应采用屏蔽线，其屏蔽层应和外壳在同一点接系统参考点。参考点不同的系统应分别
屏蔽，不可共处一个屏蔽盒内。
以上介绍的硬件抗干扰措施是十分必要的，它给单片机应用系统创造了一个基本“干
净”的工作环境。但硬件措施还不能达到％的防患效果，配合各种软件抗干扰措施也是
十分必要的。
． 软件抗干扰技术
．． 数字量Ｉ／Ｏ通道中的软件抗干扰
．数字量输入方法
由于数字量输入过程中干扰的作用时间较短，因此在采集数字信号时，可多次重复采
集，直到若干次采样结果一致时，才认为其有效。例如 通 过 Ａ／Ｄ 转 换 器 测 量 各 种 模 拟 量
时，如果有干扰作用于模拟信号上，就会使 Ａ／Ｄ转换结果偏离真实值。这时如果只采样一
次 Ａ／Ｄ转换结果，就无法知道其是否真实可靠，而必须进行多次采样，得到一个 Ａ／Ｄ 转
换结果的数据系列，对这些数据系列进行各种数字滤波处理，最后才能得到一个可信度较
高的结果值。如果对于同一个数据点，经多次采样后得到的信号值变化不定，说明此时的干
扰特别严重，已经超出允许的范围，应该立即停止采样并给出报警信号。如果数字信号属于
开关量信号，如限位开关、操作按钮等，则不能用多次采样取平均值的方法，而必须保证每次
采样结果绝对一致才行。这时可按图．编写一个采样子程序，程序中设置有采样成功和采
样失败标志。如果对同一开关量信号进行若干次采样，其采样结果完全一致，则成功标志置
位，否则失败标志置位。后续程序可通过判别这些标志来决定程序的流向。
图 ． 开关量信号采样流程
　　第 章 单片机系统的抗干扰技术　　
．数字量输出方法
单片机系统的输出中，有很多是数字量，如各种显示器、步进电机或电磁阀的驱动信
号等。即使是以模拟量输出，也是经过 Ｄ／Ａ 转换而获得的。单片机给出了一个正确的数据
后，由于外部干扰的作用有可能使输出系统得到一个错误的数据，从而使输出系统发生误
动作。对于数字量输出软件抗干扰最有效的方法是重复输出同一个数据，重复周期应尽量
短。这样输出系统在得到一个被干扰的错误信号后，还来不及反应，一个正确的信号又来
到了，从而可防止误动作的产生。
在程序结构上，可将输出过程安排在监控循环中，循环周期取得尽可能短，就能有效
地防止输出设备的错误动作。需要注意的是，经过这种安排后，输出功能是作为一个完整
的模块来执行的。与这种重复输出措施相对应，软件设计中，还必须为各个外部输出设备
建立一个输出暂存单 元。每次将应输出的结果存入暂存单元中，然 后 再 调 用 输 出 功 能 模
块，将暂存单元的数据输出，不管该数据是刚送来的，还是以前就有的。这样可以让每个
外部设备不断得到控制数据，从而使干扰造成的错误状态不能得以维持。在执行输出功能
模块时，应将有关输出接口芯片初始状态也一并重新设置。因为干扰的作用可能使这些芯
片的工作方式控制字发生变化，而不能实现正确的输出功能，重新设置控制字就能避免这
种错误，确保输出功能的正确实现。
有些输出设备具有增量控制特性，如自带环型分配器和功率驱动器的步进电机组件，
单片机只需输出方向控制信号和步进脉冲信号。这时，方向控制信号就可以重复输出，而
步进脉冲信号是不能重复输出的。每重复一次就要前进一步。因其对于这种情况，如果有
位置控制功能（如光栅、磁尺等定位信号），便可实现闭环控制，本身有足够的抗干扰性能，
不用重复输出。如果没有检测手段（即开环控制系统），建议采用软件算法来实现环型分配
器的功能，单片机直接输出各相绕组的电位控制信号，经光电隔离后传送给功率驱动放大
器，这时仍可采用重复输出的方式来防止步进电机失步。只是这时的重复周期与步进电机
的转速之间要有严格的关系，如每个换相周期内重复输出两三次。在步进电机以最高速度
运转时，ＣＰＵ 最好以主要机时来完成电机的控制。在作进给运动时，由于速度较慢，可以
很容易地实现重复功能，减少失步，并有充足的时间来完成各种控制算法。
对于Ｄ／Ａ 转换方式实现的输出，因本质上仍为数字量，同样可以通过重复输出的方式
来提高输出通道的抗 干 扰 性 能，在 不 影 响 反 应 速 度 的 前 提 下，在 模 拟 输 出 端 接 一 适 当 的
ＲＣ滤波电路（起到增加惯性的效果），配合重复输出措施便能基本消除模拟输出通道上的
干扰信号。
．． 程序执行过程中的软件抗干扰
一、程序“跑飞”
前面几项抗干扰措施都是针对Ｉ／Ｏ 通道而 言 的。若 干 扰 信 号 还 未 作 用 到 ＣＰＵ 本 身，
则 ＣＰＵ 还能正确地执行各种抗干扰程序；若干扰信号已经通过某种途径作用到 ＣＰＵ 上，
则 ＣＰＵ 就不能按正常状态执行程序，从而引起混乱，这就是通常所说的程序“跑飞”。程序
“跑飞”后使其恢复正常最简单的方法是让 ＣＰＵ 复位，让程序从头开始重新运行。这种方
法虽然简单，但需要人的参与，而且复位不及时。人工复位一般是在整个系统已经瘫痪，
无计可施的情况下才不得已而为之 的。因 此 在 进 行 软 件 设 计 时 就 要 考 虑 到 万 一 程 序“跑
　　单片机原理及接口技术　　
飞”，应让其能够自动恢复到正常状态下运行。
二、指令冗余
程序“跑飞”后往往将一些操作数当作指令码来执行，从而引起整个程序的混乱。采用“指
令冗余”是使“跑飞”的程序恢复正常的一种措施。所谓“指令冗余”，就是在一些关键的地方人
为地插入一些单字节的空操作指令 ＮＯＰ。当程序“跑飞”到某条单字节指令上时，就不会发生
将操作数当成指令来执行的错误。对于 ＭＣＳ 单片机来说，所有的指令都不会超过 个
字节，因此在某条指令前面插入两条 ＮＯＰ指令，则该条指令就不会被前面冲下来的失控程序
拆散，而会得到正确的执行，从而使程序重新纳入轨道。通常是在一些对程序的流向起关键
作用的指令前插入两条 ＮＯＰ 指 令，这 些 指 令 有 ＲＥＴ、ＲＥＴＩ、ＡＣＡＬＬ、ＬＣＡＬＬ、ＳＪＭＰ、
ＡＪＭＰ、ＪＺ、ＪＮＺ、ＪＣ、ＪＮＣ、ＪＢ、ＪＮＢ、ＪＢＣ、ＣＪＮＺ、ＤＪＮＺ等。在某些对系统工作状态至关重要
的指令（如ＳＥＴＢＥＡ之类）前也可插入两条 ＮＯＰ指令，以保证被正确执行。值得注意的是，
在一个程序中“指令冗余”不能过多，否则会降低程序的执行效率。
三、软件陷阱
采用“指令冗余”，使“跑飞”的程序恢复正常是有条件的，首先“跑飞”程序必须落到程
序区，其次必须执行到所设置的冗余指令。如果“跑飞”的程序落到非程序区（如 ＥＰＲＯＭ
中未用完的空间或某些数据表格区等），或在执行到冗余指令前已经形成一个死循环，则
“指令冗余”措施就不能 使“跑 飞”的 程 序 恢 复 正 常 了。这 时 可 采 用 另 一 个 抗 干 扰 措 施，即
“软件陷阱”。“软件陷阱”是一条引导指令，强行将捕获的程序引向一个指定的地址，在那
里有一段专门处理错误的程序。假设这段处理错误的程序入口地址为 ＥＲＲ，则下面三条指
令即组成一个“软件陷阱”：
　　ＮＯＰ
　　ＮＯＰ
　　ＬＪＭＰ ＥＲＲ
“软件陷阱”一般安排在下列四种地方。
．未使用的中断向量区
ＭＣＳ 单片机的中断向量区为 Ｈ～ＦＨ，如果系统程序未使用完全部中断
向量区，则可在剩余的中断向量区安排“软件陷阱”，以便能捕捉到错误的中断。如某系统
使用了两个外部中断ＩＮＴ、ＩＮＴ和一个定时器溢出中断 Ｔ，它们的中断服务子程序入
口地址分别为 ＦＵＩＮＴ、ＦＵＩＮＴ和 ＦＵＴ，即可按下面的方式来设置中断向量区：
　　　　　　　　　　ＯＲＧ Ｈ　　
ＨＳＴＡＲＴ： ＬＪＭＰ ＭＡＩＮ ；引向主程序入口
Ｈ ＬＪＭＰ ＦＵＩＮＴ ；ＩＮＴ中断服务程序入口
Ｈ ＮＯＰ ；冗余指令
Ｈ ＮＯＰ
Ｈ ＬＪＭＰ ＥＲＲ ；陷阱
Ｈ ＬＪＭＰ ＦＵＴ ；Ｔ中断服务程序入口
ＥＨ ＮＯＰ ；冗余指令
ＦＨ ＮＯＰ
Ｈ ＬＪＭＰ ＥＲＲ ；陷阱
　　第 章 单片机系统的抗干扰技术　　
Ｈ ＬＪＭＰ ＦＵＩＮＴ ；ＩＮＴ中断服务程序入口
Ｈ ＮＯＰ ；冗余指令
Ｈ ＮＯＰ
Ｈ ＬＪＭＰ ＥＲＲ ；陷阱
ＢＨ ＬＪＭＰ ＥＲＲ ；未使用 Ｔ中断，设陷阱
ＥＨ ＮＯＰ ；冗余指令
ＦＨ ＮＯＰ
Ｈ ＬＪＭＰ ＥＲＲ ；陷阱
Ｈ ＬＪＭＰ ＥＲＲ ；未使用串口中断，设陷阱
Ｈ ＮＯＰ ；冗余指令
Ｈ ＮＯＰ
Ｈ ＬＪＭＰ ＥＲＲ ；陷阱
ＢＨ ＬＪＭＰ ＥＲＲ ；未使用 Ｔ中断，设陷阱
ＥＨ ＮＯＰ ；冗余指令
ＦＨ ＮＯＰ
Ｈ ＭＡＩＮ： … ；主程序
．未使用的大片 ＥＰＲＯＭ 空间
程序一般都不会占用 ＥＰＲＯＭ 芯片的全部空间，对于剩余未编程的 ＥＰＲＯＭ 空间，一
般都维持原状，即其内容为ＦＦＨ。ＦＦＨ 对于 ＭＣＳ 单片机的指令系统来说是一条单
字节的指令：ＭＯＶＲ，Ａ。如果 程 序“跑 飞”到 这 一 区 域，则将顺利向后执行，不 再 跳 跃
（除非又受到新的干 扰）。因此在这段区域内每隔一段地址设一个陷阱，就一定能捕捉到
“跑飞”的程序。
．表格
有两种表格：一类是数据表格，供 ＭＯＶＣＡ，＠Ａ＋ＰＣ 指令或 ＭＯＶＣＡ，＠Ａ＋ＤＰＴＲ
指令使用，其内容完全不是指令。另一类是散转表格，供ＪＭＰ ＠Ａ＋ＤＰＴＲ 指令使用，其
内容为一系列的 字节指令ＬＪＭＰ或字节指令 ＡＪＭＰ。由于表格的内容与检索值有一一
对应的关系，在表格中间安排陷阱会破坏其连续性和对应关系，因此只能在表格的最后安
排陷阱。如果表格区较长，则安排在最后的陷阱不能保证一定能捕捉“跑飞”来的程序，有
可能在中途再次“跑飞”，这时只能指望别处的陷阱或冗余指令来捕捉。
．程序区
程序区是由一系列的指令构成的，不能在这些指令中间任意安排陷阱，否则会破坏正
常的程序流程。但是，在这些指令中间常常有一些断点，正常的程序执行到断点处就不再
往下执行了，这类指令有ＬＪＭＰ、ＳＪＭＰ、ＡＪＭＰ、ＲＥＴ、ＲＥＴＩ，这时ＰＣ的值应发生正常跳
变。如果在这些地方设置陷阱就有可能捕捉到“跑飞”的程序。例如，对一个累加器 Ａ 的内
容的正、负和零的情况进行三分支的程序，软件陷阱安排如下：
　　　　　　ＪＮＺ ＸＹＺ　　　　　
… ；零处理
ＡＪＭＰ ＡＢＣ ；断点
　　单片机原理及接口技术　　
ＮＯＰ
ＮＯＰ
ＬＪＭＰ ＥＲＲ ；陷阱
ＸＹＺ： ＪＢ ＡＣＣ．，ＵＶＷ
… ；正处理
ＡＪＭＰ ＡＢＣ ；断点
ＮＯＰ
ＮＯＰ
ＬＪＭＰ ＥＲＲ ；陷阱
ＵＶＷ： … ；负处理
ＡＢＣ： ＭＯＶ Ａ，Ｒ ；取结果
ＲＥＴ ；断点
ＮＯＰ
ＮＯＰ
ＬＪＭＰ ＥＲＲ ；陷阱
由于软件陷阱都安 排 在 正 常 程 序 执 行 不 到 的 地 方，故 不 会 影 响 程 序 的 执 行 效 率。在
ＥＰＲＯＭ 容量允许的条件下，这种软件陷阱多一些为好。
四、ＷＡＴＣＨＤＯＧ
如果“跑飞”的程序落到一个临时 构 成 的 死 循 环 中，冗 余 指 令 和 软 件 陷 阱 都 将 无 能 为
力，这时可采取 ＷＡＴＣＨＤＯＧ（俗称“看门狗”）措施。
ＷＡＴＣＨＤＯＧ 有如下特性：
（）本身能独立工作，基本上不依赖于ＣＰＵ。ＣＰＵ 只在一个固定的时间间隔内与之打
一次交道，表明整个系统“目前尚属正常”。
（）当 ＣＰＵ 落入死循环后，能及时发现并使整个系统复位。
在 系列单片机和增强型 系列单片机中，已将该系统做入芯片里，使用起来
很方便。而 在 普 通 型 系 列 单 片 机 系 统 中，必须由用户自己建立。如 果 要 达 到
ＷＡＴＣＨＤＯＧ 的真正目标，该系统必须包含一定的硬 件 电 路，它 完 全 独 立 于 ＣＰＵ 之 外。
如果为了简化电路，也可采用纯软件的 ＷＡＴＣＨＤＯＧ 系统。
ＷＡＴＣＨＤＯＧ 硬件电路为一独立于 ＣＰＵ 之外的单稳部件，可用单稳电路构成，也可
用自带脉冲源的计数器构成。ＣＰＵ 正常工作时每隔一段时间就输出一个脉冲，将单稳系统
触发到暂稳态，当暂稳态的持续时间设计得比 ＣＰＵ 的触发周期长时，单稳态系统就不能
回到稳态。当 ＣＰＵ 陷入死循环后，再也不去触发单稳系统了，单稳系统便可顺利返回稳
态，利用它返回稳态时输出的信号作为复位信号，便可使 ＣＰＵ 退出死循环。
图． 所示为采用硬件电路组成的 ＷＡＴＣＨＤＯＧ。十六进制计数器对振荡电路发出
的脉冲计数，当计到第 个脉冲时 Ｑ 端变成高电平。单片机执行一个从 Ｐ． 输出清零脉
冲的固定程序，只要每一次清零脉冲的时间间隔小于 个振荡脉冲周期，计数器就总计不
到 ，ＱＤ 端就一直保持低电平。如果 ＣＰＵ 受到干扰使程序“跑飞”，就无法执行这个发出
清零脉冲的固定程序，计数器就会计数到 ，使 ＱＤ 端变成高电平，经微分电路 Ｃ、Ｒ 输
出一个正脉冲到 单 片 机 的 ＲＥＳＥＴ 端，使 ＣＰＵ 复 位。此 电 路 中 还 包 括：上 电 复 位
　　第 章 单片机系统的抗干扰技术　　
（Ｃ、Ｒ）和人工复位（ＫＡ，Ｒ，Ｒ）两部分。
图 ． 硬件 ＷＡＴＣＨＤＯＧ电路
也可以用软件程序来形成 ＷＡＴＣＨＤＯＧ。例如，可以采用 的定时器 Ｔ 来形成
ＷＡＴＣＨＤＯＧ。将 Ｔ 的溢出中断设为高优先级中断，其它中断均设置为低优先级中断，
若采用 ＭＨｚ的时钟，则可用以下程序使 Ｔ定时约 ｍｓ来形成软件 ＷＡＴＣＨＤＯＧ：
　　ＭＯＶ ＴＭＯＤ，＃Ｈ 　　　；置 Ｔ 为定时器
　　ＳＥＴＢＥＴ ；允许 Ｔ 中断
　　ＳＥＴＢＰＴ ；设置 Ｔ 为高优先级中断
　　ＭＯＶ ＴＨ，＃ＥＨ ；定时约 ｍｓ
　　ＳＥＴＢＴＲ ；启动 Ｔ
　　ＳＥＴＢＥＡ ；开中断
软件 ＷＡＴＣＨＤＯＧ 启动后系统工作程序必须每隔小于 ｍｓ的时间执行一次 ＭＯＶ
ＴＨ，＃ＥＨ 指令，重新设置 Ｔ的计数初值。如果程序跑飞后执行不到这条指令，则在
ｍｓ之后即会产生一次 Ｔ溢出中断，在 Ｔ的中断向量区安放一条转移到出错处理程序
的指令 ＬＪＭＰＥＲＲ，由出错处理程序来处理各种善后工作。采用软件 ＷＡＴＣＨＤＯＧ 有一
个弱点，就是如果“跑飞”的程序使某些操作数变成了修改 Ｔ 功能的指令，则执行指令后
软件 ＷＡＴＣＨＤＯＧ 就会失效，因此软件 ＷＡＴＣＨＤＯＧ 的可靠性不如硬件高。
．． 系统的恢复
一、系统的复位
前面列举的各项措施只解决了如何发现系统受到干扰和如何捕捉“跑飞”的程序，但仅
此还不够，还要能够让单片机根据被破坏的残留信息自动恢复到正常的工作状态。硬件复
位是使单片机重新恢复正常工作状态的一个简单有效的方法。硬件复位后 ＣＰＵ 被重新初
始化，所有被激活的中断标志都被清除，程序从 Ｈ 地址重新开始执行。硬件复位又称
为“冷启动”，是将系统当时的状态全部作废，重新进行彻底的初始化来使系统的状态得到
恢复。用软件抗干扰措施来使系统恢复到正常状态，是对系统的当前状态进行修复和有选
择地进行部分初始化，这种操作又称为“热启动”。热启动时首先要对系统进行软件复位，
　　单片机原理及接口技术　　
也就是执行一系列指令来使各种专用寄存器达到与硬件复位时同样的状态，这里需要注意
的是还要清除中断激活标志。如用软件 ＷＡＴＣＨＤＯＧ 使系统复位时，程序出错有可能发
生在中断 子 程 序 中，中 断 激 活 标 志 已 经 置 位，它将阻止同级的中断响应，由 于 软 件
ＷＡＴＣＨＤＯＧ 是高级中断，故它将阻止所有的中断响应。由此可见清除中断激活标志的重
要性。在所有的指令中，只有 ＲＥＴＩ指令能清除中断激活标志。前面提到的出错处理程序
ＥＲＲ主要是完成这一功能。这部分程序如下：
　　　　　　ＯＲＧ Ｈ　　　　　
ＥＲＲ： ＣＬＲ ＥＡ ；关中断
ＭＯＶ ＤＰＴＲ，＃ＥＲＲ ；准备返回地址
ＰＵＳＨ ＤＰＬ
ＰＵＳＨ ＤＰＨ
ＲＥＴＩ ；清除高优先级中断激活标志
ＥＲＲ： ＭＯＶ Ｈ，＃ＡＡＨ ；重建上电标志
ＭＯＶ Ｈ，＃Ｈ
ＣＬＲ Ａ ；准备复位地址
ＰＵＳＨ ＡＣＣ ；压入复位地址
ＰＵＳＨ ＡＣＣ
ＲＥＴＩ ；清除低级中断激活标志
在这段程序中，用两条 ＲＥＴＩ指令来代替两条 ＬＪＭＰ指令，从而清除了全部的中断激活标
志。另外在Ｈ、Ｈ 两个单元中，存放一个特定数ＡＡＨ 作为“上电标志”。系统在执
行复位操作时可以根据这一标志来决定是进行全面初始化，还是部分初始化。如前所述，
热启动时进行部分初始化，但如果干扰过于严重而使系统遭受的破坏太大，热启动不能使
系统得到正确的恢复时，则只有采取冷启动，对系统进行全面初始化来使之恢复正常。系
统采用启动方式的策略如图 ． 所示。
图 ． 系统复位策略
　　第 章 单片机系统的抗干扰技术　　
二、热启动的过程
在进行热启动时，为使启动过程能顺利进行，首先关中断并重新设置堆栈。即使系统
复位的第一条指令 为 关 中 断 指 令。因为热启动过程是由软件复位（如 软 件 ＷＡＴＣＨＤＯＧ
等）引起的，这时中断系统未被关闭，有些中断请求允许正在排队等待响应；再者，在热启
动过程中要执行各种子程序，而子程序的工作需要堆栈的配合，在系统得到正确恢复之前
堆栈指针的值是无法确定的，所以在正式恢复之前要先设置好栈底，即第二条指令应为重
新设置栈底指令。然后，将所有的Ｉ／Ｏ 设备都设置成安全状态，封锁Ｉ／Ｏ 操作，以免干扰
造成的破坏进一步扩大。接着，根据系统中残留的信息进行恢复工作。系统遭受干扰后会
使 ＲＡＭ 中的信息受到不同程度的破坏，ＲＡＭ 中的信息有：系统的状态信息，如各种软件
标志，状态变量等；预先设置的各种参数；临时采集的数据或程序运行中产生的暂时数据。
对系统进行恢复实际上就是恢复各种关键的状态信息和重要的数据信息，同时尽可能地纠
正因干扰而造成的错误信息，对于那些临时数据则没有必要进行恢复。在恢复了关键的信
息之后，还要对各种外围芯片重新写入它们的命令控制字，必要时还需要补充一些新的信
息，才能使系统重新进入工作循环。
三、系统信息的恢复
系统中的信息是以代码形式存放在 ＲＡＭ 中的，为了使这些信息在受到破坏后能得到
图 ． 三中取二表决流程
正确的恢复，存放系统信息时应该采取
代码冗余措施。下面介绍一种三重冗余
编码，它是将每个重要的系统信息重复
存放在三个互不相关的地址单元中，建
立双重数 码 备 份。当 系 统 受 到 干 扰 后，
就可以根据这些备份的数据进行系统信
息的恢 复。这 三 个 地 址 应 尽 可 能 地 独
立，如果 采 用 了 片 外 的 ＲＡＭ，则 应 在
片外 ＲＡＭ 中对重要的系统信息进行双
重数据备份。片外 ＲＡＭ 中的信息只有
ＭＯＶＸ指令才能对它进行修改，而 能
够修改片内 ＲＡＭ 中信息的指令则多得
多，因此在片外 ＲＡＭ 中进行双重数据
备份是十 分 必 要 的。通 常 将 片 内 ＲＡＭ
中的数据供程序使用以提高程序的执行
效率，当数据需要进行修改时应将片外
ＲＡＭ 中的备份数据作同样的修改。在
对系统 信 息 进 行 恢 复 时，通 常 采 用 图
． 所示的三中取二的表决流程。
首先将要恢复的单字节信息及它的两个备份信息分别存放到工作寄存器 Ｒ、Ｒ 和
Ｒ 中，再调用表决子程序。子程序出口时，若 Ｆ＝，表示表决成功，即三个数据中有两
个是相同的；若 Ｆ＝，表示表决失败，即三个数据互不相同。表决结果存放在累加器 Ａ
中，程序如下：
　　单片机原理及接口技术　　
　　ＶＯＴＥ： ＭＯＶ Ａ，Ｒ　　　；第一数据与第二数据比较
ＸＲＬ Ａ，Ｒ
ＪＺ ＶＯＴＥ
ＭＯＶ Ａ，Ｒ ；第一数据与第三数据比较
ＸＲＬ Ａ，Ｒ
ＪＺ ＶＯＴＥ
ＭＯＶ Ａ，Ｒ ；第一数据与第三数据比较
ＸＲＬ Ａ，Ｒ
ＪＺ ＶＯＴＥ
ＳＥＴＢ Ｆ ；失败
ＲＥＴ
ＶＯＴＥ： ＭＯＶ Ａ，Ｒ ；以第二数据为准
ＭＯＶ Ｒ，Ａ
ＶＯＴＥ： ＣＬＲ Ｆ ；成功
ＭＯＶ Ａ，Ｒ ；取结果
ＲＥＴ
对于双字节数据，表决前将三份数据分别存入 ＲＲ、ＲＲ、ＲＲ中，表决成功后，
结果在 ＲＲ中。程序如下：
　　ＶＯＴＥ： ＭＯＶ Ａ ，Ｒ ；第一数据与第二数据比较
ＸＲＬ Ａ，Ｒ
ＪＮＺ ＶＯＴＥ
ＭＯＶ Ａ，Ｒ
ＸＲＬ Ａ，Ｒ
ＪＺ ＶＯＴＥ
ＶＯＴＥ： ＭＯＶ Ａ，Ｒ ；第一数据与第三数据比较
ＸＲＬ Ａ，Ｒ
ＪＮＺ ＶＯＴＥ
ＭＯＶ Ａ，Ｒ
ＸＲＬ Ａ，Ｒ
ＪＺ ＶＯＴＥ
ＶＯＴＥ： ＭＯＶ Ａ，Ｒ ；第二数据与第三数据比较
ＸＲＬ Ａ，Ｒ
ＪＮＺ ＶＯＴＥ
ＭＯＶ Ａ，Ｒ
ＸＲＬ Ａ，Ｒ
ＪＺ ＶＯＴＥ
ＶＯＴＥ： ＳＥＴＢ Ｆ ；失败
ＲＥＴ
ＶＯＴＥ： ＭＯＶＫＧＡ，Ｒ ；以第二数据为准
　　第 章 单片机系统的抗干扰技术　　
ＭＯＶ Ｒ，Ａ
ＭＯＶ Ａ，Ｒ
ＭＯＶ Ｒ，Ａ
ＶＯＴＥ： ＣＬＲ Ｆ ；成功
ＲＥＴ
所有重要的系统信息都要一一进行表决，对于表决成功的信息应将表决结果再写回到
原来的地方，以进行统一；对于表决失败的信息要进行登记。全部表决结束后再检查登记，
如果全部成功，系统将得到满意的恢复。如果有失败信息，则将根据该失败信息的特征采
取相应的补救措施，如从现场采集数据来帮助判断，或按该信息的初始值处理，其目的都
是使系统得到尽可能的恢复。
． 数 字 滤 波
当随机干扰混入输入信号时，可采用滤波器滤掉信号中的无用成分，提高信号质量。
模拟滤波器在低频和甚低频时实现是比较困难的。而数字滤波器不存在这些问题，它具有
高精度、高可靠性和高 稳 定 性 的 特 点，因而被广泛用于克服随机误差。数字滤波有如下
优点：
（）数字滤波是由软件程序实现的，不需要硬件，因此不存在阻抗匹配的问题。
（）对于多路信号输入通道，可以共用一个软件“滤波器”，从而降低设备的硬件成本。
（）只要适当改变滤波器程序或运算参数，就能方便地改变滤波特性，这对于低频脉
冲干扰和随机噪声的克服特别有效。
．． 低通滤波
若一阶 ＲＣ模拟低通 滤 波 器 的 输 入 电 压 为 Ｘ（ｔ），输 出 为 Ｙ（ｔ），它 们 之 间 存 在 如 下
关系：
ＲＣｄＹ（ｔ）
ｄｔ ＋Ｙ（ｔ）＝ Ｘ（ｔ） （ ）
为了进行数字化，必须应用它们的采样值，即
Ｙｎ ＝ Ｙ（ｎΔｔ），Ｘｎ ＝ Ｘ（ｎΔｔ）
如果采样间隔 Δｔ足够小，则式（ ）的离散值近似为
ＲＣＹ（ｎΔｔ）－Ｙ［（ｎ－）Δｔ］
Δｔ
＋Ｙ（ｎΔｔ）＝ Ｘ（ｎΔｔ） （ ）
即 ＋ＲＣ
Δ （ ）ｔ
Ｙｎ ＝ Ｘｎ ＋ＲＣ
Δｔ
Ｙｎ－ （ ）
令 ａ＝／ ＋ＲＣ
Δ （ ）ｔ ，则式（ ）可化为
Ｙｎ ＝ａＸｎ ＋ （－ａ）Ｙｎ－ （ ）
若采样间隔 Δｔ足够小，则ａ＝ＲＣ
Δｔ，滤波器的截止频率为
ｆｃ ＝
πＲＣ ＝ ａ
πΔｔ
（ ）
　　单片机原理及接口技术　　
系数ａ愈大，滤波器的截止频率愈高。若取ｔ＝ μｓ，ａ＝／，则频率为
ｆｃ ＝ ／
π××－ ＝．Ｈｚ
根据式（ ）列出的数字滤波器算法流程见图 ．。
图 ． 低通滤波器程序流程图
为计算方便，ａ取一整数，（－ａ）用－ａ来代替。计算结果舍去最低字节即可，设
Ｙｎ－存放在 Ｈ（整数）和 Ｈ（小数）两单元中，Ｙｎ 存放在 Ｈ（整数）和 Ｈ（小数）中。
程序如下：
　　Ｆ： ＭＯＶ Ｈ，Ｈ 　　　；更新 Ｙｎ－
ＭＯＶ Ｈ，Ｈ
ＡＣＡＬＬＩＮＰＵＴ ；采样 Ｘｎ
ＭＯＶ Ｂ，＃ ；计算ａＸｎ
ＭＵＬ ＡＢ
ＭＯＶ Ｈ，Ｂ ；临时存入 Ｙｎ 中
ＭＯＶ Ｈ，Ａ
ＭＯＶ Ｂ，＃ ；计算（－ａ）Ｙｎ－
ＭＯＶ Ａ，Ｈ
ＭＵＬ ＡＢ
ＲＬＣ Ａ
ＭＯＶ Ａ，Ｂ
ＡＤＤＣ Ａ，Ｈ ；累加到 Ｙｎ 中
ＭＯＶ Ｈ ，Ａ
ＩＮＣ Ｆ
ＩＮＣ Ｈ
Ｆ：ＭＯＶ Ｂ，＃
ＭＯＶ Ａ，＃Ｈ
ＭＵＬ ＡＢ
ＡＤＤ Ａ，Ｈ
　　第 章 单片机系统的抗干扰技术　　
ＭＯＶ Ｈ，Ａ
ＭＯＶ Ａ，Ｂ
ＡＤＤＣ Ａ，Ｈ
ＭＯＶ ，Ａ
ＲＥＴ
．． 限幅滤波
系统的输入端如果窜入尖脉冲干扰，会造成信号的严重失真。对于这种随机干扰，限
幅滤波是一种有效 的 方 法，基 本 思 路 是 比 较 相 邻（ｎ 和 ｎ－ 时 刻）的 两 个 采 样 值 Ｙｎ 和
Ｙｎ－，根据经验确定两次采样允许的最大偏差。如果两次采样值 Ｙｎ 和 Ｙｎ－的差值超过了
允许的最大偏差范围，则认为发生了随机干扰，并认为最后一次采样值 Ｙｎ 为非法值，应予
以剔除。剔除 Ｙｎ 后，可用 Ｙｎ－代替 Ｙｎ。若未超过允许的最大偏差范围，则认为本次采样
值有效。程序流程如图．所示。设当前采样值存于Ｈ，上次采样值存于Ｈ，结果存
于 Ｈ，最大允许偏差设为Ｈ，则限幅滤波程序如下：
图 ． 限幅滤波程序流程图
　　　　　　ＰＵＳＨ ＡＣＣ　　　　　　；保护现场
ＰＵＳＨ ＰＳＷ
ＭＯＶ Ａ，＃Ｈ ；Ｙｎ→Ａ
ＣＬＲ Ｃ
ＳＵＢＢ Ａ，Ｈ ；求 Ｙｎ－Ｙｎ－－
ＩＮＣ ＬＰ ；Ｙｎ－Ｙｎ－≥吗？
ＣＰＬ Ａ ；Ｙｎ＜Ｙｎ－，求补
　　单片机原理及接口技术　　
ＬＰ： ＣＬＲ Ｃ
ＣＪＮＥ Ａ，＃Ｈ，ＬＰ ；Ｙｎ－Ｙｎ－＞ΔＹ？
ＬＰ ： ＭＯＶ Ｈ，Ｈ ；等于 ΔＹ，本次采样值有效
ＳＪＭＰ ＬＰ
ＬＰ： ＪＣ ＬＰ ；小于 ΔＹ，本次采样值有效
ＭＯＶ Ｈ，Ｈ ；大于 ΔＹ，Ｙｎ＝Ｙｎ－
ＬＰ： ＰＯＰ ＰＳＷ
ＰＯＰ ＡＣＣ
ＲＥＴ
只有当本次采样值小于上次采样值时，才进行求补，保证本次采样值有效。
．． 中值滤波
中值滤波是对某一被测参数连续采样ｎ次（一般ｎ取奇数），然后把ｎ次采样值按大小
排列，取中间值为本次采样值，中值滤波能有效地克服偶然因素引起的波动或采样器不稳
定引起的误码等脉冲干扰。
设ＳＡＭＰ为存放采样值的内存单元首地址，ＤＡＴＡ 为存放滤波值的内存单元地址，Ｎ
为采样值个数，中值滤波程序如下：
　　Ｆ：　　ＭＯＶ Ｒ，＃Ｎ－ 　　　　；置循环初值
ＳＯＲＴ：ＭＯＶ Ｒ，Ｒ ；循环次数送 Ｒ
ＭＯＶ Ｒ，ＳＡＭＰ ；采样值首地址 Ｒ
ＬＯＰ： ＭＯＶ Ａ，＠Ｒ
ＩＮＣ Ｒ
ＣＬＲ Ｃ
ＳＵＢＢ Ａ，＠Ｒ ；Ｙｎ－Ｙｎ－→Ａ
ＪＣ ＤＯＮＥ ；Ｙｎ＜Ｙｎ－转 ＤＯＮＥ
ＡＤＤ Ａ，＠Ｒ ；恢复 Ａ
ＸＣＨ Ａ，＠Ｒ ；Ｙｎ≥Ｙｎ－，交换数据
ＤＥＣ Ｒ
ＭＯＶ ＠Ｒ，Ａ
ＩＮＣ Ｒ
ＤＯＮＥ：ＤＪＮＥ Ｒ，ＬＯＰ ；Ｒ≠，继续比较
ＤＪＮＥ Ｒ，ＳＯＲＴ ；Ｒ≠，继续循环
ＭＯＶ Ａ，Ｒ
ＡＤＤ Ａ，ＳＡＭＰ ；计算中值地址
ＣＬＲ Ｃ
ＲＲＣ Ａ
ＭＯＶ Ｒ，Ａ
ＭＯＶ ＤＰＴＡ，＠Ｒ ；存放滤波值
ＲＥＴ
　　第 章 单片机系统的抗干扰技术　　
．． 算术平均滤波
对目标参数进行连续采样，然后求取算术平均值作为有效采样值，该算法适用于抑制
随机干扰。
按输入的 Ｎ 个采样数据 Ｘｉ（ｉ＝～Ｎ），寻找一个 Ｙ，使 Ｙ 与各采样值之间的偏差的平
方和最小，即
Ｅ＝ ｍｉｎ ∑
Ｎ
ｉ＝
（Ｙ－Ｘｉ） ［ ］ （ ）
由一元函数求极值原理，可得
Ｙ ＝
Ｎ ∑
Ｎ
ｉ＝
Ｘｉ （ ）
上式即为算术平均滤波的基本算式。
设第ｉ次测量的采样值包含信号成分 Ｓｉ 和噪声成分 ｎｉ，则进行 Ｎ 次测量的信号成分
之和为
∑
Ｎ
ｉ＝
Ｓｉ ＝ Ｎ·Ｓ （ ）
噪声的强度是用均方根来衡量的，当噪声为随机信号时，进行 Ｎ 次测量的噪声强度之和为
∑
Ｎ
ｉ＝
ｎ
槡 ｉ ＝ 槡Ｎｎ （ ）
上述Ｓ、ｎ分别表示进行 Ｎ 次测量后信号和噪声的平均幅度。这样对 Ｎ 次测量进行算术平
均后的信噪比为
ＮＳ
槡Ｎｎ＝ 槡Ｎ Ｓ
ｎ （ ）
式中Ｓ／ｎ是求算术平 均 前 的 信 噪 比，因此采用算术平均后，信 噪 比 提 高 了 槡Ｎ倍。由 式
（ ）知，算术平均法对信号的平滑滤波程度完全取决于 Ｎ。当 Ｎ 较大时，平滑度高，但
灵敏度低，即外界信号的变化对测量结果 Ｙ 的影响小；当 Ｎ 较小时，平滑度低，但灵敏度
高。为方便求平均值，Ｎ 一般取 、、 之类的 的整数幂，以便用移位来代替除法。设
次采样值依次存放在 Ｈ～Ｈ 连续单元中，平均值求出后，保留在累加器 Ａ 中。程序
如下：
　　Ｆ：　　ＣＬＲ Ａ 　　　　　　　　；清累加器
ＭＯＶ Ｒ，Ａ
ＭＯＶ Ｒ，Ａ
ＭＯＶ Ｒ，＃Ｈ ；指向第一个采样值
ＦＬ： ＭＯＶ Ａ，＠Ｒ ；取一个采样值
ＡＤＤ Ａ，Ｒ ；累加到 Ｒ、Ｒ中
ＭＯＶ Ｒ，Ａ
ＣＬＲ Ａ
ＡＤＤＣ Ａ，Ｒ
ＭＯＶ Ｒ，Ａ
　　单片机原理及接口技术　　
ＪＮＣ Ｒ
ＣＪＮＣ Ｒ，＃Ｈ，ＦＬ ；累加完次
ＦＬ： ＳＷＡＰＡ ；（ＲＲ）／
ＲＬ Ａ
ＸＣＨ Ａ，Ｒ
ＳＷＡＰ Ａ
ＲＬ Ａ
ＡＤＤ Ａ，＃Ｈ ；四舍五入
ＡＮＬ Ａ，＃ＦＨ
ＡＤＤＣ Ａ，Ｒ
ＲＥＴ ；结果在 Ａ 中
除了上面介绍的几种滤波方法以外，常用的滤波方 法 还 有：去 极 值 平 均、加 权 平 均、
滑动平均以及复合滤波等，此处不再一一叙述。
习 题 与 思 考 题
．什么是干扰？干扰源有哪几种类型？
．什么是串模干扰和共模干扰？应如何抑制？
．系统接地时应注意什么问题？
．对于数字量Ｉ／Ｏ 通道如何实现软件抗干扰？
．软件抗干扰中有几种方法对待程序“跑飞”？各有何特点？
．软件陷阱一般应设在程序的什么地方？
．要使受干扰的系统重新恢复正常，何时采用冷启动？何时采用热启动？热启动时要
进行那些工作？
．采用数字滤波克服随机误差具有什么特点？
．常用的数字滤波有几种方法？各有什么特点？
　　第 章 单片机系统的抗干扰技术　　
第章
　　具有内核的位单片机简介
　　本章主要介绍以为核心的 位单片机，如 Ａｔｍｅｌ公司生产的 ＡＴＣ 系列单片
机，Ｉｎｔｅｌ公司生产的ＸＣＧＡ／ＧＢ系列单片机以及 Ｐｈｉｌｉｐｓ公司推出的ＸＣ单片机。
这几种型号的单片机软件与 ＭＣＳ 指令兼容，但硬件扩展功能更强。下面简要介绍这
几种单片机的硬件结构，以便在工程应用中能够选择性能价格比高的系列单片机。
． ＡＴＣ系列单片机
ＡＴＣ系列单片机是 Ａｔｍｅｌ公司于年开始研制生产的，优越的性能价格比使其
成为颇受欢迎的位单片机。
ＡＴＣ系列与 ＭＣＳ 系列单片机相比有两大优势：第一，片内程序存储器采用闪
速存储器，使程序的写入更加方便；第二，提供了更小尺寸的芯片（ＡＴＣ／），使
整个硬件电路的体积更小。
ＡＴＣ系列单片机有种型号：ＡＴＣ、ＡＴＣ、ＡＴＣ、ＡＴＣ。其
中 ＡＴＣ／以较小的体积、良好的性能价格比备受青睐，在家电产品、工业控制、
计算机产品、医疗器械、汽车工业、智能仪器等应用方面成为用户降低成本的首选器件。
下面以 ＡＴＣ为代表对 ＡＴＣ系列单片机作一简要阐述。
．． ＡＴＣ主要性能
ＡＴＣ是 Ａｔｍｅｌ公司生产的带ＫＢ闪速可编程可擦除只读存储器（ＥＰＲＯＭ）的
位单片机，它具有如下主要特性：
（）与 ＭＣＳ 兼容；
（）内部带ＫＢ可编程闪速存储器；
（）寿命为次擦／写循环；
（）数据保留时间为年；
（）工作电压范围为．～Ｖ；
（）全静态工作频率为～Ｈｚ；
（）两级程序存储器锁定；
　　单片机原理及接口技术　　
（）×位内部 ＲＡＭ；
（）条可编程Ｉ／Ｏ 线；
（）个位定时器／计数器；
（）个两级中断源；
（）可编程全双工串行 ＵＡＲＴ 通道；
（）直接对 ＬＥＤ驱动输出；
（）片内精确的模拟比较器；
（）片内振荡器和时钟电路；
（）低功耗的休眠和掉电模式。
．． ＡＴＣ内部结构及引脚描述
ＡＴＣ单片机的内部结构如图．所示，从图中可以看出，其内部结构与
单片机的内部结构基 本 一 致，区 别 只 是 增 加 了 一 个 模 拟 比 较 器，减 少 了 两 个 对 外 的 端 口
（Ｐ、Ｐ口），输出端口 Ｐ、Ｐ有独特的功能。
图 ． ＡＴＣ内部结构
ＡＴＣ减少了两个外部端口，因而芯片的外部引脚可以大大减少，芯片尺寸可以
很小，其引脚配置如图．所示。它是一个有个引脚双列直插式的芯片，其引脚描述
如下：
ＶＣＣ：电源电压。
ＧＮＤ：接地。
　　第 章 具有内核的位单片机简介　　
图 ． ＡＴＣ引脚配置
ＲＳＴ：复位输入。当 ＲＳＴ 变为高电平并保持个机器周期时，所有Ｉ／Ｏ 引脚复位至高
阻状态。
ＸＴＡＬ：反向振荡放大器的输入及内部时钟工作电路的输入。
ＸＴＡＬ：来自反向振荡放大器的输出。
Ｐ口：位双向Ｉ／Ｏ 口，引脚 Ｐ．和 Ｐ．需要外部上拉，可用作片内精确模拟比较
器的正向输入（ＡＩＮ）和反向输入（ＡＩＮ）。Ｐ口输出缓冲器能接收ｍＡ 电流，并能直接
驱动 ＬＥＤ显示器；Ｐ口引脚写入“”后，可用作输入。在闪速编程和编程校验期间，Ｐ口
也可接收编码数据。
Ｐ口：引脚 Ｐ．～Ｐ．与 Ｐ．为 个带内部上拉的双向Ｉ／Ｏ 引脚。Ｐ．在内部已
与片内比较器输出相连，不能作为通用Ｉ／Ｏ 引脚访问。Ｐ口的输出缓冲器能接收ｍＡ
电流；Ｐ口写入“”后，内部上拉，可用作输入。Ｐ口也可用作特殊功能口，其功能见表
．。Ｐ口同时也可为闪速存储器编程和编程校验接收控制信号。
表 ． Ｐ口特殊功能
Ｐ口引脚 特 殊 功 能
Ｐ． ＲＸＤ（串行输入口）
Ｐ． ＴＸＤ（串行输出口）
Ｐ． ＩＮＴ（外部中断）
Ｐ． ＩＮＴ（外部中断 ）
Ｐ． Ｔ（定时器 外部输入）
Ｐ． Ｔ（定时器外部输入）
　　从上述引脚说明可看出，ＡＴＣ没有提供外部扩展存储器与Ｉ／Ｏ 设备所需的地
址、数据、控制信号，因此利用 ＡＴＣ构成的单片机应用系统不能在 ＡＴＣ之
外扩展存储器或Ｉ／Ｏ 设备，也即 ＡＴＣ本身即构成了最小的单片机系统。
．． 特殊功能寄存器ＳＦＲ
与单片机特殊功能寄存器相对应，ＡＴＣ片内设置了个特殊功能寄存
器，统称为特殊功能寄存器块（ＳＦＲ），它们的地址散布在Ｈ～ＦＨ 区域内。表．给
出了这个ＳＦＲ的名称、地址和复位后的初值。
　　单片机原理及接口技术　　
表 ． ＡＴＣ的ＳＦＲ
ＦＨ
ＦＨ
ＥＨ
ＥＨ
ＤＨ
ＤＨ
ＣＨ
ＣＨ
ＢＨ
ＢＨ
ＡＨ
ＡＨ
Ｈ
Ｈ
Ｈ
Ｈ
Ｂ
ＡＣＣ
ＰＳＷ
ＩＰ
ｘ
Ｐ
ＩＥ
ＳＣＯＮ
ＳＢＵＦ
ｘｘｘｘｘｘｘｘ
Ｐ
ＴＣＯＮ
ＴＭＯＤ
ＴＬ
ＴＬ
ＴＨ
ＴＨ
ＳＰ
ＤＰＬ
ＤＰＨ
ＰＣＯＮ
ＦＦＨ
ＦＨ
ＥＦＨ
ＥＨ
ＤＦＨ
ＤＨ
ＣＦＨ
ＣＨ
ＢＦＨ
ＢＨ
ＡＦＨ
ＡＨ
ＦＨ
Ｈ
ＦＨ
Ｈ
　　　　　　注：对未使用的地址操作，读取将返回随机数据，写入的结果不确定。
．． 程序存储器的加密
ＡＴＣ片内有两个锁定位，可以编程（Ｐ），也可以不编程（Ｕ），从而得到种锁
定位保护模式，见表．。
表 ． 种锁定位保护模式
编程锁定位
保护模式
ＬＢ ＬＢ 说　　明
Ｕ Ｕ 没有编程锁定特性
Ｐ Ｕ 禁止对闪速存储器进一步编程
Ｐ Ｐ 同模式，同时禁止校验
　　第 章 具有内核的位单片机简介　　
　　程序存储器加密后，ＣＰＵ 仍可执行其内部指令，但不能从外部读出它，锁定位只能由
芯片擦除操作来实现其擦除。
．． 低功耗工作方式
ＡＴＣ有两种低功耗工作方式：待机方式与掉电方式。
）待机方式（休眠方式）
当利用软件使待机方式位ＩＤＬ（ＰＣＯＮ．）＝时，单片机进入空闲方式。此 时，ＣＰＵ
处于休眠状态，而片内所有其它外围设备都保持工作状态，片内 ＲＡＭ 和所有特殊功能寄
存器内容保持不变。
在待机方式下，当晶振ｆＯＳＣ＝ＭＨｚ，电源电压 ＶＣＣ＝Ｖ 时，电源电流ＩＣＣ从ｍＡ
降至 ｍＡ；而 ＶＣＣ＝Ｖ 时，ＩＣＣ由．ｍＡ 降至ｍＡ。
中断或硬件复位可以终止待机方式。
当待机方式由硬件复位终止时，ＣＰＵ 要从休眠处恢复程序的执行，执行个机器周期
后，内部复位电路才起作用。此时，硬件禁止访问内部 ＲＡＭ，但允许访问端口引脚。为了
防止休眠被复位终止时对端口引脚意外写入的可能性，在生成待机方式的指令后不应紧跟
对端口引脚的写指令。
如果不采用外部上拉，Ｐ．和 Ｐ．应置为“”；如果采用外部上拉，则应置为“”。
）掉电方式
掉电方式由掉电方式位 ＰＤ（ＰＣＯＮ．）＝设置。此时，振荡器停止工作，设置掉电方
式的指令成为最后执行的一条指令，片内 ＲＡＭ 和特殊功能寄存器内容保持不变。
在掉电方式 下，ＶＣＣｍｉｎ ＝ Ｖ。当 ＶＣＣ ＝ Ｖ 时，ＩＣＣｍａｘ ＝μＡ；当 ＶＣＣ ＝ Ｖ 时，
ＩＣＣｍａｘ＝μＡ。
退出掉电方式的唯一方式是硬件复位。
硬件复位将重新定义特殊功能寄存器，但不影响片内 ＲＡＭ。复位的保持时间应足够
长，以便振荡器能重新开始工作并稳定下来。在 ＶＣＣ没有恢复到正常工作电压之前，不应
进行复位。
如果不采用外部上拉，Ｐ．和 Ｐ．应置“”，否则置“”。
．． 闪速存储器的编程
ＡＴＣ单片机内部有ＫＢ的闪速存储器阵列，一片新的 ＡＴＣ，其存储阵
列处于擦除状态（ＦＦＨ），此时可对其编程，存储阵列一次编程 字节，若编程任何非空字
节时，需对整个存储阵列进行片擦除。
编程时，ＡＴＣ利用内部存 储 器 地 址 计 数 器 提 供 寻 址 存 储 器 的 地 址 信 号，ＲＳＴ
上升沿将该地址计数器复位至Ｈ，引脚 ＸＴＡＬ所施加的正向连续脉冲使地址计数器
不断加 。ＲＳＴ 上出现 Ｖ（编程电源 ＶＰＰ）高压时，预示着 字节的编程操作开始，这时
Ｐ口提供编程所需的控制与状态信号，Ｐ口为数据通道，如图 ． 所示。对这些端口或
引脚按图．所示的时序施加正确的控制组合就可通过Ｐ口将数据编程到内部闪速存储
器中。
　　单片机原理及接口技术　　
图 ． 编程闪速存储器
图 ． 闪速存储器编程和校验时序
ＡＴＣ根据引脚 ＲＳＴ 与 Ｐ．～Ｐ．的状态组合可以产生 种编程模式，如表
．所示。
．编程（写代码数据）
ＡＴＣ编程按下述步骤进行：
（）上电过程：ＶＣＣ加电，置 ＲＳＴ 为“Ｌ”（低电平），ＸＴＡＬ为“Ｌ”，其它所有引脚悬
空，等待ｍｓ以上；
（）置 ＲＳＴ 为“Ｈ”（高电平），Ｐ．为“Ｈ”；
（）在引脚 Ｐ．、Ｐ．、Ｐ．、Ｐ．上施加相应的逻辑电平，选定基本编程模式；
　　第 章 具有内核的位单片机简介　　
表 ． 种编程模式
编程模式 ＲＳＴ
Ｐ．／
ＰＲＯＧ
Ｐ． Ｐ． Ｐ． Ｐ．
写代码数据 Ｖ Ｌ Ｈ Ｈ Ｈ
读代码数据 Ｈ Ｈ Ｌ Ｌ Ｈ Ｈ
写锁定位－ Ｖ Ｈ Ｈ Ｈ Ｌ
写锁定位－ Ｖ Ｈ Ｈ Ｌ Ｈ
芯片擦除 Ｖ Ｈ Ｌ Ｌ Ｌ
读特征字节 Ｈ Ｈ Ｌ Ｌ Ｌ Ｌ
　　（）地址信号由内部地址计数器提供（初始值为Ｈ），欲写入该地址中的数据加至
引脚 Ｐ．～Ｐ．上；
（）将 ＲＳＴ 电平升至 Ｖ 启动编程；
（）给Ｐ．施加一负脉冲，则编程内部存储器阵列或锁定位的个字节，字节写周期
采用自定时，通常为．ｍｓ；
（）若要校验已编程数据，将 ＲＳＴ 从Ｖ 降至逻辑电平“Ｈ”，并置引脚 Ｐ．～Ｐ．
为校验模式电平，输出数据即可在 Ｐ口读取；
（）编程下一个地址字节，对 ＸＴＡＬ施加一正脉冲，内部地址计数器加，然后在Ｐ
口上加载欲写入的新数据；
（）重复步骤（）～（），改变数据，递增地址计数器直到ＫＢ存储阵列全部编程或目
标文件结束；
（）下电过程：置 ＸＴＡＬ为“Ｌ”，ＲＳＴ 为“Ｌ”，其它Ｉ／Ｏ 引脚悬空，ＶＣＣ下电。当前
次编程未结束时，不允许开始下一次编程。
如何确定一次编程操作是否结束，ＡＴＣ提供了以下两种方法。
）数据查询特性
ＡＴＣ具有通过数据查询来检测写周期 结 束 的 特 性。在 写 期 间，读 操 作 将 导 致
Ｐ．输出写入数据的补码，一旦写完成，所有输出将出现真实数据，这时可开始下一数据
编程。利用这一特性，可以在启动某一次编程后不断地查询写入数据，直到查询的数据为
真实数据时，就可判定写周期已结束。
）准备好／忙信号
在编程期间，引脚 Ｐ．（ＲＤＹ／ＢＳＹ）提供了编程状态。当引脚 Ｐ．（ＰＲＯＧ）电平升高
后，引脚 Ｐ．电平下降，表示 ＢＵＳＹ，编程结束后 Ｐ．电 平 抬 高，表 示 ＲＥＡＤＹ（见 图
．所示时序）。利用查询该状态信息便可确定编程的结束。
．校验（读代码数据）
进行编程校验时，ＡＴＣ芯 片 各 引 脚 作 用 如 图．所 示，如 果 锁 定 位 ＬＢ和
ＬＢ未被编程，则可通过下述步骤进行校验：
　　单片机原理及接口技术　　
图 ． 校验闪速存储器
（）使 ＲＳＴ 从“Ｌ”变 为“Ｈ”，地 址 计
数器复位Ｈ；
（）提供 适 当 的 控 制 信 号（见 图．
所示时序），从 Ｐ口读取数据与编程写入
数据作比较；
（）给 ＸＴＡＬ施 加 正 脉 冲，地 址 计
数器加；
（）从Ｐ口读个代码数据与编程写
入数据作比较；
（）重复步骤（）、（），直至整个存储
阵列校验完毕。
．写锁定位
写锁定位完成对闪速存储器加密。
按前述编程模式表操作：先选择写锁定位模式，然后将 ＲＳＴ 升至Ｖ，Ｐ．施加编
程脉冲，即可将锁定位写入（改变模式选择 Ｐ．、Ｐ．、Ｐ．、Ｐ．的输入组合来实现锁
定位 ＬＢ、ＬＢ的写入）。不能直接校验锁定位，要通过观察其特性是否被允许来完成。
．芯片擦除
当编程模式选择为芯片擦除模式并使 Ｐ．引脚上施加ｍｓ的 ＰＲＯＧ 脉冲后，整个
闪速存储器（ＫＢ）和个锁定位即可被擦除。擦除后，存储器阵列全为 ＦＦＨ。
．读特征字节
特征字节表示 ＡＴＣ系列芯片的基本特性，由或字节组成，存储于程序存储区
的低端。ＡＴＣ芯片的特征字节位于地址Ｈ、Ｈ、Ｈ 中，当选择读特征字
节模式（Ｐ．＝Ｐ．＝Ｐ．＝Ｐ．＝“Ｌ”）并 采 用 类 似 校 验 步 骤 读 取 数 据 时，即 可 获 得
ＡＴＣ芯片的特征字：
（Ｈ）＝ＥＨ 表示该产品由 Ａｔｍｅｌ生产；
（Ｈ）＝Ｈ 表示是Ｃ／Ｃ；
（Ｈ）＝ＦＦＨ 表示Ｖ 编程。
．． 在线编程
ＡＴＣ编程时需要利用 ＲＳＴ、ＸＴＡＬ、Ｐ口、Ｐ口提供控制信号与加载编程数
据，而这一要求又常与用户系统对这些引脚的要求或操作冲突。因此，在线编程不能直接
在用户工作电路中进行，而要通过特殊电路处理才能实现。图 ．为 ＡＴＣ实现在
线编程的示例，该示例采用选的方法实现连接线路的切换，达到在线编程的目的。利
用微动开关ＳＷ 来选择ＸＴＡＬ的加载，产生选择控制信号Ｓｅｌｅｃｔ，其它线路的切换用选
器件ＬＳ与三态缓冲器ＬＳ实现。当 ＡＴＣ正常工作时，选择控制信号
（Ｓｅｌｅｃｔ＝）控 制 所 有 的 ＬＳ 输 入 Ａ 端 与 输 出 Ｙ 接 通，且 ＬＳ 输 出 有 效，
ＬＳ 三态输出，使得 ＡＴＣ可以对用户电路进行控制操作；当 ＡＴＣ
需要编程时，选择控制信号（Ｓｅｌｅｃｔ＝）控制所有的ＬＳ输入 Ｂ端与输出 Ｙ 接通，且
　　第 章 具有内核的位单片机简介　　
ＬＳ 三态输出，ＬＳ 输出 有 效，使 得 ＡＴＣ可 以 接 受 编 程 电 路 的 控
制，实现编程操作。
图 ． ＡＴＣ在线编程示例
． ＸＣ系列单片机
ＸＣ系列单片机是Ｉｎｔｅｌ公司生产的位增强型单片机，它是以Ｃ为核心的一
种位微控制器，也是一种面向事件控制应用的优选芯片，它与现有 ＭＣＳ 系列单片
机的指令系统兼容，下面以ＸＣＧＢ为代表对ＸＣ系列单片机作一简要阐述。
．． ＸＣＧＢ的特点
ＸＣＧＢ是一种先进的Ｃ微控制器，它具有优良的性能，主 要 包 括：串 行 扩 展
口、通道位 Ａ／Ｄ转换器，可编程的计数器阵列，片内 ＥＰＲＯＭ。其主要特性如下：
（）片内有ＫＢ的 ＥＰＲＯＭ 和字节的 ＲＡＭ；
　　单片机原理及接口技术　　
（） 个可编程计数阵列，包括：×高速Ｉ／Ｏ 通道；比较／捕捉模块；脉冲宽度调制
器；监视定时器；
（） 个位定时／计数器，Ｔ、Ｔ具有种编程方式，Ｔ具有捕捉及波特率生成
方式；
（）通道 位 Ａ／Ｄ转换器，具有种编程方式；
（）专用监视定时器；
（）可编程串行通道，可进行帧错误检测、自动地址识别；
（）串行扩展通道；
（）位可编程Ｉ／Ｏ 口；
（）个中断源，可设置为个优先级；
（）工作温度扩大，环境温度在－～＋℃能正常工作。
．． ＸＣＧＢ的内部结构
ＸＣＧＢ的结构框图如图 ． 所示，该芯片有脚 ＬＣＣ和脚 ＰＬＣＣ 两种封装
形式。
图 ． ＸＣＧＢ结构框图
一、片内 ＲＡＭ 和ＳＦＲ
ＸＣＧＢ片内有个字节数据 ＲＡＭ，其地址为Ｈ～ＦＨ、Ｈ～ＦＦＨ，其中地
址Ｈ～ＦＦＨ 与特殊功能寄存器ＳＦＲ的地址重叠。虽然地址相同，但它们在物理上是相
互独立的。
当一条指令 访 问 地 址 高 于 ＦＨ 的 内 部 区 域 时，ＣＰＵ 应 清 楚 此 次 操 作 是 访 问 数 据
ＲＡＭ 的单元，还是访问指令中指定地址表示的ＳＦＲ空间。ＸＣＧＢ指令系统规定：采用
直接地址的指令均为访问数据 ＲＡＭ 单元，例如：
　　ＭＯＶＡＨ，＃ｄａｔａ
是访问特殊功能寄存器空间中地址为ＡＨ 的寄存器；而采用间接寻址的指令为访问数据
ＲＡＭ 区的单元，例如：
　　ＭＯＶＲ，＃ＡＨ
　　ＭＯＶ ＠Ｒ，＃ｄａｔａ
即为访问 ＲＡＭ 区地址为ＡＨ 的单元。
ＸＣＧＢ的片内特殊功能寄存器在单片机的个基础上新增了个，共计
　　第 章 具有内核的位单片机简介　　
个，地址分配和 ＣＰＵ 的复位值如表．所示。
表 ． ＳＦＲ地址分配及 ＣＰＵ复位值
地址 地址
ＦＨ
ＦＨ
ＥＨ
ＥＨ
ＤＨ
ＤＨ
ＣＨ
ＣＨ
ＢＨ
ＢＨ
ＡＨ
ＡＨ
Ｈ
Ｈ
Ｈ
Ｈ
Ｐ
Ｈ
ＣＨ
Ｈ
ＣＣＡＰＨ
ＸＸＨ
ＣＣＡＰＨ
ＸＸＨ
ＣＣＡＰＨ
ＸＸＨ
ＣＣＡＰＨ
ＸＸＨ
ＣＣＡＰＨ
ＸＸＨ
Ｂ
Ｈ
ＡＤＲＥＳ
Ｈ
ＳＥＰＳＴＡ
ＸＨ
ＣＣＯＮ
Ｈ
ＣＬ
Ｈ
ＣＣＡＰＬ
ＸＸＨ
ＣＣＡＰＬ
ＸＸＨ
ＣＣＡＰＬ
ＸＸＨ
ＣＣＡＰＬ
ＸＸＨ
ＣＣＡＰＬ
ＸＸＨ
ＡＣＣ
Ｈ
ＡＤＲＥＳ
Ｈ
ＳＥＰＤＡＴ
ＸＸＨ
ＣＣＯＮ ＣＭＯＤ ＣＣＡＰＭ ＣＣＡＰＭ ＣＣＡＰＭ ＣＣＡＰＭ ＣＣＡＰＭ
ＰＳＷ
Ｈ
ＡＤＲＥＳ
Ｈ ＳＥＰＣＯＮ
ＴＣＯＮ
Ｈ
ＴＭＯＤ ＲＣＡＰＬ
Ｈ
ＲＣＡＰＨ
Ｈ
ＴＬ
Ｈ
ＴＨ
Ｈ
Ｐ
Ｈ
ＡＤＲＥＳ
Ｈ ＥＸＩＣＯＮ ＡＣＭＰ
ＩＰ ＳＡＤＥＮ
Ｈ
ＣＣＡＰＨ
ＸＸＨ
ＣＣＡＰＨ
ＸＸＨ
ＣＣＡＰＨ
ＸＸＨ
ＣＣＡＰＨ
ＸＸＨ
ＣＣＡＰＨ
ＸＸＨ
ＣＨ
Ｈ
Ｐ ＡＤＲＥＳ
Ｈ
ＩＰＡ
Ｈ
ＩＰＡ
Ｈ
ＩＰＬ
ＩＥ ＳＡＯＤＲ
Ｈ
ＣＣＡＰＬ
ＸＸＨ
ＣＣＡＰＬ
ＸＸＨ
ＣＣＡＰＬ
ＸＸＨ
ＣＣＡＰＬ
ＸＸＨ
ＣＣＡＰＬ
ＸＸＨ
ＣＨ
Ｈ
Ｐ ＡＤＲＥＳ
Ｈ
ＯＦＤＣＯＮ
Ｈ
ＷＤＴＣＯＮ
Ｈ
ＩＥＡ
Ｈ
ＳＣＯＮ ＳＢＵＦ ＣＣＡＰＭ ＣＣＡＰＭ ＣＣＡＰＭ ＣＣＡＰＭ ＣＣＡＰＭ ＣＭＯＤ
Ｐ ＡＤＲＥＳ
Ｈ ＡＣＯＮ
ＴＣＯＮ ＴＭＯＤ ＴＬ ＴＬ ＴＨ ＴＨ ＡＵＸＲ
Ｐ ＳＰ ＤＰＬ ＤＰＨ ＡＤＲＥＳ ＰＣＯＮ
ＦＦＨ
ＦＨ
ＥＦＨ
ＥＨ
ＤＦＨ
ＤＨ
ＣＦＨ
ＣＨ
ＢＦＨ
ＢＨ
ＡＦＨ
ＡＨ
ＦＨ
Ｈ
ＦＨ
Ｈ
　　从表中可以看出，并非所有的地址都占满了，未占用的地址在该芯片中未使用。对这
些未使用的地址进行读操作将会返回随机数据，而写操作不起作用。
二、ＸＣＧＢ端口及操作
ＸＣＧＢ中共有 个双向 位端口，每个端口包含一个特殊功能寄存器 Ｐ～Ｐ、一
个输出驱动器和一个输入缓冲器。
端口 Ｐ作为地址总线低位 Ａ～Ａ 和数据总线 Ｄ～Ｄ 复用端口，端口 Ｐ作为地
址总线高位 Ａ～Ａ。
端口 Ｐ、Ｐ、Ｐ、Ｐ都是多功能端口，它们不仅可以作Ｉ／Ｏ 端口使用，也可以用作各
　　单片机原理及接口技术　　
种特殊功能端口。表．给出了复用的特殊功能。当端口ＳＦＲ中相应位为“”时，才选择
表．中的复用功能。
表 ． 端口复用功能
端 口 端 口 引 脚 复 用 功 能
Ｐ
Ｐ．／Ｔ 定时器 Ｔ外部时钟输入
Ｐ．／ＴＥＸ 定时器 Ｔ重装／捕捉方向控制
Ｐ．／Ｃ ＰＣＡ 外部时钟输入
Ｐ．／ＣＥＸ ＰＣＡ 模块捕捉输入，比较／ＰＷＭ 输出
Ｐ．／ＣＥＸ ＰＣＡ 模块捕捉输入，比较／ＰＷＭ 输出
Ｐ．／ＣＥＸ ＰＣＡ 模块捕捉输入，比较／ＰＷＭ 输出
Ｐ．／ＣＥＸ ＰＣＡ 模块捕捉输入，比较／ＰＷＭ 输出
Ｐ．／ＣＥＸ ＰＣＡ 模块捕捉输入，比较／ＰＷＭ 输出
Ｐ
Ｐ．／ＲＸＤ 串行口输入
Ｐ．／ＴＸＤ 串行口输出
Ｐ．／ＩＮＴ 外部中断输入
Ｐ．／ＩＮＴ 外部中断输入
Ｐ．／Ｔ 定时器 Ｔ外部计数脉冲输入
Ｐ．／Ｔ 定时器 Ｔ外部计数脉冲输入
Ｐ．／ＷＲ 片外 ＲＡＭ 写选通
Ｐ．／ＲＤ 片外 ＲＡＭ 读选通
Ｐ
Ｐ．／ＳＥＰＣＬＫ 串行扩展口时钟源
Ｐ．／ＳＥＰＤＡＴ 串行扩展口数据Ｉ／Ｏ
Ｐ．／Ｃ ＰＣＡ外部时钟输入
Ｐ．／ＣＥＸ ＰＣＡ模块捕捉输入，比较／ＰＷＭ 输出
Ｐ．／ＣＥＸ ＰＣＡ模块捕捉输入，比较／ＰＷＭ 输出
Ｐ．／ＣＥＸ ＰＣＡ模块捕捉输入，比较／ＰＷＭ 输出
Ｐ．／ＣＥＸ ＰＣＡ模块捕捉输入，比较／ＰＷＭ 输出
Ｐ．／ＣＥＸ ＰＣＡ模块捕捉输入，比较／ＰＷＭ 输出
Ｐ
Ｐ． 无可选功能
Ｐ． 无可选功能
Ｐ．／ＩＮＴ 外部中断
Ｐ．／ＩＮＴ 外部中断
Ｐ．／ＩＮＴ 外部中断
Ｐ．／ＩＮＴ 外部中断
Ｐ．／ＩＮＴ 外部中断
Ｐ． 无可选功能
　　三、ＸＣＧＢ的 Ａ／Ｄ转换器
ＸＣＧＢ片内含有一个位 Ａ／Ｄ转换器，有 个输入通道。Ａ／Ｄ转换器包括个专
用的模拟输入管脚 ＡＣＨ～ＡＣＨ和个 Ａ／Ｄ 转换结果寄存器 ＡＤＲＥＳ～ＡＤＲＥＳ，另
外，还有一个比较电压 ＣＯＭＰＲＥＦ和一个比较结果寄存器 ＡＣＭＰ，以及一个控制输入端
ＴＲＧＩＮ、一个参考电压管脚 ＶＲＥＦ、一个模拟地 ＡＧＮＤ。
Ａ／Ｄ转换由控制寄存器 ＡＣＯＮ 控制，其控制格式如表．所示。
　　第 章 具有内核的位单片机简介　　
表 ． ＡＣＯＮ寄存器格式
位
定义 － － ＡＩＦ ＡＣＥ ＡＣＳ ＡＣＳ ＡＩＭ ＡＴＭ
ＡＩＦ　　　Ａ／Ｄ中断标志位
ＡＣＥ Ａ／Ｄ转换有效位
ＡＣＳ Ａ／Ｄ转换通道选择位
ＡＣＳ Ａ／Ｄ转换通道选择位
　　　ＡＣＳ　　　ＡＣＳ　　　　通道选择
ＡＣＨ
ＡＣＨ
ＡＣＨ
ＡＣＨ
ＡＩＭ　　　Ａ／Ｄ中断方式位
ＡＴＭ Ａ／Ｄ触发方式位
　　Ａ／Ｄ转换有两种方式：连续方式和触发方式，决定通道的转换次序也有两种方式：扫
描方式和选择方式，它们都是由 ＡＣＯＮ 中的各控制位决定的。
连续方式：在 ＡＣＯＮ 中将 ＡＴＭ 置“”时，则进入连续方式。将 ＡＣＥ置“”时，则Ａ／Ｄ
转换总是从 ＡＣＨ～ＡＣＨ 的 个通道连续反复进行。转换结束后，将 ＡＩＦ置“”，然后
再从 ＡＣＨ通道开始下一轮 Ａ／Ｄ转换，只要 ＡＴＭ＝、ＡＣＥ＝保持不变，则转换将连续
反复进行。
触发方式：ＡＴＭ 置“”时，则进入触发方式。ＡＣＥ 置“”时，外部引脚 ＴＲＧＩＮ 的第
一个下降沿将开始对通道 ＡＣＨ～ＡＣＨ进行一次转换，并将转换结果送入相应的 Ａ／Ｄ
转换结果寄存器 ＡＤＲＥＳ～ＡＤＲＥＳ中。
扫描方式：ＡＩＭ 置“”，便进入扫描方式。在此方式下，将依次转换个通道 ＡＣＨ～
ＡＣＨ，并将转换结果送入相应的转换结果寄存器 ＡＤＲＥＳ～ＡＤＲＥＳ中。
选择方式：ＡＩＭ 置“”，便进入选择方式。在此方式下，Ａ／Ｄ 转换器先对前 个通道
ＡＣＨ～ＡＣＨ 中的某一通道（由 ＡＣＳ、ＡＣＳ 决定）进行 次 Ａ／Ｄ 转换，并将结果依次
送入 ＡＤＲＥＳ～ＡＤＲＥＳ中，然后再对通道 ＡＣＨ～ＡＣＨ依次转换一次，将结果依次送
入 ＡＤＲＥＳ～ＡＤＲＥＳ 中。
四、ＸＣＧＢ中断系统
．中断源
ＸＣＧＢ有 个中断源，对应有 个固定的中断矢量地址（见图．）。其中有
个外部中断是ＩＮＴ～ＩＮＴ，外部中断引脚与端口和端口引脚的功能复用；有个内
部中断，它们分别是个定时器中断（定时器 Ｔ、Ｔ、Ｔ）、个可编程定时计数器阵列中
断（ＰＣＡ、ＰＣＡ）、个串行口中断、个ＳＥＰ中断和个 Ａ／Ｄ中断。下面分别对各个中断
作简要介绍。
外部中断ＩＮＴ、ＩＮＴ：这两个中断都可以由电平触发或跳变沿触发，具体触发方式
决定于寄存器 ＴＣＯＮ 中ＩＴ 和ＩＴ 两位的值。
　　单片机原理及接口技术　　
图 ． 中断源
外部中断ＩＮＴ、ＩＮＴ：这两个中断都可设置为上升沿或下降沿触发，具体触发方式
由中断控制寄存器 ＥＸＩＣＯＮ 中ＩＴ和ＩＴ两位的值决定。
外部中断ＩＮＴ、ＩＮＴ、ＩＮＴ：这三个中断都是由上升沿触发的。
外部中断控制器 ＥＸＩＣＯＮ 格式如图 ． 所示。
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＩＥ ＩＥ ＩＥ ＩＥ ＩＥ ＩＴ ＩＴ
图 ． ＥＸＩＣＯＮ 中断控制寄存器
ＥＸＩＣＯＮ 各位作用如下：
ＩＥ～ＩＥ：外部中断ＩＮＴ～ＩＮＴ 中断请求标志位。当外部中断请求有效时，由硬件
置位，而 ＣＰＵ 响应中断后，由硬件自动清“”。
ＩＴ、ＩＴ：ＩＮＴ、ＩＮＴ 中断类型控制位。若设置为“”，则设定为正跳变触发中断，
反之设定为负跳变触发中断。
内部定时器 Ｔ、Ｔ、Ｔ与外部中断控制方式不同，分别介绍如下：
定时器 Ｔ 和定时器 Ｔ：这两个中断由寄存器 ＴＣＯＮ 中 ＴＦ 和 ＴＦ 产生，ＴＦ 和
ＴＦ 在相应的定时／计数器溢出时被置“”（定时器 方式 除外），ＴＦ 和 ＴＦ 在响应中
断后由硬件清“”。
定时器 Ｔ：该中断由寄存器 ＴＣＯＮ 中 ＴＦ 和 ＥＸＴ 两位的逻辑或产生。响应中断
后，中断标志不能硬件清“”，必须由软件清“”。
ＰＣＡ 和ＰＣＡ中断：ＰＣＡ 中断是可编程定时／计数器阵列中断，它由ＣＣＯＮ 中的ＣＦ、
　　第 章 具有内核的位单片机简介　　
ＣＣＦ、ＣＣＦ、ＣＣＦ、ＣＣＦ和ＣＣＦ这位逻辑或产生；ＰＣＡ中断由ＣＣＯＮ 中的ＣＦ、
ＣＣＦ、ＣＣＦ、ＣＣＦ、ＣＣＦ和ＣＣＦ的逻辑或产生。ＰＣＡ／ＰＣＡ中断是否有效决定
于 ＥＣ／ＥＣ，在 ＣＰＵ 进入中断服务程序时，只能靠软件识别是由哪个标志位产生的，并用
软件将它清“”。
串行口中断：串行口中断由寄存器ＳＣＯＮ 中 ＲＩ和 ＴＩ的逻辑或产生。
ＳＥＰ中断：该中断由寄存器 ＳＥＰＳＴＡ 中 ＳＥＰＩＦ产生。ＳＥＰＩＦ位在串行扩展口发送或
接收结束时被置“”，它不能由硬件清“”，必须由用户软件清“”。
Ａ／Ｄ中断：该中断由寄存器 ＡＣＯＮ 中 ＡＩＥ产生，在 个通道 Ａ／Ｄ 转换周期的最后，
ＡＩＦ被置“”，ＡＩＦ必须由用户软件清“”。
上述产生中断的所有标志位都可由软件置“”或清“”，也就是说，中断可以由软件产
生，正在进行的中断也可由软件中断。
．中断控制
ＸＣＧＢ 的 个中断源都可通过将两个中断允许寄存器ＩＥ和ＩＥＡ 中对应的中断源
控制位置“”开中断；置“”禁止中断。
中断允许寄存器ＩＥ在 ＣＰＵ 复位时为 Ｈ，禁止所有中断，其格式如图 ． 所示。
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＥＡ ＥＣ ＥＴ ＥＳ ＥＴ ＥＸ ＥＴ ＥＸ
图 ． ＩＥ格式
ＩＥ各位的功能如下：
ＥＡ：总中断控制位。ＥＡ＝时，禁止所有中断；ＥＡ＝时，各中断是否有效取决于相
应的中断控制位；
ＥＸ、ＥＸ：外部中断源ＩＮＴ 和ＩＮＴ 允许控制位；
ＥＴ、ＥＴ、ＥＴ：定时器 Ｔ、Ｔ、Ｔ 中断允许控制位；
ＥＳ：串行口中断控制位；
ＥＣ：可编程定时、计数器阵列 ＰＣＡ 中断控制位。
中断允许寄存器ＩＥＡ 在ＣＰＵ 复位时为Ｈ，禁止所有中断，其格式如图．所示。
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＥＡＤ ＥＸ ＥＸ ＥＸ ＥＸ ＥＸ ＥＳ ＥＳＥＰ
图 ． ＩＥＡ 格式
ＩＥＡ 各位的功能如下：
ＥＡＤ：Ａ／Ｄ转换器中断控制位；
ＥＸ～ＥＸ：外部中断ＩＮＴ～ＩＮＴ 中断允许控制位；
ＥＳ：ＰＣＡ 中断允许控制位；
ＥＳＥＰ：串行扩展口中断允许控制位。
．中断优先级控制及中断矢量
ＸＣＧＢ的个中断源都可由程序指定为个优先级之一，中断优先级决定于寄存
器ＩＰ和ＩＰ 或ＩＰＡ 和ＩＰＡ 中相应两位控制位编码的值。优先级低的中断可被优先级高
　　单片机原理及接口技术　　
的中断中断，但不能被与其优先级相同或比它优先级低的中断中断，任何中断都不能中断
最高级中断。若同时接收到两个或两个以上不同优先级的中断请求，则中断其中最高级中
断；若两个以上的同级中断同时提出中断请求，则 ＣＰＵ 按内部规定的硬件查询次序响应
中断，并转入对应固定矢量入口地址执行程序。
同一优先级内的硬件查询次序及中断矢量见表 ．。
表 ． 同一中断优先级硬件查询次序及中断矢量地址
硬件查询次序 中 断 源 中断矢量入口地址
（查询级别最高） ＩＮＴ Ｈ
ＳＥＰ ＢＨ
ＩＮＴ Ｈ
Ｔ ＢＨ
ＰＣＡ Ｈ
ＩＮＴ ＢＨ
ＩＮＴ Ｈ
Ａ／Ｄ ＢＨ
ＩＮＴ Ｈ
Ｔ ＢＨ
ＰＣＡ Ｈ
ＩＮＴ ＢＨ
串行口 Ｈ
Ｔ ＢＨ
（查询级别最低） ＩＮＴ Ｈ
　　中断优先级寄存器ＩＰ 和ＩＰ的相应控制位及组合可对 个中断源设定为 个中断优
先级之一。其格式如图 ． 所示。
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＩＰ→
ＩＰ→
ＰＣ ＰＴ ＰＳ ＰＴ ＰＸ ＰＴ ＰＸ
ＰＣ ＰＴ ＰＳ ＰＴ ＰＸ ＰＴ ＰＸ
图 ． ＩＰ和ＩＰ的格式
ＩＰ 和ＩＰ中对应的两个控制位有 种组合，可对相应的中断源确定 个中断优先权
级别之一，其关系如表 ． 所示。
表 ． 中断优先级设置
ＩＰ．ｉ的位 ＩＰ．ｉ的位 中断优先级别
（优先权最低）
（优先权最高）
　　第 章 具有内核的位单片机简介　　
　　ＩＰ．ｉ的位和ＩＰ．ｉ的位共同控制的中断源，其对应关系如表 ． 所示。
表． ＩＰ 和ＩＰ相应位控制的中断源
ＩＰ．ｉ的值 ＩＰ．ｉ的位 对应的中断源
Ｘ Ｘ 未使用
ＰＣ ＰＣ ＰＣＡ 中断优先级控制位
ＰＴ ＰＴ 定时器 Ｔ 中断优先级控制位
ＰＳ ＰＳ 串行口中断优先级控制位
ＰＴ ＰＴ 定时器 Ｔ 中断优先级控制位
ＰＸ ＰＸ ＩＮＴ 中断优先级控制位
ＰＴ ＰＴ 定时器 Ｔ 中断优先级控制位
ＰＸ ＰＸ ＩＮＴ 中断优先级控制位
　　中断优先级寄存器ＩＰＡ 和ＩＰＡ 决定另外个中断源的优先权的排队，每个对应控制
位ＩＰＡ．ｉ、ＩＰＡ．ｉ的 种 组 合 可 选 择 级优先权排队之一，对 应 关 系 与 表 ． 相 同。
ＩＰＡ 和ＩＰＡ 的格式如图 ． 所示。
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＩＰＡ→
ＩＰＡ→
ＰＡＤ ＰＸ ＰＸ ＰＸ ＰＸ ＰＸ ＰＣ ＰＳＥＰ
ＰＡＤ ＰＸ ＰＸ ＰＸ ＰＸ ＰＸ ＰＣ ＰＳＥＰ
图 ． ＩＰＡ和ＩＰＡ 的格式
ＩＰＡ．ｉ的位和ＩＰＡ．ｉ的位共同控制的中断源如表 ．所示。
表 ． ＩＰＡ和ＩＰＡ相应位控制的中断源
ＩＰＡ．ｉ的位 ＩＰＡ．ｉ的位 对 应 的 中 断 源
ＰＡＤ ＰＡＤ Ａ／Ｄ转换中断优先级控制位
ＰＸ ＰＸ 外部中断ＩＮＴ中断优先级控制位
ＰＸ ＰＸ 外部中断ＩＮＴ中断优先级控制位
ＰＸ ＰＸ 外部中断ＩＮＴ中断优先级控制位
ＰＸ ＰＸ 外部中断ＩＮＴ中断优先级控制位
ＰＸ ＰＸ 外部中断ＩＮＴ中断优先级控制位
ＰＣ ＰＣ ＰＣＡ 中断优先级控制位
ＰＳＥＰ ＰＳＥＰ 串行扩展口中断优先级控制位
　　五、“看门狗”定时器 ＷＤＴ
看门狗（Ｗａｔｃｈｄｏｇ）定时器的作用是强迫微控制器进入复位状态，使 ＣＰＵ 从硬件或软
件故障中解脱出来。
　　单片机原理及接口技术　　
ＷＤＴ 是 位计数器，在计数值达到最大值 ＦＦＦＨ 之前，必须由软件清“”，否则，
ＷＤＴ 将产生内部复位信号，使芯片异常复位。计数器可由 软 件 向 复 位 寄 存 器 ＷＤＴＣＯＮ
中写入立即数 ＥＨ 和 ＥＨ，ＷＤＴ 在每个机器周期自动加 。
． ＸＣ系列单片机
Ｐｈｉｌｉｐｓ公司生产的与 ＭＣＳ 单片机兼容的 ＣＭＯＳ型单片机中，ＸＣ 的功能最
强，最具有代表性。它除了具有 单片机的全部功能之外，又增加了大量的硬件：高速
Ｉ／Ｏ、ＰＷＭ、Ａ／Ｄ、ＷＤＴ、计数器的捕获／比较逻辑、串行总线ＩＣＢＵＳ等都集成在片内。
ＸＣ 在指令系统上与 ＭＣＳ 单片机完全兼容，它有三种不同的型号：
（）Ｃ：片内无 ＲＯＭ；
（）Ｃ：片内带 ＫＢ编程 ＲＯＭ；
（）Ｃ：片内带 ＫＢ用户可编程 ＥＰＲＯＭ。
．． ＸＣ的主要性能
ＸＣ 是增加了许多功能模块的 单片机，它具有如下特性：
（）ＫＢ的内部 ＲＯＭ（Ｃ）或 ＥＰＲＯＭ（Ｃ），可外扩 ＫＢＥＰＲＯＭ；片内
有 ＢＲＡＭ，还可外扩 ＫＢＲＡＭ 或Ｉ／Ｏ 口；
（） 个标准的 位定时／计数器； 个附加的 位定时／计数器，并配有 个捕捉
寄存器和 个比较寄存器；
（） 个 路 位片内 Ａ／Ｄ转换器；
（） 路 位分辨率的脉冲宽度调制解调器输出 ＰＷＭ；
（） 个 位并行Ｉ／Ｏ 口， 个与 Ａ／Ｄ合用的输入口；
（） 个全双工异步串行口 ＵＡＲＴ；
（）Ｉ
Ｃ串行总线口；
（）内部监视定时器 ＷＤＴ；
（） 个中断优先级， 个中断源；
（）有 个特殊功能寄存器ＳＦＲ；
（）采用 引脚或 引脚 ＰＬＣＣ封装；
（）工作时钟频率可选择 ．～ＭＨｚ。
．． ＸＣ内部结构及引脚描述
ＸＣ的片内结构框图如图 ． 所示。采用 ＰＬＣＣ 脚封装形式的引脚功能分配
图如图 ． 所示。
各引脚的功能如下：
ＶＤＤ：＋Ｖ 电源。
ＥＡ：存储器访问选择输入端，为“”时访问外部 ＲＯＭ，为“”时访问内部 ＲＯＭ。
　　第 章 具有内核的位单片机简介　　
图 ． ＸＣ 的内部结构框图
ＰＳＥＮ：外部 ＲＯＭ 的读选通信号。
ＡＬＥ：地址锁存允许信号，当访问外部 ＲＯＭ 时，ＡＬＥ 的有效输出用来锁存低位地
址信号。
ＳＴＡＤＣ：片内 Ａ／Ｄ转换器的启动输入，该脚不得悬空。
ＰＷＭ：脉宽调制器 ＰＷＭ 通道 输出。
ＰＷＭ：脉宽调制器 ＰＷＭ 通道 输出。
ＥＷ：监视定时器 ＷＤＴ 的时钟使能端，为“”时 允 许 ＷＤＴ 时钟和禁止低功耗方式，
该脚不得悬空。
Ｐ．～Ｐ．： 位双向Ｉ／Ｏ 口。
Ｐ．～Ｐ．： 位准双向Ｉ／Ｏ 口。
Ｐ．～Ｐ．： 位准双向Ｉ／Ｏ 口。
Ｐ．～Ｐ．： 位准双向Ｉ／Ｏ 口。
Ｐ．～Ｐ．： 位准双向Ｉ／Ｏ 口。
Ｐ．～Ｐ．： 位输入口。
ＲＳＴ：复位输入端，当监视定时器 ＷＤＴ 计数溢出时，输出复位信号。
ＸＴＡＬ和 ＸＴＡＬ：振荡器输入端。
ＶＳＳ：数字地。
ＡＶＳＳ：模拟地。
ＡＶＲＥＦ＋ ：Ａ／Ｄ转换器基准电压输入端（＋）。
ＡＶＲＥＦ－ ：Ａ／Ｄ转换器基准电压输入端（－）。
ＡＶＤＤ：模拟电源。
　　单片机原理及接口技术　　
图 ． ＸＣ 引脚功能
．． ＸＣ特殊功能寄存器ＳＦＲ
ＸＣ 具有地址部分重叠的 个字节的内部数据存储器 ＲＡＭ 和 个字节的特
殊功能寄存器区ＳＦＲ，其地址空间为Ｈ～ＦＦＨ，与高字节地址 ＲＡＭ 重叠。ＸＣ
在 单片机的 个ＳＦＲ的基础上增加了 个，总共达 个 ＳＦＲ，新增加的 个
ＳＦＲ是用来控制片内新增加的硬件接口功能的。表 ． 列出了 ＸＣ 的特殊功能寄
存器。
　　第 章 具有内核的位单片机简介　　
表 ． ＸＣ 的特殊功能寄存器ＳＦＲ
符 号 说　　明 直接
地址
地址位符号或口的第二功能
高位 低位
ＡＣＣ
＃ＡＤＣＨ
ＡＤＣＯＮ
Ｂ
ＣＴＣＯＮ
＃ＣＴＨ
＃ＣＴＨ
＃ＣＴＨ
＃ＣＴＨ
ＣＭＨ
ＣＭＨ
ＣＭＨ
＃ＣＴＬ
＃ＣＴＬ
＃ＣＴＬ
＃ＣＴＬ
ＣＭＬ
ＣＭＬ
ＣＭＬ
ＤＰＨ
ＤＰＬ
ＩＥＮ
ＩＥＮ
ＩＰ
ＩＰ
＃Ｐ
Ｐ
Ｐ
Ｐ
Ｐ
Ｐ
累加器
Ａ／Ｄ转换器高位
Ａ／Ｄ转换器控制
Ｂ寄存器
捕捉控制
捕捉高位
捕捉高位
捕捉高位
捕捉高位
比较高位
比较高位
比较高位
捕捉低位
捕捉低位
捕捉低位
捕捉低位
比较低位
比较低位
比较低位
数据指针高位
数据指针低位
中断允许
中断允许
中断优先级
中断优先级
Ｐ口
Ｐ口
Ｐ口
Ｐ口
Ｐ口
Ｐ口
ＥＨ
ＣＨ
ＣＨ
ＦＨ
ＥＢＨ
ＣＦＨ
ＣＥＨ
ＣＤＨ
ＣＣＨ
ＣＢＨ
ＣＡＨ
ＣＨ
ＡＦＨ
ＡＥＨ
ＡＢＨ
ＡＣＨ
ＡＤＨ
ＡＡＨ
ＡＨ
Ｈ
Ｈ
ＡＨ
ＥＨ
ＢＨ
ＦＨ
ＣＨ
ＣＨ
ＢＨ
ＡＨ
Ｈ
Ｈ
Ｅ Ｅ Ｅ Ｅ Ｅ Ｅ Ｅ Ｅ
ＡＤＣ．ＡＤＣ． ＡＤＥＸ ＡＤＣＩ ＡＤＣＳ ＡＡＤＲＡＡＤＲＡＡＤＲ
Ｆ Ｆ Ｆ Ｆ Ｆ Ｆ Ｆ Ｆ
ＣＴＮ ＣＴＰ ＣＴＮ ＣＴＰ ＣＴＮ ＣＴＰ ＣＴＮ ＣＴＰ
ＡＦ ＡＥ ＡＤ ＡＣ ＡＢ ＡＡ Ａ Ａ
ＥＡ ＥＡＤ ＥＳ ＥＳ ＥＴ ＥＸ ＥＴ ＥＸ
ＥＦ ＥＥ ＥＤ ＥＣ ＥＢ ＥＡ Ｅ Ｅ
ＥＴ ＥＣＭ ＥＣＭ ＥＣＭ ＥＣＴ ＥＣＴ ＥＣＴ ＥＣＴ
ＢＦ ＢＥ ＢＤ ＢＣ ＢＢ ＢＡ Ｂ Ｂ
＼ ＰＡＤ ＰＳ ＰＳ ＰＴ ＰＸ ＰＴ ＰＸ
ＦＦ ＦＥ ＦＤ ＦＣ ＦＢ ＦＡ Ｆ Ｆ
ＰＴ ＰＣＭ ＰＣＭ ＰＣＭ ＰＣＴ ＰＣＴ ＰＣＴ ＰＣＴ
ＡＤＣ ＡＤＣ ＡＤＣ ＡＤＣ ＡＤＣ ＡＤＣ ＡＤＣ ＡＤＣ
Ｃ Ｃ Ｃ Ｃ Ｃ Ｃ Ｃ Ｃ
ＣＭＴ ＣＭＴ ＣＭＳＲ ＣＭＳＲ ＣＭＳＲ ＣＭＳＲ ＣＭＳＲ ＣＭＳＲ
Ｂ Ｂ Ｂ Ｂ Ｂ Ｂ Ｂ Ｂ
ＲＤ ＷＲ Ｔ Ｔ ＩＮＴ ＩＮＴ ＴＸＤ ＲＸＤ
Ａ Ａ Ａ Ａ Ａ Ａ Ａ Ａ
Ａ Ａ Ａ Ａ Ａ Ａ Ａ Ａ
ＳＤＡ ＳＣＬ ＴＲ Ｔ ＣＴ ＣＴ ＣＴ ＣＴ
ＡＤ ＡＤ ＡＤ ＡＤ ＡＤ ＡＤ ＡＤ ＡＤ
　　单片机原理及接口技术　　
续表
符 号 说　　明 直接
地址
地址位符号或口的第二功能
高位 低位
ＰＣＯＮ
ＰＳＷ
ＰＷＭＰ
ＰＷＭ
ＰＷＭ
ＲＴＥ
ＳＰ
ＳＢＵＦ
ＳＣＯＮ
ＳＡＤＲ
ＳＤＡＴ
＃ＳＳＴＡ
ＳＣＯＮ
ＳＴＥ
ＴＨ
ＴＨ
ＴＬ
ＴＬ
＃ＴＭＨ
＃ＴＭＬ
ＴＭＯＤ
ＴＣＯＮ
ＴＭＣＯＮ
ＴＭＲ
Ｔ
电源控制寄存器
程序状态字
脉宽调制预分频器
脉宽调制寄存器
脉宽调制寄存器
复位触发使能
堆栈指针
串口数据缓冲器
串口 控制
串口 地址
串口 数据
串口 状态
串口 控制
置位使能
定时器 高位
定时器 高位
定时器 低位
定时器 低位
定时器 高位
定时器 低位
定时器方式
定时器控制
定时器 控制
定时器中断标志
监视定时器 Ｔ
Ｈ
ＤＨ
ＦＥＨ
ＦＤＨ
ＦＣＨ
ＥＦＨ
Ｈ
Ｈ
Ｈ
ＤＢＨ
ＤＡＨ
ＤＨ
ＤＨ
ＥＥＨ
ＤＨ
ＣＨ
ＢＨ
ＡＨ
ＥＤＨ
ＥＣＨ
Ｈ
Ｈ
ＥＡＨ
ＣＨ
ＦＦＨ
ＳＭＯＤ ＼ ＼ ＷＬＥ ＧＦ ＧＦ ＰＤ ＩＤＬ
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＣＹ ＡＣ Ｆ ＲＳ ＲＳ ＯＶ Ｆ Ｐ
ＴＰ ＴＰ ＲＰ ＲＰ ＲＰ ＲＰ ＲＰ ＲＰ
Ｆ Ｅ Ｄ Ｃ Ｂ Ａ
ＳＭ ＳＭ ＳＭ ＲＥＮ ＴＢ ＲＢ Ｔ Ｒ
ＳＬＡＶＥＡＤＤＲＥＳＳ →ＧＣ
ＳＣ ＳＣ ＳＣ ＳＣ ＳＣ
ＤＦ ＤＥ ＤＤ ＤＣ ＤＢ ＤＡ Ｄ Ｄ
ＣＲ ＥＮＳ ＳＴＡ ＳＴ Ｓ ＡＡ ＣＲ ＣＲ
ＴＧ ＴＧ ＳＰ ＳＰ ＳＰ ＳＰ ＳＰ ＳＰ
ＧＡＴＡ Ｃ／Ｔ Ｍ Ｍ ＧＡＴＥ Ｃ／Ｔ Ｍ Ｍ
Ｆ Ｅ Ｄ Ｃ Ｂ Ａ
ＴＦ ＴＲ ＴＦ ＴＲ ＥＩ ＩＴ ＩＥ ＩＴ
ＴＳＳ ＴＳＳ ＴＥＲ ＴＢ ＴＰ ＴＰ ＴＭＳ ＴＭＳ
ＣＦ ＣＥ ＣＤ ＣＣ ＣＢ ＣＡ Ｃ Ｃ
ＴＶ ＣＭ ＣＭ ＣＭ ＣＴ ＣＴ ＣＴ ＣＴ
　　注：表中带＃者为只读寄存器，带者为可位寻址寄存器。
．． ＸＣ并行Ｉ／Ｏ端口及复用功能
ＸＣ 具有 个位Ｉ／Ｏ 口Ｐ～Ｐ，每个口由个锁存器、个输入缓冲器和输出
驱动器组成。除了Ｐ口新增加了功能，Ｐ～Ｐ与完全一样，Ｐ口的功能与Ｐ～Ｐ
相同，Ｐ 口只能作为输入口。各Ｉ／Ｏ 端口复用功能见表 ．。
　　第 章 具有内核的位单片机简介　　
表 ． Ｐ、Ｐ、Ｐ和Ｐ口复用功能
端 口 端口引脚 复用功能符号 具 体 功 能
Ｐ
Ｐ． ＣＴ
Ｐ． ＣＴＩ
Ｐ． ＣＴＩ
Ｐ． ＣＴＩ
Ｐ． Ｔ
Ｐ． ＲＴ
Ｐ． ＳＣＬ
Ｐ． ＳＤＡ
对定时器 Ｔ 的捕捉输入信号端，也是个 中 断
源
计数器 Ｔ 脉冲输入端，上升沿触发
Ｔ 复位信号，上升沿触发
Ｉ
Ｃ总线串行口时钟线
Ｉ
Ｃ总线串行口数据线
Ｐ
Ｐ． ＲＸＤ 串行口输入线
Ｐ． ＴＸＤ 串行口输出线
Ｐ． ＩＮＴ 外中断输入
Ｐ． ＩＮＴ 外中断输入
Ｐ． Ｔ Ｔ 计数脉冲输入
Ｐ． Ｔ Ｔ 计数脉冲输入
Ｐ． ＷＲ 外部 ＲＡＭ 写线
Ｐ． ＲＤ 外部 ＲＡＭ 读线
Ｐ
Ｐ． ＣＭＳＲ
Ｐ． ＣＭＳＲ
Ｐ． ＣＭＳＲ
Ｐ． ＣＭＳＲ
Ｐ． ＣＭＳＲ
Ｐ． ＣＭＳＲ
Ｐ． ＣＭＴ
Ｐ． ＣＭＴ
比较寄存器 ＣＭ或ＣＭ与定时器 Ｔ匹配时置
位或复位输出线，取决于ＳＴＥ和 ＲＴＥ两个ＳＦＲ的
各个位的设置
比较寄存器 ＣＭ 与 定 时 器 Ｔ 匹配时触发输出
端（翻转或取反）
Ｐ Ｐ．～Ｐ． ＡＤＣ～ＡＤＣ Ａ／Ｄ转换器为 路模拟输入端
．． 脉冲宽度调制器ＰＷＭ
ＸＣ 有 路 ＰＷＭ 输出通道，其输出脉冲的占空比可编程调节。脉冲宽度调制器
的工作原理如图 ． 所示。
　　单片机原理及接口技术　　
图． ＰＷＭ 输出功能原理图
．ＰＷＭ 的工作原理
ＰＷＭ 两个脉冲调制输出 ＰＷＭ和 ＰＷＭ合用一个预分频器和计数器，并且预分频
器的分频系数决定重复频率，脉冲的高低电平宽度比分别取决于 ＰＷＭ 和 ＰＷＭ 的寄存
器的值，取值范围为 ～，输出脉冲的频率由预分频率 ＰＷＭＰ决定。
引脚 ＰＷＭ输出的重复频率ｆＰＷＭ由下式决定：
ｆＰＷＭ ＝ ｆＯＳＣ
（ＰＷＭＰ＋）＋
式中：ＰＷＭＰ＋ 为 分 频 系 数。在 ＭＨｚ 振 荡 频 率 时，输 出 的 频 率 范 围 是 Ｈｚ～
．ｋＨｚ，在ＭＨｚ振荡频率时，输出频率范围是Ｈｚ～．ｋＨｚ。ＰＷＭ．引脚输
出脉冲频率 ｆＰＷＭ是固定的，但输出脉冲宽度是可调的。
脉冲宽度寄存器 ＰＷＭ 和 ＰＷＭ 是决定引脚 ＰＷＭ．输出脉冲高／低比例常数的寄
存器。当 ＰＷＭ 工作时， 位计数器的值不断和 ＰＷＭ、ＰＷＭ寄存器的内容相比较：如
果 ＰＷＭ 或 ＰＷＭ 的值大于计数器 的 值，则 相 应 引 脚 ＰＷＭ或 ＰＷＭ输 出 为 低 电 平；
反之，输出为高电平。因此，对 ＰＷＭ 或 ＰＷＭ 装入不同数值时，可调整引脚输出脉冲
宽度，如图 ． 所示。
图 ． ＰＷＭ 引脚输出波形
（ａ）ＰＭＭ．引脚电平；（ｂ）典型的 ＰＷＭ 输出
．ＰＷＭ 的应用
经隔离后的ＰＷＭ 输出波形通过滤波后可变为平滑的直流电压，这时应外接运算放大
　　第 章 具有内核的位单片机简介　　
器，如果要求输出有较高的精度，还必须外接输出缓冲器并使用相应的电源。如图．（ａ）
所示为将 ＰＷＭ 输出用作 Ｄ／Ａ 转换器的电路，如果要求模拟输出信号与主机隔离，则可
采用图 ．（ｂ）所示的电路。
图 ． ＰＷＭ 输出用作 Ｄ／Ａ 转换器
（ａ）模拟输出缓冲电路；（ｂ）带光电隔离器的模拟输出电路
．． Ａ／Ｄ转换器
ＸＣ片内有 路 位逐次比较型 Ａ／Ｄ转换器，基准电压和模拟电源分别由相应
的引脚输入，完成一 次 Ａ／Ｄ 转 换 需 要 个 机 器 周 期，即 当 振 荡 器 频 率 为 ＭＨｚ时，
Ａ／Ｄ 转换时间为μｓ，输入电压范围为～＋Ｖ。其结构如图 ． 所示。
图 ． ＸＣＡ／Ｄ转换器电路框图
Ａ／Ｄ转换器的操作是通过访问特殊功能寄存器 ＡＤＣＯＮ来实现的，并且 ＡＤＣＯＮ 寄存器
只能通过字节寻址方法访问。ＡＤＣＯＮ寄存器的地址为ＣＨ，其格式如图．所示。
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＡＤＣＯＮ： ＡＤＣ． ＡＤＣ． ＡＤＥＳ ＡＤＣＩ ＡＤＣＳ ＡＡＤＲ ＡＡＤＲ ＡＡＤＲ
图． ＡＤＣＯＮ 格式定义
　　单片机原理及接口技术　　
ＡＤＣＯＮ 各位的功能说明如下：
ＡＤＣ．、ＡＤＣ．：Ａ／Ｄ转换结果位 、。
ＡＤＥＳ：启动 Ａ／Ｄ转换方式。若 ＡＤＥＳ＝，由软件启动 Ａ／Ｄ 转换（置 ＡＤＣＳ位）；若
ＡＤＥＳ＝，可由软件或外部引脚ＳＴＡＤＣ上升沿启动 Ａ／Ｄ转换。
ＡＤＣＩ：ＡＤＣ 中 断 标 志。Ａ／Ｄ 转 换 结 束，该 标 志 置“”，并 向 ＣＰＵ 申 请 中 断，在 读
Ａ／Ｄ 转换值中断程序中必须由软件清“”。
ＡＤＣＳ：ＡＤＣ启动和状态标志。它由软件或外部引脚ＳＴＡＤＣ设置。当 ＡＤＣ忙时为，
Ａ／Ｄ转换结束后，硬件自动复位 ＡＤＣＳ，同时置位 ＡＤＣＩ，当 ＡＤＣＳ或 ＡＤＣＩ之一为高电
平时，禁止启动 Ａ／Ｄ转换。
ＡＤＣＳ、ＡＤＣＩ有 种组合，其功能如下：
ＡＤＣＩ　　ＡＤＣＳ　　　　　 　 　功 能
ＡＤＣ空闲，可以启动 Ａ／Ｄ转换
ＡＤＣ忙，禁止启动 Ａ／Ｄ转换
转换完成，禁止启动 Ａ／Ｄ转换
无效
ＡＡＤＲ～ＡＡＤＲ：模拟通路选择。三位二进制编码，共有种组合状态，分别选择
路模拟输入信号中的路输入到 Ａ／Ｄ 转换器，只有在 ＡＤＣＳ和 ＡＤＣＩ都为低电平时才能
变化。
在进行 Ａ／Ｄ转换的过程中，不理睬外部或软件的启动信号，转换结束后，置位 ＡＤＣＩ，
并将转换结果的高 位存放在特殊功能寄存器 ＡＤＣＨ 中，低 位存放在特殊功能寄存器
ＡＤＣＯＮ的最高两位 ＡＤＣ．和 ＡＤＣ．中。图．所示为 Ａ／Ｄ转换的实现原理。Ａ／Ｄ转换
器具有自己独立的电源引脚（ＡＶＤＤ和 ＡＶＳＳ）以及连到 Ｔ型电阻网络的引脚（ＶＲＥＦ＋ 和 ＶＲＥＦ－ ），
ＡＶＲＥＦ＋ 和 ＡＶＲＥＦ－ 可以在 ＡＶＤＤ＋．Ｖ和 ＡＶＳＳ－．Ｖ之间。转换结果可由下式计算：
转换结果＝ ＶＩＮ－ＡＶＲＥＦ－
ＡＶＲＥＦ＋ －ＡＶＲＥＦ－
图 ． Ａ／Ｄ转换的实现原理
　　第 章 具有内核的位单片机简介　　
．． 定时器Ｔ和捕捉比较逻辑
定时器 Ｔ和连接到这个寄存器上的 个 位捕捉寄存器及 个比较器组成定时器
Ｔ 与捕捉比较逻辑。当在相应引脚上电平发生变化时，捕捉寄存器将捕捉定时器 Ｔ 的内
容，比较逻辑是以固定的时间去设置、复位和触发 Ｐ 口的输出。
定时器 Ｔ 和捕捉比较逻辑如图 ． 所示。
图 ． 定时器 Ｔ 和捕捉比较逻辑
．定时器Ｔ
ＸＣ单片机的定时器 Ｔ 是一个 位的计数器，它由特殊功能寄存器 ＴＭＨ（高
字节）和 ＴＭＬ（低字节）所组成。它的输入可由软件编程为：ｆＯＳＣ／、Ｔ 引脚输入的外部
脉冲或停止计数。当 Ｔ 用作计数器时，Ｔ 引脚上的外部输入信号经过预分频器进入 Ｔ，
预分频器的分频系数可编程为 、、、 四种，Ｔ 引脚上的输入脉冲频率可达每个机器
周期的一次方波。特殊功能寄存器 ＴＭＨ和 ＴＭＬ是只读寄存器，由复位信号或 ＲＴ引
脚上的上跳变清“”（若允许），预分频器也同时清“”，ＲＴ是由置位 ＴＥＲ（ＴＭＣＯＮ．）
位使能的。当 Ｔ发生低字节溢出或位溢出时产生中断请求，这两个中断的向量是相同
的，两者能同时编程为中断允许或禁止。
定时器 Ｔ 由特殊功能寄存器 ＴＭＣＯＮ 控制，ＴＭＣＯＮ 的地址为 ＥＡＨ，其格式如
图 ． 所示。
　　单片机原理及接口技术　　
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＴＭＣＯＮ： ＴＩＳ ＴＩＳ ＴＥＲ ＴＢＯ ＴＰ ＴＰ ＴＭＳ ＴＭＳ
图 ． ＴＭＣＯＮ 格式定义
ＴＭＣＯＮ 各位的功能如下：
ＴＩＳ： 位溢出中断选择位。
ＴＩＳ：字节溢出中断选择位。
ＴＥＲ：外部复位允许。ＴＥＲ＝ 时，Ｔ 可被 ＲＴ（Ｐ．）引脚上的上升沿复位。
ＴＢ：Ｔ 字节溢出中断标志位。
ＴＰ、ＴＰ：预分频器系数选择。
种系数选择方式如下：
　　ＴＰ　　　ＰＰ　　　　分频系数
ＴＭＳ、ＴＭＳ：工作方式选择。
选择方式如下：
　　ＴＭＳ ＴＭＳ 工作方式
停止计数
Ｔ时钟源＝ｆＯＳＣ／
不使用
Ｔ 时钟源 ＝ Ｔ引脚输入计数脉冲
在使用 ＭＨｚ晶振时，定时器 Ｔ 的 位溢出每隔 ．ｍｓ、ｍｓ、ｍｓ或
ｍｓ发生一次（具体间隔时间由分频系数决定），即最大的定时时间间隔为 ．ｓ。如果
要求定时时间大于 ．ｓ，就需要扩展定时器 Ｔ。
．捕捉逻辑
定时器 Ｔ连接个位捕捉寄存器：ＣＴ～ＣＴ，这些输入信号与Ｐ口复用，当引
脚 ＣＴＩ～ ＣＴＩ上电平发生变化时，定时器 Ｔ 的值装入这些捕捉寄存器并产生中断请
求，中断标志存放在特殊功能寄存器 ＴＭＩＲ中。如果不需要捕捉功能，这些中断可作为外
部中断输入。利用捕捉控制寄存器 ＣＴＣＯＮ，可以捕捉输入信号的上跳变、下跳变或上下
跳变。在每个机器周期的 ＳＰ，采样输入信号，当检测到一个所选择的跳变时，在该机器
周期的末尾将定时器 Ｔ 的内容捕捉到寄存器中。
捕捉控制寄存器 ＣＴＣＯＮ 的地址为 ＥＢＨ，格式如图 ． 所示。
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＣＴＣＯＮ： ＣＴＮ ＣＴＰ ＣＴＮ ＣＴＰ ＣＴＮ ＣＴＰ ＣＴＮ ＣＴＰ
图 ． ＣＴＣＯＮ 格式定义
　　第 章 具有内核的位单片机简介　　
ＣＴＣＯＮ 各位的功能如下：
ＣＴＮ～ＣＴＮ：ＣＴ～ ＣＴ分别由 ＣＴＩ～ＣＴＩ的下降沿捕捉；
ＣＴＰ～ＣＴＰ：ＣＴ～ＣＴ分别由 ＣＴＩ～ＣＴＩ的上升沿捕捉。
利用 ＣＴ～ＣＴ 捕捉 Ｔ 的功能，可方便地测量时间间隔，若一个周期变化的事件以
上升或下降沿的形式加在一个捕捉引脚上，则两个事件之间的间隔可用捕捉寄存器捕捉
Ｔ 中的时间值来测量，并在中断服务程序中计算出这两个事件之间的时间间隔。如采用
ＭＨｚ的晶振，定 时 器 Ｔ 最 多 可 编 程 为 ｍｓ溢 出 一 次，当 事 件 的 时 间 间 隔 大 于
ｍｓ时，则应采用 Ｔ 扩展程序对 Ｔ 的溢出计数。
．比较逻辑
每当定时器 Ｔ加 时， 个 位比较寄存器 ＣＭ～ＣＭ 的内容与 Ｔ 新的计数值
进行比较，发现相等时，在同一个机器周期的末尾置位定时器 Ｔ 中断标志寄存器 ＴＭＩＲ
中相应的中断标志。当 Ｔ与ＣＭ相等时，置位Ｐ口低位中的某些位（由置位允许寄存
器ＳＴＥ的低 位确定）；当 Ｔ与 ＣＭ相等时，复位 Ｐ 口低 位中的某些位（由复位／触
发允许寄存器 ＲＴＥ的低 位确定）；当 Ｔ与 ＣＭ相等时，触发翻转Ｐ口高两位中的某
一位触发器（由复位／触发允许寄存器 ＲＴＥ 的高两位确定）。两个 附 加 的 触 发 器 ＴＧ 和
ＴＧ 存储上次的结果，而被触发的是 Ｐ 口高两位中的某一位触发器。这样，如果当前的
操作是复位，即使在下次操作之前，此口被软件复位也是这样。Ｐ 口的每一位在任意时候
还可以由软件来置位或复位，但是比较结果相等时所引起的硬件修改优于软件修改。当比
较结果同时需要置位或复位时，端口寄存器将被复位。
置位允许寄存器 ＳＴＥ的地址为 ＥＥＨ，格式如图 ． 所示。
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＳＴＥ： ＴＧ ＴＧ ＳＰ ＳＰ ＳＰ ＳＰ ＳＰ ＳＰ
图． ＳＴＥ格式定义
ＳＴＥ各位的功能如下：
ＳＰ～ＳＰ：当某位为时，Ｔ与ＣＭ匹配，则对应设置Ｐ．～Ｐ．，当某位为
时，无影响。
ＴＧ：触发器输出（只读）。
ＴＧ：触发器输出（只读）。
复位／触发寄存器 ＲＴＥ的地址为 ＥＦＨ，格式如图 ． 所示。
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＲＴＥ： ＴＰ ＴＰ ＲＰ ＲＰ ＲＰ ＲＰ ＲＰ ＲＰ
图． ＲＴＥ的格式定义
ＲＴＥ各位的功能如下：
ＲＰ～ＲＰ：当某位为 时，Ｔ 与 ＣＭ匹配复位输出 Ｐ． ～ Ｐ．，当某位为
时，对输出无影响。
　　单片机原理及接口技术　　
　　ＴＰ、ＴＰ：当某位为时，Ｔ与 ＣＭ匹配时触发输出 Ｐ．、Ｐ．，否则无影响。
定时器 Ｔ 中断标志寄存器 ＴＭＩＲ的地址为 ＣＨ，格式如图 ． 所示。
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＴＭＩＲ： ＴＯＶ ＣＭＩ ＣＭＩ ＣＭＩ ＣＴＩ ＣＴＩ ＣＴＩ ＣＴＩ
图． ＴＭＩＲ的格式定义
ＴＭＩＲ各位的功能如下：
ＣＴＩ～ＣＴＩ：ＣＴ～ＣＴ 捕捉到 Ｔ 内容时中断标志。
ＣＭＩ～ＣＭＩ：ＣＭ～ＣＭ 与 Ｔ 比较匹配时中断标志。
ＴＯＶ：定时器 Ｔ 的 位溢出标志。
定时器 Ｔ 中断允许寄存器ＩＥＮ的地址为 ＥＨ，格式如图 ． 所示。
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＩＥＮ： ＥＴ ＥＣＭ ＥＣＭ ＥＣＭ ＥＣＴ ＥＣＴ ＥＣＴ ＥＣＴ
图． ＩＥＮ的格式定义
ＩＥＮ 各位的功能如下：
ＥＴ：Ｔ 字节溢出或 位溢出中断允许位；
ＥＣＭ～ＥＣＭ：比较寄存器 ＣＭ～ＣＭ 中断允许位；
ＥＣＴ～ＥＣＴ：捕捉寄存器 ＣＴ～ＣＴ 中断允许位。
其中各位为“”时允许中断，为“”时禁止中断。
定时器 Ｔ 中断优先级寄存器ＩＰ 的地址为 ＦＨ，其格式如图 ． 所示。
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＩＰ ＰＴ ＰＣＭ ＰＣＭ ＰＣＭ ＰＣＴ ＰＣＴ ＰＣＴ ＰＣＴ
图 ． ＩＰ格式定义
ＩＰ 各位的功能如下：
ＰＴ：定时器 Ｔ 溢出中断优先级；
ＰＣＭ～ＰＣＭ：比较器 ＣＭ～ＣＭ 中断优先级；
ＰＣＴ～ＰＣＴ：捕捉寄存器 ＣＴ～ＣＴ 中断优先级。
其中各位为“”时定义为高优先级，为“”时定义为低优先级。
．． 监视定时器Ｔ
ＸＣ单片机除了附加定时器 Ｔ和标准定时器 Ｔ、Ｔ之外，还有一个监视定时器
Ｔ（Ｗａｔｃｈｄｏｇ），Ｔ 的作用是当 ＣＰＵ 受到干扰而不能按正常方式执行程序，用户又没有
在指定的时间内（监视时间间隔）重新装入监视定时器 Ｔ时，监视电路将产生一个内部系
统复位信号，强迫系统复位，从而使程序重新得到正确的运行。
　　第 章 具有内核的位单片机简介　　
　　监视定时器 Ｔ 的电路如图 ． 所示，它由一个 位预分频器和一个 位定时器
组成。当采用 ＭＨｚ振荡频率时，定时器 Ｔ 的最小计时间隔为 ｍｓ。当 Ｔ 发生溢出
时，将产生一个内部复位信号使ＸＣ复位，同时将在 ＲＳＴ 引脚上产生一个正的复位脉
冲。如果在 ＲＳＴ 引脚上连接一个电容，这个复位脉冲将被滤掉，但这并不影响内部复位。
图 ． 监视定时器 Ｔ 原理框图
外部引脚 ＥＷ 为 Ｔ的时钟使能端，ＥＷ 为低电平时 Ｔ的操作才有效，这时不能用软
件禁止监视定时器 Ｔ工作。若不使 Ｔ溢出而造成系统复位，应保证用户程序总是在监视
时间内 对 Ｔ 重 新 装 入 初 始 值，即 用 户 程 序 必 须 不 断 地 执 行 对 Ｔ 的 装 入 命 令。采 用
ＭＨｚ振荡器频率时，监视时间间隔可编程为 ～ｍｓ，对应的 Ｔ 初值为 ～ＦＦＨ。
对 监视定时器 Ｔ的装入分两步：首先置位ＰＣＯＮ．（ＷＬＥ），然后装入 Ｔ初始值，在
Ｔ装入以后ＰＣＯＮ．（ＷＬＥ）自动复位。在实际用户程序中，可将对 Ｔ的再装入操作作为
一个子程序，在程序执行过程中经常调用，其程序举例如下：
在主程序中对 Ｔ 进行初始化：
　　　　　　　Ｔ ＥＱＵ ＦＦＨ　　；Ｔ 的地址为 ＦＦＨ
ＰＣＯＮ ＥＱＵ Ｈ ；ＰＣＯＮ 的地址为 Ｈ
　　ＷＡＴＣＨ—ＩＮＴＶ ＥＱＵ ；设监视间隔，Ｔ 溢出时间为ｍｓ×＝
；ｍｓ
在用户程序中，间隔调用“看门狗”子程序 ＬＣＡＬＬ ＷＡＴＣＨＤＯＧ 指令，以便程序在正
常运行时能在指定的时间内（监视时间间隔）重新装入监视定时器 Ｔ，使监视电路不产生
内部系统复位信号，从而使程序得到正确的运行。
“看门狗”Ｔ 的服务程序：
　　ＷＡＴＣＨＤＯＧ：ＯＲＬ ＰＣＯＮ，＃Ｈ　　　　；置 ＰＣＯＮ．＝，允许 Ｔ装初值
ＭＯＶ Ｔ，＃ＷＡＴＣＨ—ＩＮＴＶ　　；间隔时间装入 Ｔ
ＲＥＴ
．． ＸＣ中断系统
ＸＣ 的中断系统如图．所示，共有个中断源，分为个中断优先级。这
个中断源分别是： 个定时／计数器 Ｔ 和 Ｔ 溢出中断； 个 Ｔ 比较中断； 个外部中断
ＩＮＴ／ＩＮＴ； 个 Ｔ 溢出中断；异步串行口中断 ＵＡＲＴ；Ａ／Ｄ 转换结束中断； 个 Ｔ 捕
捉中断；Ｉ
Ｃ同步串行口中断。
　　单片机原理及接口技术　　
图 ． ＸＣ 中断系统
中断的允许由两个特殊功能寄存器ＩＥＮ和ＩＥＮ控制。ＩＥＮ的地址为 ＡＨ，格式如
图 ． 所示。
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＩＥＮ： ＥＡ ＥＡＤ ＥＳ ＥＳ ＥＴ ＥＸ ＥＴ ＥＸ
图 ． ＩＥＮ 格式定义
ＩＥＮ 各位的功能说明如下：
ＥＡ：中断系统总允许控制位。
ＥＡＤ：Ａ／Ｄ转换器中断允许位。
ＥＳ：Ｉ
Ｃ中断允许位。
ＥＳ：ＵＡＲＴ 中断允许位。
　　第 章 具有内核的位单片机简介　　
ＥＴ、ＥＴ：定时器 Ｔ、Ｔ 中断允许位。
ＥＸ、ＥＸ：外部中断ＩＮＴ、ＩＮＴ允许位。
ＩＥＮ的地址为 ＥＨ，其格式如图 ． 所示。
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＩＥＮ： ＥＴ ＥＣＭ ＥＣＭ ＥＣＭ ＥＣＴ ＥＣＴ ＥＣＴ ＥＣＴ
图． ＩＥＮ格式定义
ＩＥＮ 各位的功能说明如下：
ＥＴ：Ｔ 溢出中断允许位。
ＥＣＭ～ＥＣＭ：比较器 ～ 中断允许位。
ＥＣＴ～ＥＣＴ：捕捉器 ～ 输入端 ＣＴＩ～ＣＴＩ的中断允许位。
中断优先级由两个特殊功能寄存器ＩＰ 和ＩＰ 控制。ＩＰ 的地址为 ＢＨ，其格式如图
． 所示。
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＩＰ： Ｘ ＰＡＤ ＰＳ ＰＳ ＰＴ ＰＸ ＰＴ ＰＸ
图 ． ＩＰ 格式定义
ＩＰ 各位的功能说明如下：
ＰＡＤ：ＡＤＣ中断优先级控制位。
ＰＳ：Ｉ
Ｃ总线中断优先级控制位。
ＰＳ：ＵＡＲＴ 中断优先级控制位。
ＰＴ、ＰＴ：定时器 Ｔ、Ｔ 中断优先级控制位。
ＰＸ、ＰＸ：外部中断ＩＮＴ、ＩＮＴ中断优先级控制位。
ＩＰ 的地址为 ＦＨ，其格式定义如图 ． 所示。
Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ Ｄ
ＯＰ： ＰＴ ＰＣＭ ＰＣＭ ＰＣＭ ＰＣＴ ＰＣＴ ＰＣＴ ＰＣＴ
图 ． ＩＰ 格式定义
ＩＰ 格式的功能说明如下：
ＰＴ：定时器 Ｔ 中断优先级控制位；
ＰＣＭ～ＰＣＭ：比较寄存器 ～ 中断优先级控制位；
ＰＣＴ～ＰＣＴ：捕捉寄存器 ～ 中断优先级控制位。
ＸＣ 单片机与 ＭＣＳ 单片机的中断结构相似，采用两级中断方式， 个低优先
级中断可被 个高优先级中断，反之则不行。如果有几个同级中断同时请求中断，则按内
部规定的中断优先级顺序响应中断。表 ． 为 ＸＣ 内部中断硬件查询次序和中断矢
量地址。
　　单片机原理及接口技术　　
表． ＸＣ 中断硬件查询次序及中断矢量地址
中 断 源 符　　号 硬件查询次序 中 断 矢 量
外部中断 ＩＮＴ （最高） Ｈ
串行口Ｉ
Ｃ ＳＩＯ ＢＨ
ＡＤＣ转换完 ＡＤＣ Ｈ
Ｔ 溢出中断 Ｔ ＢＨ
捕捉 输入端 ＣＴＩ Ｈ
比较 ＣＭ ＢＨ
外部中断 ＩＮＴ Ｈ
捕捉 输入端 ＣＴＩ ＢＨ
比较 ＣＭ Ｈ
Ｔ 溢出 Ｔ ＢＨ
捕捉 输入端 ＣＴＩ Ｈ
比较 ＣＭ ＢＨ
串行口 ＵＡＲＴ ＳＩＯ Ｈ
捕捉 输入端 ＣＴＩ ＢＨ
Ｔ 溢出 Ｔ （最低） Ｈ
　　需要指出的是，ＸＣ在响应中断后，硬件只自动清除定时器 Ｔ、Ｔ的溢出中断标
志 ＴＦ、ＴＦ和由边沿触发的外部中断标志ＩＥ、ＩＥ，其余各中断标志必须由用户用软件
加以清除。
．． Ｉ
Ｃ总线简介
Ｉ
Ｃ总线是 Ｐｈｉｌｉｐｓ公司开发的一种简单、双向二线制同步串行总线。它只需要两根线
（串行时钟线和串行数据线）即可在连接于总线上的器件之间传送信息。这种总线的主要特
性如下：
（）总线只有两根线：串行时钟线和串行数据线；
（）每个连到总线上的器件都可由软件以唯一的地址寻址，并建立简单的主／从关系，
主器件既可作为发送器，又可作为接收器；
（）它是一个真正的多主总线，带有竞争检测和仲裁电路，可使多个主机任意同时发
送而不破坏总线上的数据；
（）同步时钟允许器件通过总线以不同的波特率进行通信；
（）同步时钟可以作为停止或重新启动串行口发送的握手方式；
（）连接到同一总线的集成电路数只受 ｐＦ的最大总线电容的限制。
Ｉ
Ｃ总线极大地方便了系统设计者，无须设计总线接口，因为总线已经集成在片内了，
从而大大缩短了设计时间，并且从系统中移去或增加集成电路芯片对总线上的其它集成电
路芯片没有影响。
　　第 章 具有内核的位单片机简介　　
Ｉ
Ｃ通过两根总线：串行数据线（ＳＤＡ）和串行时钟线（ＳＣＬ）。这两根线使连到总线上
的器件之间按一定的通信协议进行寻址和信息的传输。每个模块都有唯一的地址，在信息
传输过程中，Ｉ
Ｃ总线上的电路模块有的是主控制器（单片机），有的是被控制器，它们可以
是发送器或接收器，这决定于它所完成的功能。
Ｉ
Ｃ总线在进行数据传输时，由作为主控制器的电路模块来初始化一次数据的传输，
并在Ｉ
Ｃ总线上提供时钟进行传送。信息传输的对象、方向以及开始、终止也由主控制器
来决定。此时，在Ｉ
Ｃ总线上被主控制器所寻址的电路模块称为从控制器。在Ｉ
Ｃ 总线上
数据由发送器传出，被接收器接收，接收器在每次正确接收到一个数据字节后，都要在数
据总线ＳＤＡ 发送一个应答信号。
Ｉ
Ｃ具有多重主控的能力，这意味着可以有多个作为主控制器的芯片（具有Ｉ
Ｃ总线的
单片机）去控制占用总线。在Ｉ
Ｃ总线上进行数据传送的电路模块可根据不同的工作状态，
分为主控发送器、主控接收器、被控（从）发送器、被控接收器。很明显，一些智能电路如单
片微控制器等，可以工作在上述 种的任一状态中，而一些 ＰＡＭ、ＥＰＲＯＭ 存储器，只能
是被控发送器或被控接收器。
典型的Ｉ
Ｃ总线应用系统结构如图 ． 所示，Ｉ
Ｃ总线上可挂接若干个单片机应用
系统及若干个带Ｉ
Ｃ接口的器件，每个Ｉ
Ｃ接口作为一个节点，节点的数量和种类主要受
总电容量和地址容量的限制。ＸＣ 单片机具有Ｉ
Ｃ接口，可以直接挂在Ｉ
Ｃ总线上，对
没有Ｉ
Ｃ接口的单片机，可通过Ｉ
Ｃ接口扩展芯片 ＰＣＤ扩展Ｉ
Ｃ接口。
图 ． 典型的Ｉ
Ｃ总线应用系统结构
Ｉ
Ｃ总线上所有节点都有约定的地址以便实现可靠的数据传送，单片机节点作为主器
件时其地址无意义，作为从器件时其从地址在初始化程序中定位在Ｉ
Ｃ 总线地址寄存器
ＳＩＡＤＲ的高 位中。器件节点的位地址由两部分组成，完全由硬件确定，一部分为器件
编号地址，由芯片厂家规定；另一部分为引脚编号地址，由引脚的高低电平决定。如 位
ＬＥＤ驱动器ＳＡＡ的地址为ＡＡ，其中为器件编号地址，表明该器件为
显示 ＬＥＤ驱动器，ＡＡ 为该器件的两个引脚，分别接高、低电平时可以有片不同地址
的 ＬＥＤ驱动模块节点。字节的ＥＥＰＲＯＭ 器件ＰＣＦ的地址为ＡＡＡ，通过
对 个引脚的不同电平设置，可连接 片不同地址的 ＥＥＰＲＯＭ 芯片。芯片内地址则由主
器件发送的第一个数据字节来选择。关于Ｉ
Ｃ总线的详细操作请查阅有关资料。
　　单片机原理及接口技术　　
附录 Ａ
　　　　　　　　　　ＭＣＳ 指 令 表
下面分类列出了 ＭＣＳ 的指令表，供读者查阅，表中用的符号说明如下：
符号 意　　义
ａｄｄｒ 页面地址
ｂｉｔ 位地址
ｒｅｌ 相对偏移量，带符号的（的补码）位偏移字节
ｄｉｒｅｃｔ 直接地址单元（ＲＡＭ·ＳＦＲ·Ｉ／Ｏ）
（ｄｉｒｅｃｔ） 直接地址指出的单元内容
＃ｄａｔａ 立即数
Ｒｎ 工作寄存器 Ｒ～Ｒ
（Ｒｎ） 工作寄存器的内容
Ａ 累加器
（Ａ） 累加器内容
Ｒｉ ｉ＝，，数据指针 Ｒ或 Ｒ
（Ｒｉ） Ｒ或 Ｒ的内容
（（Ｒｉ）） Ｒ或 Ｒ指出的单元内容
（Ｘ） 某一寄存器的内容
Ｘ 某一寄存器
（（Ｘ）） 某一寄存器指出的单元内容
→ 数据传送方向
∧ 逻辑与
∨ 逻辑或
 逻辑异或
 对标志产生影响
× 不影响标志
　　　注：周期数为机器周期数，每个机器周期数为个时钟周期。
　　附录 Ａ ＭＣＳ 指令表　　
表 Ａ． ＭＣＳ 指令表
十六进制
代　　码 助 记 符 功　　能
对标志影响
Ｐ ＯＶ ＡＣ Ｃｙ
字
节
数
周
期
数
算 术 运 算 指 令
～Ｆ
，
～Ｆ
，
～Ｆ
，
～Ｆ
，
Ａ
～Ｆ
，
Ａ
Ｄ
ＡＤＤ Ａ，Ｒｎ
ＡＤＤ Ａ，ｄｉｒｅｃｔ
ＡＤＤ Ａ，＠Ｒｉ
ＡＤＤ Ａ，＃ｄａｔａ
ＡＤＤＣＡ，Ｒｎ
ＡＤＤＣ Ａ，ｄｉｒｅｃｔ
ＡＤＤＣ Ａ，＠Ｒｉ
ＡＤＤＣ Ａ，＃ｄａｔａ
ＳＵＢＢ Ａ，Ｒｎ
ＳＵＢＢ Ａ，ｄｉｒｅｃｔ
ＳＵＢＢ Ａ，＠Ｒｉ
ＳＵＢＢ Ａ，＃ｄａｔａ
ＩＮＣ Ａ
ＩＮＣ Ｒｎ
ＩＮＣｄｉｒｅｃｔ
ＩＮＣ ＠Ｒｉ
ＩＮＣ ＤＰＴＲ
ＤＥＣ Ａ
ＤＥＣ Ｒｎ
ＤＥＣｄｉｒｅｃｔ
ＤＥＣ ＠Ｒｉ
ＭＵＬ ＡＢ
ＤＩＶ ＡＢ
ＤＡ Ａ
Ａ←（Ａ）＋（Ｒｉ）
Ａ←（Ａ）＋（ｄｉｒｅｃｔ）
Ａ←（Ａ）＋（（Ｒｉ））
Ａ←（Ａ）＋ｄａｔａ
Ａ←（Ａ）＋（Ｒｎ）＋（Ｃｙ）
Ａ←（Ａ）＋（ｄｉｒｅｃｔ）＋（Ｃｙ）
Ａ←（Ａ）＋（（Ｒｉ））＋（Ｃｙ）
Ａ←（Ａ）＋ｄａｔａ＋（Ｃｙ）
Ａ←（Ａ）－（Ｒｎ）－（Ｃｙ）
Ａ←（Ａ）－（ｄｉｒｅｃｔ）－（Ｃｙ）
Ａ←（Ａ）－（（Ｒｉ））－（Ｃｙ）
Ａ←（Ａ）－ｄａｔａ－（Ｃｙ）
Ａ←（Ａ）＋
Ｒｎ←（Ｒｎ）＋
ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）＋
（Ｒｉ）←（（Ｒｉ））＋
ＤＰＴＲ←（ＤＰＴＲ）＋
Ａ←（Ａ）－
Ｒｎ←（Ｒｎ）－
ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）－
（Ｒｉ）←（（Ｒｉ））－
ＡＢ←（Ａ）·（Ｂ）
ＡＢ←（Ａ）／（Ｂ）
对 Ａ 进行十进制调整













×
×
×

×
×
×















×
×
×
×
×
×
×
×















×
×
×
×
×
×
×
×
×
×













×
×
×
×
×
×
×
×



逻 辑 运 算 指 令
～Ｆ
，
～Ｆ
，
ＡＮＬ Ａ，Ｒｎ
ＡＮＬ Ａ，ｄｉｒｅｃｔ
ＡＮＬ Ａ，＠Ｒｉ
ＡＮＬ Ａ，＃ｄａｔａ
ＡＮＬｄｉｒｅｃｔ，Ａ
ＡＮＬｄｉｒｅｃｔ，＃ｄａｔａ
ＯＲＬ Ａ，Ｒｎ
ＯＲＬ Ａ，ｄｉｒｅｃｔ
ＯＲＬ Ａ，＠Ｒｉ
ＯＲＬ Ａ，＃ｄａｔａ
ＯＲＬｄｉｒｅｃｔ，Ａ
Ａ←（Ａ）∧（Ｒｎ）
Ａ←（Ａ）∧（ｄｉｒｅｃｔ）
Ａ←（Ａ）∧（（Ｒｉ））
Ａ←（Ａ）∧ｄａｔａ
ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）∧（Ａ）
ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）∧ｄａｔａ
Ａ←（Ａ）∨（Ｒｎ）
Ａ←（Ａ）∨（ｄｉｒｅｃｔ）
Ａ←（Ａ）∨（（Ｒｉ））
Ａ←（Ａ）∨ｄａｔａ
ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）∨（Ａ）




×
×




×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
　　单片机原理及接口技术　　
续表（一）
十六进制
代　　码 助 记 符 功　　能
对标志影响
Ｐ ＯＶ ＡＣ Ｃｙ
字
节
数
周
期
数
～Ｆ
，
Ｅ
Ｆ
Ｃ
ＯＲＬｄｉｒｅｃｔ，＃ｄａｔａ
ＸＲＬ Ａ，Ｒｎ
ＸＲＬ Ａ，ｄｉｒｅｃｔ
ＸＲＬ Ａ，＠Ｒｉ
ＸＲＬ Ａ，＃ｄａｔａ
ＸＲＬｄｉｒｅｃｔ，Ａ
ＸＲＬｄｉｒｅｃｔ，＃ｄａｔａ
ＣＬＲ Ａ
ＣＰＬ Ａ
ＲＬ Ａ
ＲＬＣ Ａ
ＲＲ Ａ
ＲＲＣ Ａ
ＳＷＡＰ Ａ
ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）∨ｄａｔａ
Ａ←（Ａ）（Ｒｎ）
Ａ←（Ａ）（ｄｉｒｅｃｔ）
Ａ←（Ａ）（（Ｒｉ））
Ａ←（Ａ）ｄａｔａ
ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）（Ａ）
ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）ｄａｔａ
Ａ←
Ａ←（Ａ）
Ａ 循环左移一位
Ａ 带进位循环左移一位
Ａ 循环右移一位
Ａ 带进位循环右移一位
Ａ 半字节交换
×




×
×

×
×

×

×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×

×

×
数 据 传 送 指 令
Ｅ～ＥＦ
Ｅ
Ｅ，Ｅ
Ｆ～ＦＦ
Ａ～ＡＦ
～Ｆ
Ｆ
～Ｆ
，
Ｆ，Ｆ
Ａ，Ａ
，
Ｅ，Ｅ
Ｅ
Ｆ，Ｆ
ＭＯＶ Ａ，Ｒｎ
ＭＯＶ Ａ，ｄｉｒｅｃｔ
ＭＯＶ Ａ，＠Ｒｉ
ＭＯＶ Ａ，＃ｄａｔａ
ＭＯＶ Ｒｎ，Ａ
ＭＯＶ Ｒｎｄｉｒｅｃｔ
ＭＯＶ Ｒｎ，＃ｄａｔａ
ＭＶＯ ｄｉｒｅｃｔ，Ａ
ＭＯＶ ｄｉｒｅｃｔ，Ｒｎ
ＭＯＶ ｄｉｒｅｃｔ，ｄｉｒｅｃｔ
ＭＯＶ ｄｉｒｅｃｔ，＠Ｒｉ
ＭＯＶ ｄｉｒｅｃｔ，＃ｄａｔａ
ＭＯＶ ＠Ｒｉ，Ａ
ＭＯＶ ＠Ｒｉ，ｄｉｒｅｃｔ
ＭＯＶ ＠Ｒｉ，＃ｄａｔａ
ＭＯＶ ＤＰＴＲ，＃ｄａｔａ
ＭＯＶＣ Ａ，＠Ａ＋ＤＰＴＲ
ＭＯＶＣ Ａ，＠Ａ＋ＰＣ
ＭＯＶＸ Ａ，＠Ｒｉ
ＭＯＶＸ Ａ，＠ＤＰＴＲ
ＭＯＶＸ ＠Ｒｉ，Ａ
Ａ←（Ｒｎ）
Ａ←（ｄｉｒｅｃｔ）
Ａ←（（Ｒｉ））
Ａ←ｄａｔａ
Ｒｎ←（Ａ）
Ｒｎ←（ｄｉｒｅｃｔ）
Ｒｎ←ｄａｔａ
ｄｉｒｅｃｔ←（Ａ）
ｄｉｒｅｃｔ←（Ｒｎ）
ｄｉｒｅｃｔ←（ｄｉｒｅｃｔ）
ｄｉｒｅｃｔ←（（Ｒｉ））
ｄｉｒｅｃｔ←ｄａｔａ
（（Ｒｉ））←（Ａ）
（Ｒｉ）←（ｄｉｒｅｃｔ）
（Ｒｉ）←ｄａｔａ
ＤＰＴＲ←ｄａｔａ
Ａ←（（Ａ）＋（ＤＰＴＲ））
Ａ←（（Ａ）＋（ＰＣ））
Ａ←（（Ｒｉ）＋（Ｐ））
Ａ←（（ＤＰＴＲ））
（（Ｒｉ）＋（Ｐ））←（Ａ）




×
×
×
×
×
×
×
×
×
×
×
×




×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
　　附录 Ａ ＭＣＳ 指令表　　
续表（二）
十六进制
代　　码 助 记 符 功　　能
对标志影响
Ｐ ＯＶ ＡＣ Ｃｙ
字
节
数
周
期
数
Ｆ
Ｃ
Ｄ
Ｃ～ＣＦ
Ｃ
Ｃ，Ｃ
Ｄ，Ｄ
ＭＯＶＸ ＠ＤＰＴＲ，Ａ
ＰＵＳＨ ｄｉｒｅｃｔ
ＰＯＰｄｉｒｅｃｔ
ＸＣＨ Ａ，Ｒｎ
ＸＣＨ Ａ，ｄｉｒｅｃｔ
ＸＣＨ Ａ，＠Ｒｉ
ＸＣＨＤ Ａ，＠Ｒｉ
（ＤＰＴＲ）←（Ａ）
ＳＰ←（ＳＰ）＋，（ＳＰ）←（ｄｉｒｅｃｔ）
ｄｉｒｅｃｔ←（（ＳＰ）），ＳＰ←（ＳＰ）－
（Ａ）←→（Ｒｎ）
（Ａ）←→（ｄｉｒｅｃｔ）
（Ａ）←→（（Ｒｉ））
（Ａ）～←→（（Ｒｉ））～
×
×
×




×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
位 操 作 指 令
Ｃ
Ｃ
Ｄ
Ｄ
Ｂ
Ｂ
Ｂ
Ａ
Ａ
ＣＬＲ Ｃ
ＣＬＲ ｂｉｔ
ＳＥＴＢ Ｃ
ＳＥＴＢｂｉｔ
ＣＰＬ Ｃ
ＣＰＬ ｂｉｔ
ＡＮＬ Ｃ，ｂｉｔ
ＡＮＬ Ｃ，／ｂｉｔ
ＯＲＬ Ｃ，ｂｉｔ
ＯＲＬ Ｃ，／ｂｉｔ
ＭＯＶ Ｃ，ｂｉｔ
ＭＯＶ ｂｉｔ，Ｃ
Ｃｙ←
ｂｉｔ←
Ｃｙ←
ｂｉｔ←
Ｃｙ←（Ｃｙ）
ｂｉｔ←（ｂｉｔ）
Ｃｙ←（Ｃｙ）∧（ｂｉｔ）
Ｃｙ←（Ｃｙ）∧（ｂｉｔ）
Ｃｙ←（Ｃｙ）∨（ｂｉｔ）
Ｃ←（Ｃｙ）∨（ｂｉｔ）
Ｃｙ←（ｂｉｔ）
ｂｉｔ←（Ｃｙ）
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×








×
控 制 转 移 指 令
ＡＣＡＬＬａｄｄｒ
ＬＣＡＬＬａｄｄｒ
ＲＥＴ
ＲＥＴＩ
ＡＪＭＰａｄｄｒ
ＬＪＭＰａｄｄｒ
ＰＣ←（ＰＣ）＋，ＳＰ←（ＳＰ）＋
（ＳＰ）←（ＰＣ）Ｌ
ＳＰ←（ＳＰ）＋，（ＳＰ）←（ＰＣ）Ｈ
ＰＣ～←ａｄｄｒ
ＰＣ←（ＰＣ）＋，ＳＰ←（ＳＰ）＋
（ＳＰ）←（ＰＣ）Ｌ，ＳＰ←（ＳＰ）＋
（ＳＰ）←（ＰＣ）Ｈ ，ＰＣ←ａｄｄｒ
ＰＣＨ ←（（ＳＰ）），ＳＰ←（ＳＰ）－
ＰＣＬ（（ＳＰ）），ＳＰ←（ＳＰ）－
ＰＣＨ ←（（ＳＰ）），ＳＰ←（ＳＰ）－
ＰＣＬ←（（ＳＰ）），ＳＰ←（ＳＰ）－
从中断返回
ＰＣ～←ａｄｄｒ
ＰＣ←ａｄｄｒ
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
　　单片机原理及接口技术　　
续表（三）
十六进制
代　　码 助 记 符 功　　能
对标志影响
Ｐ ＯＶ ＡＣ Ｃｙ
字
节
数
周
期
数
Ｂ
Ｂ
Ｂ～ＢＦ
Ｂ，Ｂ
Ｄ～ＤＦ
Ｄ
ＳＪＭＰｒｅｌ
ＪＭＰ ＠Ａ＋ＤＰＴＲ
ＪＺｒｅｌ
ＪＮＺｒｅｌ
ＪＣｒｅｌ
ＪＮＣｒｅｌ
ＪＢｂｉｔ，ｒｅｌ
ＪＮＢｂｉｔ，ｒｅｌ
ＪＢＣ ｂｉｔｒｅｌ
ＣＪＮＥ Ａ，ｄｉｒｅｃｔ，ｒｅｌ
ＣＪＮＥ Ａ，＃ｄａｔａ，ｒｅｌ
ＣＪＮＥ Ｒｎ，＃ｄａｔａ，ｒｅｌ
ＣＪＮＥ ＠Ｒｉ，＃ｄａｔａ，ｒｅｌ
ＤＪＮＺ Ｒｎ，ｒｅｌ
ＤＪＮＺｄｉｒｅｃｔ，ｒｅｌ
ＮＯＰ
ＰＣ←（ＰＣ）＋ｒｅｌ
ＰＣ←（Ａ）＋（ＤＰＴＲ）
ＰＣ←（ＰＣ）＋
若（Ａ）＝，ＰＣ←（ＰＣ）＋ｒｅｌ
ＰＣ←（ＰＣ）＋，若（Ａ）不等于
，则 ＰＣ←（ＰＣ）＋ｒｅｌ
ＰＣ←（ＰＣ）＋，若 Ｃｙ＝
则 ＰＣ←（ＰＣ）＋ｒｅｌ
ＰＣ←（ＰＣ）＋，若 Ｃｙ＝
则 ＰＣ←（ＰＣ）＋ｒｅｌ
ＰＣ←（ＰＣ）＋，若（ｂｉｔ）＝
则 ＰＣ←（ＰＣ）＋ｒｅｌ
ＰＣ←（ＰＣ）＋，若（ｂｉｔ）＝
则 ＰＣ←（ＰＣ）＋ｒｅｌ
ＰＣ←（ＰＣ）＋，若 （ｂｉｔ）＝，
则ｂｉｔ←，ＰＣ←（ＰＣ）＋ｒｅｌ
ＰＣ←（ＰＣ）＋，若（Ａ）不 等 于
（ｄｉｒｅｃｔ），则 ＰＣ←（ＰＣ）＋ｒｅｌ
若（Ａ）＜（ｄｉｒｅｃｔ），则 Ｃｙ←
ＰＣ←（ＰＣ）＋，若（Ａ）不 等 于
ｄａｔａ，则 ＰＣ←（ＰＣ）＋ｒｅｌ
若（Ａ）小于ｄａｔａ，则 Ｃｙ←
ＰＣ←（ＰＣ）＋，若 （Ｒｎ）不 等
于ｄａｔａ，则 ＰＣ←（ＰＣ）＋ｒｅｌ
若（Ｒｎ）小于ｄａｔａ，则 Ｃｙ←
ＰＣ←（ＰＣ）＋，若（Ｒｉ）不等于
ｄａｔａ，则 ＰＣ←（ＰＣ）＋ｒｅｌ
若（（Ｒｉ））小于ｄａｔａ，则 Ｃｙ←
ＰＣ←（ＰＣ）＋，Ｒｎ←（Ｒｎ）－
，若（Ｒｎ）不 等 于，则 ＰＣ←
（ＰＣ）＋ｒｅｌ
ＰＣ←（ＰＣ）＋，ｄｉｒｅｃｔ←
（ｄｉｒｅｃｔ）－，若 （ｄｉｒｅｃｔ）不 等
于，则 ＰＣ←（ＰＣ）＋ｒｅｌ
空操作
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
×
　　附录 Ａ ＭＣＳ 指令表　　
附录 Ｂ 　　　　　单片机原理及接口技术实验
实验一 单片机开发系统的操作练习
．实验目的
通过简单程序的编辑、调试、执行，了解开发系统的操作步骤。
．实验设备
ＰＣ机一台，ＭＥ 开发机一套，＋Ｖ 电源一台。
．实验内容
计算 Ｎ 个数据的和：Ｙ ＝ ∑
ｎ
ｉ＝
Ｘｉ。其中，Ｘｉ分别放在片内 ＲＡＭ 区Ｈ～Ｈ 单元中
（ｎ＝），求和的结果 Ｙ 放在片内 ＲＡＭ 区Ｈ（高位）、Ｈ （低位）单元中。
示例程序ＳＵＭ．ＡＳＭ 如下：
　　 　 　 　ＯＲＧ Ｈ
ＬＪＭＰ ＭＡＩＮ
ＯＲＧ Ｈ
ＭＡＩＮ： ＭＯＶＲ，＃Ｈ
ＭＯＶＲ，＃Ｈ
ＭＯＶＲ，＃Ｈ
ＭＯＶＲ，＃Ｈ
Ｌ： ＭＯＶ Ａ，Ｒ
ＡＤＤＡ，＠Ｒ
ＭＯＶＲ，Ａ
ＩＮＣＲ
ＣＬＲＡ
ＡＤＤＣ Ａ，Ｒ
ＭＯＶＲ，Ａ
ＤＪＮＺＲ，Ｌ
　　单片机原理及接口技术　　
Ｌ： ＳＪＭＰＬ
在 ＰＣ机上用编辑软件编辑好文件 ＳＵＭ．ＡＳＭ 之后，运行 ＭＢＵＧ．ＥＸＥ；出现主菜单
后，选择 Ａｓｓｅｍｂｌｅ项汇编ＳＵＭ．ＡＳＭ 文件，生成 ＳＵＭ．ＨＥＸ 文件；若 ＳＵＭ．ＡＳＭ 文件
有错，需回到编辑状态修改后重新汇编。
将 ＭＥ 开发机用通信电缆连到 ＰＣ机的串行口上，开启开发机的＋Ｖ 供电电
源，开发机的数码管应显示“Ｐ”标记，仿真模式设为，即两个发光二极管都不亮。
一切正常后，在 ＭＢＵＧ 的主菜单上选择 Ｌｏａｄ项装入 ＳＵＭ．ＨＥＸ（或 ＳＵＭ．ＡＳＭ），
工作窗口中出现的代码文件如下：
　　地址 　　　指令码　　　　　助记符
　　　　　Ａ　　　　ＭＯＶ Ｒ，＃Ｈ
Ｂ ＭＯＶ Ｒ，＃Ｈ
Ｃ ＭＯＶ Ｒ，＃Ｈ
ＭＯＶ Ｒ，＃Ｈ
ＥＣ 　　Ｌ： ＭＯＶ Ａ，Ｒ
ＡＤＤ Ａ，＠Ｒ
Ａ ＦＣ ＭＯＶ Ｒ，Ａ
Ｂ ＩＮＣ Ｒ
Ｃ Ｅ ＣＬＲ Ａ
Ｄ Ｂ ＡＤＤＣ Ａ，Ｒ
Ｅ ＦＢ ＭＯＶ Ｒ，Ａ
Ｆ ＤＡＦＥ ＤＪＮＺ Ｒ，Ｌ
ＦＥ Ｌ： ＳＪＭＰ Ｌ
按 Ｔａｂ键将光标移动到存储器窗口，修改Ｈ～Ｈ 单元的内容。再将光标移至工
作窗口，按Ｆ键将ＰＣ设为Ｈ，按Ｆ键单步运行，观察内部ＲＡＭ 单元Ｈ、Ｈ 的
内容，做好记录。
练习：（）Ｈ＋Ｈ＋Ｈ＋Ｈ＋Ｈ＋Ｈ＝？
（）Ｈ＋Ｈ＋Ｈ＋Ｈ＋Ｈ＋Ｈ＝？
（）Ｈ＋ＦＨ＋ＢＨ＋Ｈ＋Ｈ＋ＣＨ＝？
另外，代码文件也可直接在开发机上输入、运行、显示。有关命令的使用方法参见第
章的介绍。
实验二 数 据 排 序
．实验目的
（）熟悉 ＭＣＳ 的指令系统，了解编程方法。
（）掌握开发机的使用方法。
．实验设备
ＰＣ机一台，ＭＥ 开发机一套，＋Ｖ 电源一台。
　　附录 Ｂ 单片机原理及接口技术实验　　
．实验内容
编写一段程序，将单片机内部 ＲＡＭ 单元Ｈ～ＦＨ 中的个数据按由小到大的顺
序重新排序。
．实验步骤
（）将编制的程序在 ＰＣ机上调试好后，装入开发机。
（）将一组数据（ＦＨ、Ｈ、Ｈ、Ｈ、Ｈ、Ｈ、Ｈ、Ｈ、ＦＨ、ＤＨ、ＣＨ、
Ｈ、Ｈ 、ＡＨ、Ｈ、ＢＨ）装入内部 ＲＡＭＨ～ＦＨ 单元。
（）运行程序，检查并记录结果。
（）被重新排序的数据仍放回到Ｈ～ＦＨ 单元。
．参考程序的流程图
主程序流程图（图 Ｂ．）： 子程序流程图（图 Ｂ．）：　　　　
图 Ｂ． 主程序流程图 图 Ｂ． 子程序流程图
　　单片机原理及接口技术　　
实验三 与的接口扩展
．实验目的
（）掌握单片机输入／输出接口扩展方法。
（）熟悉芯片性能，掌握其编程方法。
．实验设备
ＰＣ机一台，ＭＥ 开发机一套，＋Ｖ 电源一台， 电路板一块。
．实验原理
与的接口电路如图 Ｂ． 所示。ＰＡ 口为输入口，ＰＢ口为输出口，外接共阳
极 ＬＥＤ，图中的 ＲＡＭ 地址为Ｅ～ＥＦＦＨ。
图 Ｂ． 与的接口电路
的Ｉ／Ｏ 口地址为：
　　ＦＨ 　　命令／状态
ＦＨ ＰＡ 口
ＦＨ ＰＢ口
ＦＨ ＰＣ口
ＦＨ 计数器的低位
ＦＨ 计数器的高位
．实验内容
（）编制程序使开关状态从 ＰＡ 口输入后，送到 ＰＢ口。
（）编制程序使开关 状 态 从 ＰＡ 口 输 入 后，送 到的 ＦＨ 单 元，然 后 调 出 送 ＰＢ
口。同时Ｔｏｕｔ输出 分频方波。
　　附录 Ｂ 单片机原理及接口技术实验　　
．参考程序
（）开关状态从 ＰＡ 口输入后，送到 ＰＢ口。
　　　　　　ＯＲＧ Ｈ　　　　 　 　
ＬＪＭＰＩＯ
ＯＲＧ Ｈ　　　　　　
ＩＯ： ＭＯＶ ＤＰＴＲ，＃ＦＨ ；指向命令／状态口
ＭＯＶ Ａ，＃Ｈ ；ＰＡ 口输入，ＰＢ口输出
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；命令
ＬＰ： ＭＯＶＤＰＴＲ，＃ＦＨ ；指向 ＰＡ 口
ＭＯＶＸ Ａ，＠ＤＰＴＲ ；ＰＡ 口输入
ＩＮＣＤＰＴＲ ；指向 ＰＢ口
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；ＰＢ口输出
ＬＪＭＰ ＬＰ
ＬＪＭＰＩＯ
（）开关状态从 ＰＡ 口输入到的ＦＨ 单元，然后送 ＰＢ 口，同时Ｔｏｕｔ输出
分频方波。
　　　　　　ＯＲＧ Ｈ　　　 　　 　
ＬＪＭＰ ＭＡＩＮ
ＯＲＧ Ｈ　　　　　
ＭＡＩＮ： ＭＯＶ ＤＰＴＲ，＃ＦＨ
ＭＯＶ Ａ，＃ＣＨ
ＭＯＶＸ ＠ＤＰＴＲ，Ａ
ＭＯＶ ＤＰＴＲ，＃ＦＨ ；定时器低位
ＭＯＶ Ａ，＃ＡＨ ；分频
ＭＯＶＸ ＠ＤＰＴＲ，Ａ
ＩＮＣ ＤＰＴＲ ；定时器高位
ＭＯＶ Ａ，＃Ｈ
ＭＯＶＸ ＠ＤＰＴＲ，Ａ
ＬＰ： ＭＯＶ ＤＰＴＲ，＃ＦＨ ；指向 ＰＡ 口
ＭＯＶＸ Ａ，＠ＤＰＴＲ
ＭＯＶ ＤＰＴＲ，＃ＥＦＨ ；指向ＦＨ 单元
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；读入ＦＨ 单元
ＣＬＲ Ａ
ＭＯＶＸ Ａ，＠ＤＰＴＲ
ＭＯＶ ＤＰＴＲ，＃ＦＨ ；指向 ＰＢ口
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；ＰＡ 口输出
ＬＪＭＰ ＬＰ
　　单片机原理及接口技术　　
实验四 与 Ａ／Ｄ转换器的接口实验
．实验目的
（）掌握 ＡＤＣ与的接口方法。
（）掌握 Ａ／Ｄ转换程序的设计方法。
．实验设备
ＰＣ机一台，ＭＥ 开发机一套，＋Ｖ 电源两台（其中一台为电压可调电源，用于
ＡＤＣ模拟量的输入信号。
．实验原理
实验电路如 图 Ｂ．所 示，当 Ａ／Ｄ 转 换 结 束 时，ＡＤＣ的 ＥＯＣ 端上升为高电平。
的 ＡＬＥ信号给 ＡＤＣ提供时钟信号。当 ＳＴＡＲＴ 收到启动信号，启动将外
部输入的模拟量转化为数字量，ＥＯＣ为高电平时可读取 Ａ／Ｄ转换结果。
图 Ｂ． ＡＤＣ与的接口电路
．实验内容
（）将 Ａ／Ｄ转换板上的模拟量输入端分别输入直流电压Ｖ、Ｖ、Ｖ、Ｖ、Ｖ。
（）将编制好的程序装入开发机执行，记录 Ａ／Ｄ转换结果。
．程序流程图（参见图 Ｂ．）与参考程序
程序清单如下：
　　　　　ＯＲＧ Ｈ　　　　　 　　 　
ＡＤ： ＭＯＶ Ｒ，＃Ｈ ；设内存起始单元
ＭＯＶ Ｒ，＃ＦＨ ；循环计数器置初值
　　附录 Ｂ 单片机原理及接口技术实验　　
ＭＬ： ＭＯＶ ＤＰＴＲ，＃ＦＥＦＨ ；选通道
ＭＯＶＸ ＠ＤＰＴＲ，Ａ ；启动
ＭＯＶ Ｒ，＃Ｈ
ＤＬ： ＤＪＮＺ Ｒ，ＤＬ ；延时
ＨＥ： ＪＢ Ｐ．，ＨＥ ；结束否？
ＭＯＶＸ Ａ，＠ＤＰＴＲ ；结果送入内存 ＲＡＭ 中
ＭＯＶ ＠Ｒ，Ａ
ＩＮＣ Ｒ ；采集完？采集ＦＨ 次
ＤＪＮＺ Ｒ，ＭＬ
ＨＨ： ＳＪＭＰ ＨＨ ；暂停
图 Ｂ． 程序流程图
　　单片机原理及接口技术　　
参 考 文 献
［］ Ｉｎｔｅｌ，ＥｍｂｅｄｄｅｄＣｏｎｔｒｏｌｌｅｒＨａｎｄｂｏｏｋ．
［］ 接口电路编写组．最新接口电路实用速查手册．北京：电子工业出版社，
［］ 孙涵芳，等．单片机原理及应用．北京：北京航空航天大学出版社，
［］ 周航慈．单片机应用程序设计技术．北京：北京航空航天大学出版社，
［］ 李华，等．ＭＣＳ 系列单片机实用接口技术．北 京：北京航空航天大学出版社，
［］ 蔡美琴，等．ＭＣＳ 系列单片机系统及其应用．北京：高等教育出版社，
［］ 佘永权．ＡＴＭＥＬ系列单片机应用技术．北京：北京航空航天大学出版社，
［］ 梅丽凤，等．单片机原理及接口技术（修订版）．北京：清华大学出版社，
［］ 魏立峰，等．单片机原理与应用技术．北京：北京大学出版社，
参 考 文 献